
DATN_GSHT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055f0  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  080057d4  080057d4  000157d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005874  08005874  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08005874  08005874  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005874  08005874  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005874  08005874  00015874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005878  08005878  00015878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800587c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d0  20000010  0800588c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e0  0800588c  000204e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018d73  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b5b  00000000  00000000  00038dac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001630  00000000  00000000  0003c908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014a0  00000000  00000000  0003df38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d27f  00000000  00000000  0003f3d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cc0c  00000000  00000000  0005c657  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a6b91  00000000  00000000  00079263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011fdf4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c40  00000000  00000000  0011fe44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000010 	.word	0x20000010
 8000200:	00000000 	.word	0x00000000
 8000204:	080057bc 	.word	0x080057bc

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000014 	.word	0x20000014
 8000220:	080057bc 	.word	0x080057bc

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <__aeabi_frsub>:
 8000234:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000238:	e002      	b.n	8000240 <__addsf3>
 800023a:	bf00      	nop

0800023c <__aeabi_fsub>:
 800023c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000240 <__addsf3>:
 8000240:	0042      	lsls	r2, r0, #1
 8000242:	bf1f      	itttt	ne
 8000244:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000248:	ea92 0f03 	teqne	r2, r3
 800024c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000250:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000254:	d06a      	beq.n	800032c <__addsf3+0xec>
 8000256:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800025a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800025e:	bfc1      	itttt	gt
 8000260:	18d2      	addgt	r2, r2, r3
 8000262:	4041      	eorgt	r1, r0
 8000264:	4048      	eorgt	r0, r1
 8000266:	4041      	eorgt	r1, r0
 8000268:	bfb8      	it	lt
 800026a:	425b      	neglt	r3, r3
 800026c:	2b19      	cmp	r3, #25
 800026e:	bf88      	it	hi
 8000270:	4770      	bxhi	lr
 8000272:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000276:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800027a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800027e:	bf18      	it	ne
 8000280:	4240      	negne	r0, r0
 8000282:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000286:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800028a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800028e:	bf18      	it	ne
 8000290:	4249      	negne	r1, r1
 8000292:	ea92 0f03 	teq	r2, r3
 8000296:	d03f      	beq.n	8000318 <__addsf3+0xd8>
 8000298:	f1a2 0201 	sub.w	r2, r2, #1
 800029c:	fa41 fc03 	asr.w	ip, r1, r3
 80002a0:	eb10 000c 	adds.w	r0, r0, ip
 80002a4:	f1c3 0320 	rsb	r3, r3, #32
 80002a8:	fa01 f103 	lsl.w	r1, r1, r3
 80002ac:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002b0:	d502      	bpl.n	80002b8 <__addsf3+0x78>
 80002b2:	4249      	negs	r1, r1
 80002b4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80002b8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80002bc:	d313      	bcc.n	80002e6 <__addsf3+0xa6>
 80002be:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002c2:	d306      	bcc.n	80002d2 <__addsf3+0x92>
 80002c4:	0840      	lsrs	r0, r0, #1
 80002c6:	ea4f 0131 	mov.w	r1, r1, rrx
 80002ca:	f102 0201 	add.w	r2, r2, #1
 80002ce:	2afe      	cmp	r2, #254	; 0xfe
 80002d0:	d251      	bcs.n	8000376 <__addsf3+0x136>
 80002d2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80002d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80002da:	bf08      	it	eq
 80002dc:	f020 0001 	biceq.w	r0, r0, #1
 80002e0:	ea40 0003 	orr.w	r0, r0, r3
 80002e4:	4770      	bx	lr
 80002e6:	0049      	lsls	r1, r1, #1
 80002e8:	eb40 0000 	adc.w	r0, r0, r0
 80002ec:	3a01      	subs	r2, #1
 80002ee:	bf28      	it	cs
 80002f0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80002f4:	d2ed      	bcs.n	80002d2 <__addsf3+0x92>
 80002f6:	fab0 fc80 	clz	ip, r0
 80002fa:	f1ac 0c08 	sub.w	ip, ip, #8
 80002fe:	ebb2 020c 	subs.w	r2, r2, ip
 8000302:	fa00 f00c 	lsl.w	r0, r0, ip
 8000306:	bfaa      	itet	ge
 8000308:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800030c:	4252      	neglt	r2, r2
 800030e:	4318      	orrge	r0, r3
 8000310:	bfbc      	itt	lt
 8000312:	40d0      	lsrlt	r0, r2
 8000314:	4318      	orrlt	r0, r3
 8000316:	4770      	bx	lr
 8000318:	f092 0f00 	teq	r2, #0
 800031c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000320:	bf06      	itte	eq
 8000322:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000326:	3201      	addeq	r2, #1
 8000328:	3b01      	subne	r3, #1
 800032a:	e7b5      	b.n	8000298 <__addsf3+0x58>
 800032c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000330:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000334:	bf18      	it	ne
 8000336:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800033a:	d021      	beq.n	8000380 <__addsf3+0x140>
 800033c:	ea92 0f03 	teq	r2, r3
 8000340:	d004      	beq.n	800034c <__addsf3+0x10c>
 8000342:	f092 0f00 	teq	r2, #0
 8000346:	bf08      	it	eq
 8000348:	4608      	moveq	r0, r1
 800034a:	4770      	bx	lr
 800034c:	ea90 0f01 	teq	r0, r1
 8000350:	bf1c      	itt	ne
 8000352:	2000      	movne	r0, #0
 8000354:	4770      	bxne	lr
 8000356:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800035a:	d104      	bne.n	8000366 <__addsf3+0x126>
 800035c:	0040      	lsls	r0, r0, #1
 800035e:	bf28      	it	cs
 8000360:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000364:	4770      	bx	lr
 8000366:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800036a:	bf3c      	itt	cc
 800036c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000370:	4770      	bxcc	lr
 8000372:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000376:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800037a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800037e:	4770      	bx	lr
 8000380:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000384:	bf16      	itet	ne
 8000386:	4608      	movne	r0, r1
 8000388:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800038c:	4601      	movne	r1, r0
 800038e:	0242      	lsls	r2, r0, #9
 8000390:	bf06      	itte	eq
 8000392:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000396:	ea90 0f01 	teqeq	r0, r1
 800039a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800039e:	4770      	bx	lr

080003a0 <__aeabi_ui2f>:
 80003a0:	f04f 0300 	mov.w	r3, #0
 80003a4:	e004      	b.n	80003b0 <__aeabi_i2f+0x8>
 80003a6:	bf00      	nop

080003a8 <__aeabi_i2f>:
 80003a8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80003ac:	bf48      	it	mi
 80003ae:	4240      	negmi	r0, r0
 80003b0:	ea5f 0c00 	movs.w	ip, r0
 80003b4:	bf08      	it	eq
 80003b6:	4770      	bxeq	lr
 80003b8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80003bc:	4601      	mov	r1, r0
 80003be:	f04f 0000 	mov.w	r0, #0
 80003c2:	e01c      	b.n	80003fe <__aeabi_l2f+0x2a>

080003c4 <__aeabi_ul2f>:
 80003c4:	ea50 0201 	orrs.w	r2, r0, r1
 80003c8:	bf08      	it	eq
 80003ca:	4770      	bxeq	lr
 80003cc:	f04f 0300 	mov.w	r3, #0
 80003d0:	e00a      	b.n	80003e8 <__aeabi_l2f+0x14>
 80003d2:	bf00      	nop

080003d4 <__aeabi_l2f>:
 80003d4:	ea50 0201 	orrs.w	r2, r0, r1
 80003d8:	bf08      	it	eq
 80003da:	4770      	bxeq	lr
 80003dc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80003e0:	d502      	bpl.n	80003e8 <__aeabi_l2f+0x14>
 80003e2:	4240      	negs	r0, r0
 80003e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003e8:	ea5f 0c01 	movs.w	ip, r1
 80003ec:	bf02      	ittt	eq
 80003ee:	4684      	moveq	ip, r0
 80003f0:	4601      	moveq	r1, r0
 80003f2:	2000      	moveq	r0, #0
 80003f4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80003f8:	bf08      	it	eq
 80003fa:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80003fe:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000402:	fabc f28c 	clz	r2, ip
 8000406:	3a08      	subs	r2, #8
 8000408:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800040c:	db10      	blt.n	8000430 <__aeabi_l2f+0x5c>
 800040e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000412:	4463      	add	r3, ip
 8000414:	fa00 fc02 	lsl.w	ip, r0, r2
 8000418:	f1c2 0220 	rsb	r2, r2, #32
 800041c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000420:	fa20 f202 	lsr.w	r2, r0, r2
 8000424:	eb43 0002 	adc.w	r0, r3, r2
 8000428:	bf08      	it	eq
 800042a:	f020 0001 	biceq.w	r0, r0, #1
 800042e:	4770      	bx	lr
 8000430:	f102 0220 	add.w	r2, r2, #32
 8000434:	fa01 fc02 	lsl.w	ip, r1, r2
 8000438:	f1c2 0220 	rsb	r2, r2, #32
 800043c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000440:	fa21 f202 	lsr.w	r2, r1, r2
 8000444:	eb43 0002 	adc.w	r0, r3, r2
 8000448:	bf08      	it	eq
 800044a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800044e:	4770      	bx	lr

08000450 <__aeabi_fmul>:
 8000450:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000454:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000458:	bf1e      	ittt	ne
 800045a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800045e:	ea92 0f0c 	teqne	r2, ip
 8000462:	ea93 0f0c 	teqne	r3, ip
 8000466:	d06f      	beq.n	8000548 <__aeabi_fmul+0xf8>
 8000468:	441a      	add	r2, r3
 800046a:	ea80 0c01 	eor.w	ip, r0, r1
 800046e:	0240      	lsls	r0, r0, #9
 8000470:	bf18      	it	ne
 8000472:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000476:	d01e      	beq.n	80004b6 <__aeabi_fmul+0x66>
 8000478:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800047c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000480:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000484:	fba0 3101 	umull	r3, r1, r0, r1
 8000488:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800048c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000490:	bf3e      	ittt	cc
 8000492:	0049      	lslcc	r1, r1, #1
 8000494:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000498:	005b      	lslcc	r3, r3, #1
 800049a:	ea40 0001 	orr.w	r0, r0, r1
 800049e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80004a2:	2afd      	cmp	r2, #253	; 0xfd
 80004a4:	d81d      	bhi.n	80004e2 <__aeabi_fmul+0x92>
 80004a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80004aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80004ae:	bf08      	it	eq
 80004b0:	f020 0001 	biceq.w	r0, r0, #1
 80004b4:	4770      	bx	lr
 80004b6:	f090 0f00 	teq	r0, #0
 80004ba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80004be:	bf08      	it	eq
 80004c0:	0249      	lsleq	r1, r1, #9
 80004c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80004c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80004ca:	3a7f      	subs	r2, #127	; 0x7f
 80004cc:	bfc2      	ittt	gt
 80004ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80004d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80004d6:	4770      	bxgt	lr
 80004d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004dc:	f04f 0300 	mov.w	r3, #0
 80004e0:	3a01      	subs	r2, #1
 80004e2:	dc5d      	bgt.n	80005a0 <__aeabi_fmul+0x150>
 80004e4:	f112 0f19 	cmn.w	r2, #25
 80004e8:	bfdc      	itt	le
 80004ea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80004ee:	4770      	bxle	lr
 80004f0:	f1c2 0200 	rsb	r2, r2, #0
 80004f4:	0041      	lsls	r1, r0, #1
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	f1c2 0220 	rsb	r2, r2, #32
 80004fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000502:	ea5f 0031 	movs.w	r0, r1, rrx
 8000506:	f140 0000 	adc.w	r0, r0, #0
 800050a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800050e:	bf08      	it	eq
 8000510:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000514:	4770      	bx	lr
 8000516:	f092 0f00 	teq	r2, #0
 800051a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800051e:	bf02      	ittt	eq
 8000520:	0040      	lsleq	r0, r0, #1
 8000522:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000526:	3a01      	subeq	r2, #1
 8000528:	d0f9      	beq.n	800051e <__aeabi_fmul+0xce>
 800052a:	ea40 000c 	orr.w	r0, r0, ip
 800052e:	f093 0f00 	teq	r3, #0
 8000532:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000536:	bf02      	ittt	eq
 8000538:	0049      	lsleq	r1, r1, #1
 800053a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800053e:	3b01      	subeq	r3, #1
 8000540:	d0f9      	beq.n	8000536 <__aeabi_fmul+0xe6>
 8000542:	ea41 010c 	orr.w	r1, r1, ip
 8000546:	e78f      	b.n	8000468 <__aeabi_fmul+0x18>
 8000548:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800054c:	ea92 0f0c 	teq	r2, ip
 8000550:	bf18      	it	ne
 8000552:	ea93 0f0c 	teqne	r3, ip
 8000556:	d00a      	beq.n	800056e <__aeabi_fmul+0x11e>
 8000558:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800055c:	bf18      	it	ne
 800055e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000562:	d1d8      	bne.n	8000516 <__aeabi_fmul+0xc6>
 8000564:	ea80 0001 	eor.w	r0, r0, r1
 8000568:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800056c:	4770      	bx	lr
 800056e:	f090 0f00 	teq	r0, #0
 8000572:	bf17      	itett	ne
 8000574:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000578:	4608      	moveq	r0, r1
 800057a:	f091 0f00 	teqne	r1, #0
 800057e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000582:	d014      	beq.n	80005ae <__aeabi_fmul+0x15e>
 8000584:	ea92 0f0c 	teq	r2, ip
 8000588:	d101      	bne.n	800058e <__aeabi_fmul+0x13e>
 800058a:	0242      	lsls	r2, r0, #9
 800058c:	d10f      	bne.n	80005ae <__aeabi_fmul+0x15e>
 800058e:	ea93 0f0c 	teq	r3, ip
 8000592:	d103      	bne.n	800059c <__aeabi_fmul+0x14c>
 8000594:	024b      	lsls	r3, r1, #9
 8000596:	bf18      	it	ne
 8000598:	4608      	movne	r0, r1
 800059a:	d108      	bne.n	80005ae <__aeabi_fmul+0x15e>
 800059c:	ea80 0001 	eor.w	r0, r0, r1
 80005a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80005a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005ac:	4770      	bx	lr
 80005ae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005b2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80005b6:	4770      	bx	lr

080005b8 <__aeabi_fdiv>:
 80005b8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005bc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80005c0:	bf1e      	ittt	ne
 80005c2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80005c6:	ea92 0f0c 	teqne	r2, ip
 80005ca:	ea93 0f0c 	teqne	r3, ip
 80005ce:	d069      	beq.n	80006a4 <__aeabi_fdiv+0xec>
 80005d0:	eba2 0203 	sub.w	r2, r2, r3
 80005d4:	ea80 0c01 	eor.w	ip, r0, r1
 80005d8:	0249      	lsls	r1, r1, #9
 80005da:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80005de:	d037      	beq.n	8000650 <__aeabi_fdiv+0x98>
 80005e0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80005e4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80005e8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80005ec:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80005f0:	428b      	cmp	r3, r1
 80005f2:	bf38      	it	cc
 80005f4:	005b      	lslcc	r3, r3, #1
 80005f6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80005fa:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80005fe:	428b      	cmp	r3, r1
 8000600:	bf24      	itt	cs
 8000602:	1a5b      	subcs	r3, r3, r1
 8000604:	ea40 000c 	orrcs.w	r0, r0, ip
 8000608:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 800060c:	bf24      	itt	cs
 800060e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000612:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000616:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800061a:	bf24      	itt	cs
 800061c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000620:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000624:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000628:	bf24      	itt	cs
 800062a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800062e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000632:	011b      	lsls	r3, r3, #4
 8000634:	bf18      	it	ne
 8000636:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800063a:	d1e0      	bne.n	80005fe <__aeabi_fdiv+0x46>
 800063c:	2afd      	cmp	r2, #253	; 0xfd
 800063e:	f63f af50 	bhi.w	80004e2 <__aeabi_fmul+0x92>
 8000642:	428b      	cmp	r3, r1
 8000644:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000648:	bf08      	it	eq
 800064a:	f020 0001 	biceq.w	r0, r0, #1
 800064e:	4770      	bx	lr
 8000650:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000654:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000658:	327f      	adds	r2, #127	; 0x7f
 800065a:	bfc2      	ittt	gt
 800065c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000660:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000664:	4770      	bxgt	lr
 8000666:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800066a:	f04f 0300 	mov.w	r3, #0
 800066e:	3a01      	subs	r2, #1
 8000670:	e737      	b.n	80004e2 <__aeabi_fmul+0x92>
 8000672:	f092 0f00 	teq	r2, #0
 8000676:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800067a:	bf02      	ittt	eq
 800067c:	0040      	lsleq	r0, r0, #1
 800067e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000682:	3a01      	subeq	r2, #1
 8000684:	d0f9      	beq.n	800067a <__aeabi_fdiv+0xc2>
 8000686:	ea40 000c 	orr.w	r0, r0, ip
 800068a:	f093 0f00 	teq	r3, #0
 800068e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000692:	bf02      	ittt	eq
 8000694:	0049      	lsleq	r1, r1, #1
 8000696:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800069a:	3b01      	subeq	r3, #1
 800069c:	d0f9      	beq.n	8000692 <__aeabi_fdiv+0xda>
 800069e:	ea41 010c 	orr.w	r1, r1, ip
 80006a2:	e795      	b.n	80005d0 <__aeabi_fdiv+0x18>
 80006a4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80006a8:	ea92 0f0c 	teq	r2, ip
 80006ac:	d108      	bne.n	80006c0 <__aeabi_fdiv+0x108>
 80006ae:	0242      	lsls	r2, r0, #9
 80006b0:	f47f af7d 	bne.w	80005ae <__aeabi_fmul+0x15e>
 80006b4:	ea93 0f0c 	teq	r3, ip
 80006b8:	f47f af70 	bne.w	800059c <__aeabi_fmul+0x14c>
 80006bc:	4608      	mov	r0, r1
 80006be:	e776      	b.n	80005ae <__aeabi_fmul+0x15e>
 80006c0:	ea93 0f0c 	teq	r3, ip
 80006c4:	d104      	bne.n	80006d0 <__aeabi_fdiv+0x118>
 80006c6:	024b      	lsls	r3, r1, #9
 80006c8:	f43f af4c 	beq.w	8000564 <__aeabi_fmul+0x114>
 80006cc:	4608      	mov	r0, r1
 80006ce:	e76e      	b.n	80005ae <__aeabi_fmul+0x15e>
 80006d0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80006d4:	bf18      	it	ne
 80006d6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80006da:	d1ca      	bne.n	8000672 <__aeabi_fdiv+0xba>
 80006dc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80006e0:	f47f af5c 	bne.w	800059c <__aeabi_fmul+0x14c>
 80006e4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80006e8:	f47f af3c 	bne.w	8000564 <__aeabi_fmul+0x114>
 80006ec:	e75f      	b.n	80005ae <__aeabi_fmul+0x15e>
 80006ee:	bf00      	nop

080006f0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006f6:	1d3b      	adds	r3, r7, #4
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000700:	4b18      	ldr	r3, [pc, #96]	; (8000764 <MX_ADC1_Init+0x74>)
 8000702:	4a19      	ldr	r2, [pc, #100]	; (8000768 <MX_ADC1_Init+0x78>)
 8000704:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000706:	4b17      	ldr	r3, [pc, #92]	; (8000764 <MX_ADC1_Init+0x74>)
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800070c:	4b15      	ldr	r3, [pc, #84]	; (8000764 <MX_ADC1_Init+0x74>)
 800070e:	2201      	movs	r2, #1
 8000710:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000712:	4b14      	ldr	r3, [pc, #80]	; (8000764 <MX_ADC1_Init+0x74>)
 8000714:	2200      	movs	r2, #0
 8000716:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000718:	4b12      	ldr	r3, [pc, #72]	; (8000764 <MX_ADC1_Init+0x74>)
 800071a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800071e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000720:	4b10      	ldr	r3, [pc, #64]	; (8000764 <MX_ADC1_Init+0x74>)
 8000722:	2200      	movs	r2, #0
 8000724:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000726:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <MX_ADC1_Init+0x74>)
 8000728:	2201      	movs	r2, #1
 800072a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800072c:	480d      	ldr	r0, [pc, #52]	; (8000764 <MX_ADC1_Init+0x74>)
 800072e:	f001 fa33 	bl	8001b98 <HAL_ADC_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000738:	f000 fb28 	bl	8000d8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800073c:	230b      	movs	r3, #11
 800073e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000740:	2301      	movs	r3, #1
 8000742:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8000744:	2303      	movs	r3, #3
 8000746:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000748:	1d3b      	adds	r3, r7, #4
 800074a:	4619      	mov	r1, r3
 800074c:	4805      	ldr	r0, [pc, #20]	; (8000764 <MX_ADC1_Init+0x74>)
 800074e:	f001 fc8d 	bl	800206c <HAL_ADC_ConfigChannel>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000758:	f000 fb18 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800075c:	bf00      	nop
 800075e:	3710      	adds	r7, #16
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	2000002c 	.word	0x2000002c
 8000768:	40012400 	.word	0x40012400

0800076c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800077c:	4b18      	ldr	r3, [pc, #96]	; (80007e0 <MX_ADC2_Init+0x74>)
 800077e:	4a19      	ldr	r2, [pc, #100]	; (80007e4 <MX_ADC2_Init+0x78>)
 8000780:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000782:	4b17      	ldr	r3, [pc, #92]	; (80007e0 <MX_ADC2_Init+0x74>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000788:	4b15      	ldr	r3, [pc, #84]	; (80007e0 <MX_ADC2_Init+0x74>)
 800078a:	2201      	movs	r2, #1
 800078c:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800078e:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <MX_ADC2_Init+0x74>)
 8000790:	2200      	movs	r2, #0
 8000792:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000794:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <MX_ADC2_Init+0x74>)
 8000796:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800079a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800079c:	4b10      	ldr	r3, [pc, #64]	; (80007e0 <MX_ADC2_Init+0x74>)
 800079e:	2200      	movs	r2, #0
 80007a0:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 80007a2:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <MX_ADC2_Init+0x74>)
 80007a4:	2201      	movs	r2, #1
 80007a6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80007a8:	480d      	ldr	r0, [pc, #52]	; (80007e0 <MX_ADC2_Init+0x74>)
 80007aa:	f001 f9f5 	bl	8001b98 <HAL_ADC_Init>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 80007b4:	f000 faea 	bl	8000d8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80007b8:	230c      	movs	r3, #12
 80007ba:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007bc:	2301      	movs	r3, #1
 80007be:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 80007c0:	2304      	movs	r3, #4
 80007c2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007c4:	1d3b      	adds	r3, r7, #4
 80007c6:	4619      	mov	r1, r3
 80007c8:	4805      	ldr	r0, [pc, #20]	; (80007e0 <MX_ADC2_Init+0x74>)
 80007ca:	f001 fc4f 	bl	800206c <HAL_ADC_ConfigChannel>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 80007d4:	f000 fada 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80007d8:	bf00      	nop
 80007da:	3710      	adds	r7, #16
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	2000005c 	.word	0x2000005c
 80007e4:	40012800 	.word	0x40012800

080007e8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08a      	sub	sp, #40	; 0x28
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f0:	f107 0318 	add.w	r3, r7, #24
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
 80007fa:	609a      	str	r2, [r3, #8]
 80007fc:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4a30      	ldr	r2, [pc, #192]	; (80008c4 <HAL_ADC_MspInit+0xdc>)
 8000804:	4293      	cmp	r3, r2
 8000806:	d12a      	bne.n	800085e <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000808:	4b2f      	ldr	r3, [pc, #188]	; (80008c8 <HAL_ADC_MspInit+0xe0>)
 800080a:	699b      	ldr	r3, [r3, #24]
 800080c:	4a2e      	ldr	r2, [pc, #184]	; (80008c8 <HAL_ADC_MspInit+0xe0>)
 800080e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000812:	6193      	str	r3, [r2, #24]
 8000814:	4b2c      	ldr	r3, [pc, #176]	; (80008c8 <HAL_ADC_MspInit+0xe0>)
 8000816:	699b      	ldr	r3, [r3, #24]
 8000818:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800081c:	617b      	str	r3, [r7, #20]
 800081e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000820:	4b29      	ldr	r3, [pc, #164]	; (80008c8 <HAL_ADC_MspInit+0xe0>)
 8000822:	699b      	ldr	r3, [r3, #24]
 8000824:	4a28      	ldr	r2, [pc, #160]	; (80008c8 <HAL_ADC_MspInit+0xe0>)
 8000826:	f043 0310 	orr.w	r3, r3, #16
 800082a:	6193      	str	r3, [r2, #24]
 800082c:	4b26      	ldr	r3, [pc, #152]	; (80008c8 <HAL_ADC_MspInit+0xe0>)
 800082e:	699b      	ldr	r3, [r3, #24]
 8000830:	f003 0310 	and.w	r3, r3, #16
 8000834:	613b      	str	r3, [r7, #16]
 8000836:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = ADC_VIN_ACCQI_Pin;
 8000838:	2302      	movs	r3, #2
 800083a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800083c:	2303      	movs	r3, #3
 800083e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_VIN_ACCQI_GPIO_Port, &GPIO_InitStruct);
 8000840:	f107 0318 	add.w	r3, r7, #24
 8000844:	4619      	mov	r1, r3
 8000846:	4821      	ldr	r0, [pc, #132]	; (80008cc <HAL_ADC_MspInit+0xe4>)
 8000848:	f001 ffc2 	bl	80027d0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800084c:	2200      	movs	r2, #0
 800084e:	2100      	movs	r1, #0
 8000850:	2012      	movs	r0, #18
 8000852:	f001 fe7e 	bl	8002552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000856:	2012      	movs	r0, #18
 8000858:	f001 fe97 	bl	800258a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800085c:	e02e      	b.n	80008bc <HAL_ADC_MspInit+0xd4>
  else if(adcHandle->Instance==ADC2)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	4a1b      	ldr	r2, [pc, #108]	; (80008d0 <HAL_ADC_MspInit+0xe8>)
 8000864:	4293      	cmp	r3, r2
 8000866:	d129      	bne.n	80008bc <HAL_ADC_MspInit+0xd4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000868:	4b17      	ldr	r3, [pc, #92]	; (80008c8 <HAL_ADC_MspInit+0xe0>)
 800086a:	699b      	ldr	r3, [r3, #24]
 800086c:	4a16      	ldr	r2, [pc, #88]	; (80008c8 <HAL_ADC_MspInit+0xe0>)
 800086e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000872:	6193      	str	r3, [r2, #24]
 8000874:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <HAL_ADC_MspInit+0xe0>)
 8000876:	699b      	ldr	r3, [r3, #24]
 8000878:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800087c:	60fb      	str	r3, [r7, #12]
 800087e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000880:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <HAL_ADC_MspInit+0xe0>)
 8000882:	699b      	ldr	r3, [r3, #24]
 8000884:	4a10      	ldr	r2, [pc, #64]	; (80008c8 <HAL_ADC_MspInit+0xe0>)
 8000886:	f043 0310 	orr.w	r3, r3, #16
 800088a:	6193      	str	r3, [r2, #24]
 800088c:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <HAL_ADC_MspInit+0xe0>)
 800088e:	699b      	ldr	r3, [r3, #24]
 8000890:	f003 0310 	and.w	r3, r3, #16
 8000894:	60bb      	str	r3, [r7, #8]
 8000896:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LEVEL_SENSOR_Pin;
 8000898:	2304      	movs	r3, #4
 800089a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800089c:	2303      	movs	r3, #3
 800089e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LEVEL_SENSOR_GPIO_Port, &GPIO_InitStruct);
 80008a0:	f107 0318 	add.w	r3, r7, #24
 80008a4:	4619      	mov	r1, r3
 80008a6:	4809      	ldr	r0, [pc, #36]	; (80008cc <HAL_ADC_MspInit+0xe4>)
 80008a8:	f001 ff92 	bl	80027d0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80008ac:	2200      	movs	r2, #0
 80008ae:	2100      	movs	r1, #0
 80008b0:	2012      	movs	r0, #18
 80008b2:	f001 fe4e 	bl	8002552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80008b6:	2012      	movs	r0, #18
 80008b8:	f001 fe67 	bl	800258a <HAL_NVIC_EnableIRQ>
}
 80008bc:	bf00      	nop
 80008be:	3728      	adds	r7, #40	; 0x28
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40012400 	.word	0x40012400
 80008c8:	40021000 	.word	0x40021000
 80008cc:	40011000 	.word	0x40011000
 80008d0:	40012800 	.word	0x40012800

080008d4 <log_data>:
#include "debug.h"

void log_data(char *string)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart5, (uint8_t *)string, strlen(string), 1000);
 80008dc:	6878      	ldr	r0, [r7, #4]
 80008de:	f7ff fca1 	bl	8000224 <strlen>
 80008e2:	4603      	mov	r3, r0
 80008e4:	b29a      	uxth	r2, r3
 80008e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ea:	6879      	ldr	r1, [r7, #4]
 80008ec:	4803      	ldr	r0, [pc, #12]	; (80008fc <log_data+0x28>)
 80008ee:	f004 fd87 	bl	8005400 <HAL_UART_Transmit>
 80008f2:	bf00      	nop
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000404 	.word	0x20000404

08000900 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b088      	sub	sp, #32
 8000904:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000906:	f107 0310 	add.w	r3, r7, #16
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]
 8000910:	609a      	str	r2, [r3, #8]
 8000912:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000914:	4b4c      	ldr	r3, [pc, #304]	; (8000a48 <MX_GPIO_Init+0x148>)
 8000916:	699b      	ldr	r3, [r3, #24]
 8000918:	4a4b      	ldr	r2, [pc, #300]	; (8000a48 <MX_GPIO_Init+0x148>)
 800091a:	f043 0310 	orr.w	r3, r3, #16
 800091e:	6193      	str	r3, [r2, #24]
 8000920:	4b49      	ldr	r3, [pc, #292]	; (8000a48 <MX_GPIO_Init+0x148>)
 8000922:	699b      	ldr	r3, [r3, #24]
 8000924:	f003 0310 	and.w	r3, r3, #16
 8000928:	60fb      	str	r3, [r7, #12]
 800092a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800092c:	4b46      	ldr	r3, [pc, #280]	; (8000a48 <MX_GPIO_Init+0x148>)
 800092e:	699b      	ldr	r3, [r3, #24]
 8000930:	4a45      	ldr	r2, [pc, #276]	; (8000a48 <MX_GPIO_Init+0x148>)
 8000932:	f043 0320 	orr.w	r3, r3, #32
 8000936:	6193      	str	r3, [r2, #24]
 8000938:	4b43      	ldr	r3, [pc, #268]	; (8000a48 <MX_GPIO_Init+0x148>)
 800093a:	699b      	ldr	r3, [r3, #24]
 800093c:	f003 0320 	and.w	r3, r3, #32
 8000940:	60bb      	str	r3, [r7, #8]
 8000942:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000944:	4b40      	ldr	r3, [pc, #256]	; (8000a48 <MX_GPIO_Init+0x148>)
 8000946:	699b      	ldr	r3, [r3, #24]
 8000948:	4a3f      	ldr	r2, [pc, #252]	; (8000a48 <MX_GPIO_Init+0x148>)
 800094a:	f043 0304 	orr.w	r3, r3, #4
 800094e:	6193      	str	r3, [r2, #24]
 8000950:	4b3d      	ldr	r3, [pc, #244]	; (8000a48 <MX_GPIO_Init+0x148>)
 8000952:	699b      	ldr	r3, [r3, #24]
 8000954:	f003 0304 	and.w	r3, r3, #4
 8000958:	607b      	str	r3, [r7, #4]
 800095a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800095c:	4b3a      	ldr	r3, [pc, #232]	; (8000a48 <MX_GPIO_Init+0x148>)
 800095e:	699b      	ldr	r3, [r3, #24]
 8000960:	4a39      	ldr	r2, [pc, #228]	; (8000a48 <MX_GPIO_Init+0x148>)
 8000962:	f043 0308 	orr.w	r3, r3, #8
 8000966:	6193      	str	r3, [r2, #24]
 8000968:	4b37      	ldr	r3, [pc, #220]	; (8000a48 <MX_GPIO_Init+0x148>)
 800096a:	699b      	ldr	r3, [r3, #24]
 800096c:	f003 0308 	and.w	r3, r3, #8
 8000970:	603b      	str	r3, [r7, #0]
 8000972:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DS18B20_SENSOR_Pin|DHT11_SENSOR_Pin|GNSS_CTRL_PWR_Pin|GNSS_RESET_Pin, GPIO_PIN_RESET);
 8000974:	2200      	movs	r2, #0
 8000976:	f44f 7146 	mov.w	r1, #792	; 0x318
 800097a:	4834      	ldr	r0, [pc, #208]	; (8000a4c <MX_GPIO_Init+0x14c>)
 800097c:	f002 f8d3 	bl	8002b26 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RFID_SS_GPIO_Port, RFID_SS_Pin, GPIO_PIN_SET);
 8000980:	2201      	movs	r2, #1
 8000982:	2110      	movs	r1, #16
 8000984:	4832      	ldr	r0, [pc, #200]	; (8000a50 <MX_GPIO_Init+0x150>)
 8000986:	f002 f8ce 	bl	8002b26 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SDCARD_SS_Pin|FLASH_SS_Pin, GPIO_PIN_RESET);
 800098a:	2200      	movs	r2, #0
 800098c:	f241 0102 	movw	r1, #4098	; 0x1002
 8000990:	4830      	ldr	r0, [pc, #192]	; (8000a54 <MX_GPIO_Init+0x154>)
 8000992:	f002 f8c8 	bl	8002b26 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SIM_CTRL_PWR_Pin|SIM_PWRKEY_Pin|SIM_RESET_Pin, GPIO_PIN_RESET);
 8000996:	2200      	movs	r2, #0
 8000998:	f44f 4118 	mov.w	r1, #38912	; 0x9800
 800099c:	482c      	ldr	r0, [pc, #176]	; (8000a50 <MX_GPIO_Init+0x150>)
 800099e:	f002 f8c2 	bl	8002b26 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NPN_DATA_IN_Pin;
 80009a2:	2301      	movs	r3, #1
 80009a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80009a6:	4b2c      	ldr	r3, [pc, #176]	; (8000a58 <MX_GPIO_Init+0x158>)
 80009a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(NPN_DATA_IN_GPIO_Port, &GPIO_InitStruct);
 80009ae:	f107 0310 	add.w	r3, r7, #16
 80009b2:	4619      	mov	r1, r3
 80009b4:	4825      	ldr	r0, [pc, #148]	; (8000a4c <MX_GPIO_Init+0x14c>)
 80009b6:	f001 ff0b 	bl	80027d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = DS18B20_SENSOR_Pin|DHT11_SENSOR_Pin|GNSS_CTRL_PWR_Pin|GNSS_RESET_Pin;
 80009ba:	f44f 7346 	mov.w	r3, #792	; 0x318
 80009be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c0:	2301      	movs	r3, #1
 80009c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c8:	2302      	movs	r3, #2
 80009ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009cc:	f107 0310 	add.w	r3, r7, #16
 80009d0:	4619      	mov	r1, r3
 80009d2:	481e      	ldr	r0, [pc, #120]	; (8000a4c <MX_GPIO_Init+0x14c>)
 80009d4:	f001 fefc 	bl	80027d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RFID_SS_Pin|SIM_CTRL_PWR_Pin|SIM_PWRKEY_Pin|SIM_RESET_Pin;
 80009d8:	f649 0310 	movw	r3, #38928	; 0x9810
 80009dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009de:	2301      	movs	r3, #1
 80009e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e6:	2302      	movs	r3, #2
 80009e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ea:	f107 0310 	add.w	r3, r7, #16
 80009ee:	4619      	mov	r1, r3
 80009f0:	4817      	ldr	r0, [pc, #92]	; (8000a50 <MX_GPIO_Init+0x150>)
 80009f2:	f001 feed 	bl	80027d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SDCARD_SS_Pin|FLASH_SS_Pin;
 80009f6:	f241 0302 	movw	r3, #4098	; 0x1002
 80009fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fc:	2301      	movs	r3, #1
 80009fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a04:	2302      	movs	r3, #2
 8000a06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a08:	f107 0310 	add.w	r3, r7, #16
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4811      	ldr	r0, [pc, #68]	; (8000a54 <MX_GPIO_Init+0x154>)
 8000a10:	f001 fede 	bl	80027d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SIM_STATUS_Pin;
 8000a14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SIM_STATUS_GPIO_Port, &GPIO_InitStruct);
 8000a22:	f107 0310 	add.w	r3, r7, #16
 8000a26:	4619      	mov	r1, r3
 8000a28:	4809      	ldr	r0, [pc, #36]	; (8000a50 <MX_GPIO_Init+0x150>)
 8000a2a:	f001 fed1 	bl	80027d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2100      	movs	r1, #0
 8000a32:	2006      	movs	r0, #6
 8000a34:	f001 fd8d 	bl	8002552 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a38:	2006      	movs	r0, #6
 8000a3a:	f001 fda6 	bl	800258a <HAL_NVIC_EnableIRQ>

}
 8000a3e:	bf00      	nop
 8000a40:	3720      	adds	r7, #32
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40021000 	.word	0x40021000
 8000a4c:	40011000 	.word	0x40011000
 8000a50:	40010800 	.word	0x40010800
 8000a54:	40010c00 	.word	0x40010c00
 8000a58:	10310000 	.word	0x10310000

08000a5c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a60:	4b12      	ldr	r3, [pc, #72]	; (8000aac <MX_I2C1_Init+0x50>)
 8000a62:	4a13      	ldr	r2, [pc, #76]	; (8000ab0 <MX_I2C1_Init+0x54>)
 8000a64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a66:	4b11      	ldr	r3, [pc, #68]	; (8000aac <MX_I2C1_Init+0x50>)
 8000a68:	4a12      	ldr	r2, [pc, #72]	; (8000ab4 <MX_I2C1_Init+0x58>)
 8000a6a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a6c:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <MX_I2C1_Init+0x50>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a72:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <MX_I2C1_Init+0x50>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a78:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <MX_I2C1_Init+0x50>)
 8000a7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a7e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a80:	4b0a      	ldr	r3, [pc, #40]	; (8000aac <MX_I2C1_Init+0x50>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a86:	4b09      	ldr	r3, [pc, #36]	; (8000aac <MX_I2C1_Init+0x50>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a8c:	4b07      	ldr	r3, [pc, #28]	; (8000aac <MX_I2C1_Init+0x50>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a92:	4b06      	ldr	r3, [pc, #24]	; (8000aac <MX_I2C1_Init+0x50>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a98:	4804      	ldr	r0, [pc, #16]	; (8000aac <MX_I2C1_Init+0x50>)
 8000a9a:	f002 f875 	bl	8002b88 <HAL_I2C_Init>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000aa4:	f000 f972 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000aa8:	bf00      	nop
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	2000008c 	.word	0x2000008c
 8000ab0:	40005400 	.word	0x40005400
 8000ab4:	000186a0 	.word	0x000186a0

08000ab8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b088      	sub	sp, #32
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac0:	f107 0310 	add.w	r3, r7, #16
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	609a      	str	r2, [r3, #8]
 8000acc:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4a15      	ldr	r2, [pc, #84]	; (8000b28 <HAL_I2C_MspInit+0x70>)
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	d123      	bne.n	8000b20 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad8:	4b14      	ldr	r3, [pc, #80]	; (8000b2c <HAL_I2C_MspInit+0x74>)
 8000ada:	699b      	ldr	r3, [r3, #24]
 8000adc:	4a13      	ldr	r2, [pc, #76]	; (8000b2c <HAL_I2C_MspInit+0x74>)
 8000ade:	f043 0308 	orr.w	r3, r3, #8
 8000ae2:	6193      	str	r3, [r2, #24]
 8000ae4:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <HAL_I2C_MspInit+0x74>)
 8000ae6:	699b      	ldr	r3, [r3, #24]
 8000ae8:	f003 0308 	and.w	r3, r3, #8
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
 8000af0:	23c0      	movs	r3, #192	; 0xc0
 8000af2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000af4:	2312      	movs	r3, #18
 8000af6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000af8:	2303      	movs	r3, #3
 8000afa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000afc:	f107 0310 	add.w	r3, r7, #16
 8000b00:	4619      	mov	r1, r3
 8000b02:	480b      	ldr	r0, [pc, #44]	; (8000b30 <HAL_I2C_MspInit+0x78>)
 8000b04:	f001 fe64 	bl	80027d0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b08:	4b08      	ldr	r3, [pc, #32]	; (8000b2c <HAL_I2C_MspInit+0x74>)
 8000b0a:	69db      	ldr	r3, [r3, #28]
 8000b0c:	4a07      	ldr	r2, [pc, #28]	; (8000b2c <HAL_I2C_MspInit+0x74>)
 8000b0e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b12:	61d3      	str	r3, [r2, #28]
 8000b14:	4b05      	ldr	r3, [pc, #20]	; (8000b2c <HAL_I2C_MspInit+0x74>)
 8000b16:	69db      	ldr	r3, [r3, #28]
 8000b18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b1c:	60bb      	str	r3, [r7, #8]
 8000b1e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000b20:	bf00      	nop
 8000b22:	3720      	adds	r7, #32
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40005400 	.word	0x40005400
 8000b2c:	40021000 	.word	0x40021000
 8000b30:	40010c00 	.word	0x40010c00

08000b34 <HAL_GPIO_EXTI_Callback>:
    sim7672_callback();
  }
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	80fb      	strh	r3, [r7, #6]
  //reset timer 2
  HAL_TIM_Base_Stop(&htim2);
 8000b3e:	481c      	ldr	r0, [pc, #112]	; (8000bb0 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000b40:	f003 ffd8 	bl	8004af4 <HAL_TIM_Base_Stop>
  TIM2 -> CNT = 0;
 8000b44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b48:	2200      	movs	r2, #0
 8000b4a:	625a      	str	r2, [r3, #36]	; 0x24

  current_time = HAL_GetTick();
 8000b4c:	f000 fff6 	bl	8001b3c <HAL_GetTick>
 8000b50:	4603      	mov	r3, r0
 8000b52:	4618      	mov	r0, r3
 8000b54:	f7ff fc24 	bl	80003a0 <__aeabi_ui2f>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	4a16      	ldr	r2, [pc, #88]	; (8000bb4 <HAL_GPIO_EXTI_Callback+0x80>)
 8000b5c:	6013      	str	r3, [r2, #0]

	npn_flag_check = CHANGE;
 8000b5e:	4b16      	ldr	r3, [pc, #88]	; (8000bb8 <HAL_GPIO_EXTI_Callback+0x84>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
  Vehical_State = Move;
 8000b64:	4b15      	ldr	r3, [pc, #84]	; (8000bbc <HAL_GPIO_EXTI_Callback+0x88>)
 8000b66:	2201      	movs	r2, #1
 8000b68:	601a      	str	r2, [r3, #0]
  npn_count++;
 8000b6a:	4b15      	ldr	r3, [pc, #84]	; (8000bc0 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	3301      	adds	r3, #1
 8000b70:	4a13      	ldr	r2, [pc, #76]	; (8000bc0 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000b72:	6013      	str	r3, [r2, #0]
  if (npn_count==20)
 8000b74:	4b12      	ldr	r3, [pc, #72]	; (8000bc0 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	2b14      	cmp	r3, #20
 8000b7a:	d111      	bne.n	8000ba0 <HAL_GPIO_EXTI_Callback+0x6c>
  {
    float time_cycle = current_time-last_time;
 8000b7c:	4b0d      	ldr	r3, [pc, #52]	; (8000bb4 <HAL_GPIO_EXTI_Callback+0x80>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a10      	ldr	r2, [pc, #64]	; (8000bc4 <HAL_GPIO_EXTI_Callback+0x90>)
 8000b82:	6812      	ldr	r2, [r2, #0]
 8000b84:	4611      	mov	r1, r2
 8000b86:	4618      	mov	r0, r3
 8000b88:	f7ff fb58 	bl	800023c <__aeabi_fsub>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	60fb      	str	r3, [r7, #12]
    Vehical_veloc=(1.0*1000)/(time_cycle);
 8000b90:	68f9      	ldr	r1, [r7, #12]
 8000b92:	480d      	ldr	r0, [pc, #52]	; (8000bc8 <HAL_GPIO_EXTI_Callback+0x94>)
 8000b94:	f7ff fd10 	bl	80005b8 <__aeabi_fdiv>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	; (8000bcc <HAL_GPIO_EXTI_Callback+0x98>)
 8000b9e:	601a      	str	r2, [r3, #0]
    //tinh toan van toc
  }
  //start timer2
  HAL_TIM_Base_Start_IT(&htim2);
 8000ba0:	4803      	ldr	r0, [pc, #12]	; (8000bb0 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000ba2:	f003 ffcd 	bl	8004b40 <HAL_TIM_Base_Start_IT>
}
 8000ba6:	bf00      	nop
 8000ba8:	3710      	adds	r7, #16
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	2000032c 	.word	0x2000032c
 8000bb4:	200000e8 	.word	0x200000e8
 8000bb8:	20000000 	.word	0x20000000
 8000bbc:	200000e4 	.word	0x200000e4
 8000bc0:	200000e0 	.word	0x200000e0
 8000bc4:	200000ec 	.word	0x200000ec
 8000bc8:	447a0000 	.word	0x447a0000
 8000bcc:	200000f0 	.word	0x200000f0

08000bd0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  if(htim == &htim2)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	4a0b      	ldr	r2, [pc, #44]	; (8000c08 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d105      	bne.n	8000bec <HAL_TIM_PeriodElapsedCallback+0x1c>
  {
    npn_flag_check = NOT_CHANGE;
 8000be0:	4b0a      	ldr	r3, [pc, #40]	; (8000c0c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000be2:	2201      	movs	r2, #1
 8000be4:	601a      	str	r2, [r3, #0]
    Vehical_State = Stop;
 8000be6:	4b0a      	ldr	r3, [pc, #40]	; (8000c10 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
  }
  if(htim == &htim3)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	4a09      	ldr	r2, [pc, #36]	; (8000c14 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d104      	bne.n	8000bfe <HAL_TIM_PeriodElapsedCallback+0x2e>
  {
    log_data("timecallback\n");
 8000bf4:	4808      	ldr	r0, [pc, #32]	; (8000c18 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000bf6:	f7ff fe6d 	bl	80008d4 <log_data>
    sim7672_timerCallback();
 8000bfa:	f000 f9d9 	bl	8000fb0 <sim7672_timerCallback>
  }
}
 8000bfe:	bf00      	nop
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	2000032c 	.word	0x2000032c
 8000c0c:	20000000 	.word	0x20000000
 8000c10:	200000e4 	.word	0x200000e4
 8000c14:	20000374 	.word	0x20000374
 8000c18:	080057d4 	.word	0x080057d4

08000c1c <HAL_RTC_AlarmAEventCallback>:

//RTC

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  ///HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
  check =1;
 8000c24:	4b03      	ldr	r3, [pc, #12]	; (8000c34 <HAL_RTC_AlarmAEventCallback+0x18>)
 8000c26:	2201      	movs	r2, #1
 8000c28:	601a      	str	r2, [r3, #0]

}
 8000c2a:	bf00      	nop
 8000c2c:	370c      	adds	r7, #12
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bc80      	pop	{r7}
 8000c32:	4770      	bx	lr
 8000c34:	200000f4 	.word	0x200000f4

08000c38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c3c:	f000 ff26 	bl	8001a8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c40:	f000 f842 	bl	8000cc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c44:	f7ff fe5c 	bl	8000900 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000c48:	f7ff fd52 	bl	80006f0 <MX_ADC1_Init>
  MX_SPI1_Init();
 8000c4c:	f000 f9f8 	bl	8001040 <MX_SPI1_Init>
  MX_ADC2_Init();
 8000c50:	f7ff fd8c 	bl	800076c <MX_ADC2_Init>
  MX_TIM1_Init();
 8000c54:	f000 fc04 	bl	8001460 <MX_TIM1_Init>
  MX_UART5_Init();
 8000c58:	f000 fd6c 	bl	8001734 <MX_UART5_Init>
  MX_I2C1_Init();
 8000c5c:	f7ff fefe 	bl	8000a5c <MX_I2C1_Init>
  MX_SPI2_Init();
 8000c60:	f000 fa24 	bl	80010ac <MX_SPI2_Init>
  MX_SPI3_Init();
 8000c64:	f000 fa58 	bl	8001118 <MX_SPI3_Init>
  MX_UART4_Init();
 8000c68:	f000 fd3a 	bl	80016e0 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8000c6c:	f000 fd8c 	bl	8001788 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000c70:	f000 fdb4 	bl	80017dc <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000c74:	f000 fc44 	bl	8001500 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000c78:	f000 fc90 	bl	800159c <MX_TIM3_Init>
  MX_RTC_Init();
 8000c7c:	f000 f8e4 	bl	8000e48 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8000c80:	480c      	ldr	r0, [pc, #48]	; (8000cb4 <main+0x7c>)
 8000c82:	f003 fedf 	bl	8004a44 <HAL_TIM_Base_Start>
  ////HAL_TIM_Base_Start_IT(&htim2);
  //HAL_TIM_Base_Start(&htim3);

  HAL_ADC_Start(&hadc1);
 8000c86:	480c      	ldr	r0, [pc, #48]	; (8000cb8 <main+0x80>)
 8000c88:	f001 f870 	bl	8001d6c <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 8000c8c:	480b      	ldr	r0, [pc, #44]	; (8000cbc <main+0x84>)
 8000c8e:	f001 f86d 	bl	8001d6c <HAL_ADC_Start>
  log_data("ttesssst\n");
 8000c92:	480b      	ldr	r0, [pc, #44]	; (8000cc0 <main+0x88>)
 8000c94:	f7ff fe1e 	bl	80008d4 <log_data>
  //RTC
  rtc_init();
 8000c98:	f000 f87e 	bl	8000d98 <rtc_init>
    // if ( HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1)!= 0x1000)
  // {
  //   set_time();
  // }
      rtc_set_time();
 8000c9c:	f000 f898 	bl	8000dd0 <rtc_set_time>
  // rc522_init();

  sim7672_pwrkey();
 8000ca0:	f000 f96a 	bl	8000f78 <sim7672_pwrkey>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    log_data("ttesssstn");
 8000ca4:	4807      	ldr	r0, [pc, #28]	; (8000cc4 <main+0x8c>)
 8000ca6:	f7ff fe15 	bl	80008d4 <log_data>
    HAL_Delay(500);
 8000caa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cae:	f000 ff4f 	bl	8001b50 <HAL_Delay>
    log_data("ttesssstn");
 8000cb2:	e7f7      	b.n	8000ca4 <main+0x6c>
 8000cb4:	200002e4 	.word	0x200002e4
 8000cb8:	2000002c 	.word	0x2000002c
 8000cbc:	2000005c 	.word	0x2000005c
 8000cc0:	080057e4 	.word	0x080057e4
 8000cc4:	080057f0 	.word	0x080057f0

08000cc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b096      	sub	sp, #88	; 0x58
 8000ccc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000cd2:	2228      	movs	r2, #40	; 0x28
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f004 fd44 	bl	8005764 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cdc:	f107 031c 	add.w	r3, r7, #28
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]
 8000cea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cec:	1d3b      	adds	r3, r7, #4
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]
 8000cf6:	60da      	str	r2, [r3, #12]
 8000cf8:	611a      	str	r2, [r3, #16]
 8000cfa:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000cfc:	2305      	movs	r3, #5
 8000cfe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d04:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d06:	2300      	movs	r3, #0
 8000d08:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d12:	2302      	movs	r3, #2
 8000d14:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d1a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d1c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000d20:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d22:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d26:	4618      	mov	r0, r3
 8000d28:	f002 f87e 	bl	8002e28 <HAL_RCC_OscConfig>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000d32:	f000 f82b 	bl	8000d8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d36:	230f      	movs	r3, #15
 8000d38:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d46:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d4c:	f107 031c 	add.w	r3, r7, #28
 8000d50:	2102      	movs	r1, #2
 8000d52:	4618      	mov	r0, r3
 8000d54:	f002 faea 	bl	800332c <HAL_RCC_ClockConfig>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000d5e:	f000 f815 	bl	8000d8c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8000d62:	2303      	movs	r3, #3
 8000d64:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000d66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d6a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000d6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d70:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d72:	1d3b      	adds	r3, r7, #4
 8000d74:	4618      	mov	r0, r3
 8000d76:	f002 fc67 	bl	8003648 <HAL_RCCEx_PeriphCLKConfig>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000d80:	f000 f804 	bl	8000d8c <Error_Handler>
  }
}
 8000d84:	bf00      	nop
 8000d86:	3758      	adds	r7, #88	; 0x58
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d90:	b672      	cpsid	i
}
 8000d92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <Error_Handler+0x8>
	...

08000d98 <rtc_init>:
/* Includes ------------------------------------------------------------------*/
#include "rtc.h"

/* USER CODE BEGIN 0 */
void rtc_init()
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  hrtc.Instance = RTC;
 8000d9c:	4b0a      	ldr	r3, [pc, #40]	; (8000dc8 <rtc_init+0x30>)
 8000d9e:	4a0b      	ldr	r2, [pc, #44]	; (8000dcc <rtc_init+0x34>)
 8000da0:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000da2:	4b09      	ldr	r3, [pc, #36]	; (8000dc8 <rtc_init+0x30>)
 8000da4:	f04f 32ff 	mov.w	r2, #4294967295
 8000da8:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8000daa:	4b07      	ldr	r3, [pc, #28]	; (8000dc8 <rtc_init+0x30>)
 8000dac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000db0:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000db2:	4805      	ldr	r0, [pc, #20]	; (8000dc8 <rtc_init+0x30>)
 8000db4:	f002 fdd6 	bl	8003964 <HAL_RTC_Init>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <rtc_init+0x2a>
  {
    Error_Handler();
 8000dbe:	f7ff ffe5 	bl	8000d8c <Error_Handler>
  }
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	200000f8 	.word	0x200000f8
 8000dcc:	40002800 	.word	0x40002800

08000dd0 <rtc_set_time>:

void rtc_set_time()
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 8000dd6:	1d3b      	adds	r3, r7, #4
 8000dd8:	2100      	movs	r1, #0
 8000dda:	460a      	mov	r2, r1
 8000ddc:	801a      	strh	r2, [r3, #0]
 8000dde:	460a      	mov	r2, r1
 8000de0:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8000de2:	2300      	movs	r3, #0
 8000de4:	603b      	str	r3, [r7, #0]
  sTime.Hours = 0x10;
 8000de6:	2310      	movs	r3, #16
 8000de8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000dea:	2300      	movs	r3, #0
 8000dec:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000dee:	2300      	movs	r3, #0
 8000df0:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000df2:	1d3b      	adds	r3, r7, #4
 8000df4:	2201      	movs	r2, #1
 8000df6:	4619      	mov	r1, r3
 8000df8:	4812      	ldr	r0, [pc, #72]	; (8000e44 <rtc_set_time+0x74>)
 8000dfa:	f002 fe3f 	bl	8003a7c <HAL_RTC_SetTime>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <rtc_set_time+0x38>
  {
    Error_Handler();
 8000e04:	f7ff ffc2 	bl	8000d8c <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 8000e10:	2301      	movs	r3, #1
 8000e12:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 8000e14:	2300      	movs	r3, #0
 8000e16:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8000e18:	463b      	mov	r3, r7
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4809      	ldr	r0, [pc, #36]	; (8000e44 <rtc_set_time+0x74>)
 8000e20:	f002 ff9c 	bl	8003d5c <HAL_RTC_SetDate>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <rtc_set_time+0x5e>
  {
    Error_Handler();
 8000e2a:	f7ff ffaf 	bl	8000d8c <Error_Handler>
  }
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8000e2e:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8000e32:	2101      	movs	r1, #1
 8000e34:	4803      	ldr	r0, [pc, #12]	; (8000e44 <rtc_set_time+0x74>)
 8000e36:	f003 fc15 	bl	8004664 <HAL_RTCEx_BKUPWrite>
}
 8000e3a:	bf00      	nop
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	200000f8 	.word	0x200000f8

08000e48 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000e4e:	f107 030c 	add.w	r3, r7, #12
 8000e52:	2100      	movs	r1, #0
 8000e54:	460a      	mov	r2, r1
 8000e56:	801a      	strh	r2, [r3, #0]
 8000e58:	460a      	mov	r2, r1
 8000e5a:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	60bb      	str	r3, [r7, #8]
  RTC_AlarmTypeDef sAlarm = {0};
 8000e60:	463b      	mov	r3, r7
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	605a      	str	r2, [r3, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000e68:	4b27      	ldr	r3, [pc, #156]	; (8000f08 <MX_RTC_Init+0xc0>)
 8000e6a:	4a28      	ldr	r2, [pc, #160]	; (8000f0c <MX_RTC_Init+0xc4>)
 8000e6c:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000e6e:	4b26      	ldr	r3, [pc, #152]	; (8000f08 <MX_RTC_Init+0xc0>)
 8000e70:	f04f 32ff 	mov.w	r2, #4294967295
 8000e74:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8000e76:	4b24      	ldr	r3, [pc, #144]	; (8000f08 <MX_RTC_Init+0xc0>)
 8000e78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e7c:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000e7e:	4822      	ldr	r0, [pc, #136]	; (8000f08 <MX_RTC_Init+0xc0>)
 8000e80:	f002 fd70 	bl	8003964 <HAL_RTC_Init>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8000e8a:	f7ff ff7f 	bl	8000d8c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x10;
 8000e8e:	2310      	movs	r3, #16
 8000e90:	733b      	strb	r3, [r7, #12]
  sTime.Minutes = 0x0;
 8000e92:	2300      	movs	r3, #0
 8000e94:	737b      	strb	r3, [r7, #13]
  sTime.Seconds = 0x0;
 8000e96:	2300      	movs	r3, #0
 8000e98:	73bb      	strb	r3, [r7, #14]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000e9a:	f107 030c 	add.w	r3, r7, #12
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4819      	ldr	r0, [pc, #100]	; (8000f08 <MX_RTC_Init+0xc0>)
 8000ea4:	f002 fdea 	bl	8003a7c <HAL_RTC_SetTime>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_RTC_Init+0x6a>
  {
    Error_Handler();
 8000eae:	f7ff ff6d 	bl	8000d8c <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	723b      	strb	r3, [r7, #8]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	727b      	strb	r3, [r7, #9]
  DateToUpdate.Date = 0x1;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	72bb      	strb	r3, [r7, #10]
  DateToUpdate.Year = 0x23;
 8000ebe:	2323      	movs	r3, #35	; 0x23
 8000ec0:	72fb      	strb	r3, [r7, #11]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8000ec2:	f107 0308 	add.w	r3, r7, #8
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	4619      	mov	r1, r3
 8000eca:	480f      	ldr	r0, [pc, #60]	; (8000f08 <MX_RTC_Init+0xc0>)
 8000ecc:	f002 ff46 	bl	8003d5c <HAL_RTC_SetDate>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8000ed6:	f7ff ff59 	bl	8000d8c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000eda:	2300      	movs	r3, #0
 8000edc:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	70bb      	strb	r3, [r7, #2]
  sAlarm.Alarm = RTC_ALARM_A;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	607b      	str	r3, [r7, #4]
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000eea:	463b      	mov	r3, r7
 8000eec:	2201      	movs	r2, #1
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4805      	ldr	r0, [pc, #20]	; (8000f08 <MX_RTC_Init+0xc0>)
 8000ef2:	f002 ffe9 	bl	8003ec8 <HAL_RTC_SetAlarm_IT>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8000efc:	f7ff ff46 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000f00:	bf00      	nop
 8000f02:	3710      	adds	r7, #16
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	200000f8 	.word	0x200000f8
 8000f0c:	40002800 	.word	0x40002800

08000f10 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a13      	ldr	r2, [pc, #76]	; (8000f6c <HAL_RTC_MspInit+0x5c>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d120      	bne.n	8000f64 <HAL_RTC_MspInit+0x54>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000f22:	f001 ff75 	bl	8002e10 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000f26:	4b12      	ldr	r3, [pc, #72]	; (8000f70 <HAL_RTC_MspInit+0x60>)
 8000f28:	69db      	ldr	r3, [r3, #28]
 8000f2a:	4a11      	ldr	r2, [pc, #68]	; (8000f70 <HAL_RTC_MspInit+0x60>)
 8000f2c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000f30:	61d3      	str	r3, [r2, #28]
 8000f32:	4b0f      	ldr	r3, [pc, #60]	; (8000f70 <HAL_RTC_MspInit+0x60>)
 8000f34:	69db      	ldr	r3, [r3, #28]
 8000f36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000f3e:	4b0d      	ldr	r3, [pc, #52]	; (8000f74 <HAL_RTC_MspInit+0x64>)
 8000f40:	2201      	movs	r2, #1
 8000f42:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8000f44:	2200      	movs	r2, #0
 8000f46:	2100      	movs	r1, #0
 8000f48:	2003      	movs	r0, #3
 8000f4a:	f001 fb02 	bl	8002552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8000f4e:	2003      	movs	r0, #3
 8000f50:	f001 fb1b 	bl	800258a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000f54:	2200      	movs	r2, #0
 8000f56:	2100      	movs	r1, #0
 8000f58:	2029      	movs	r0, #41	; 0x29
 8000f5a:	f001 fafa 	bl	8002552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000f5e:	2029      	movs	r0, #41	; 0x29
 8000f60:	f001 fb13 	bl	800258a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000f64:	bf00      	nop
 8000f66:	3710      	adds	r7, #16
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	40002800 	.word	0x40002800
 8000f70:	40021000 	.word	0x40021000
 8000f74:	4242043c 	.word	0x4242043c

08000f78 <sim7672_pwrkey>:
simRxCplt_t simRxCplt = SIM_NOT_RX_CPLT;
char simRxResponse[100] = {0};
int simRxIndex = 0;

void sim7672_pwrkey(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
    do
    {
        HAL_GPIO_WritePin(SIM_PWRKEY_GPIO_Port, SIM_PWRKEY_Pin, GPIO_PIN_SET);
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f82:	4809      	ldr	r0, [pc, #36]	; (8000fa8 <sim7672_pwrkey+0x30>)
 8000f84:	f001 fdcf 	bl	8002b26 <HAL_GPIO_WritePin>
        HAL_Delay(100);
 8000f88:	2064      	movs	r0, #100	; 0x64
 8000f8a:	f000 fde1 	bl	8001b50 <HAL_Delay>
    } while (HAL_GPIO_ReadPin(SIM_PWRKEY_GPIO_Port, SIM_PWRKEY_Pin) == GPIO_PIN_RESET);
 8000f8e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f92:	4805      	ldr	r0, [pc, #20]	; (8000fa8 <sim7672_pwrkey+0x30>)
 8000f94:	f001 fdb0 	bl	8002af8 <HAL_GPIO_ReadPin>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d0ee      	beq.n	8000f7c <sim7672_pwrkey+0x4>
    log_data("PWERKEY OKE\n");
 8000f9e:	4803      	ldr	r0, [pc, #12]	; (8000fac <sim7672_pwrkey+0x34>)
 8000fa0:	f7ff fc98 	bl	80008d4 <log_data>
}
 8000fa4:	bf00      	nop
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	40010800 	.word	0x40010800
 8000fac:	080057fc 	.word	0x080057fc

08000fb0 <sim7672_timerCallback>:
        simRxIndex = 0;
    }
}
// wait timeout, once receiving complete wait 0.2s to check remain response
void sim7672_timerCallback(void)
{
 8000fb0:	b598      	push	{r3, r4, r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Stop_IT(&htim3);
 8000fb4:	481c      	ldr	r0, [pc, #112]	; (8001028 <sim7672_timerCallback+0x78>)
 8000fb6:	f003 fe23 	bl	8004c00 <HAL_TIM_Base_Stop_IT>
    htim3.Instance->CNT = 0;
 8000fba:	4b1b      	ldr	r3, [pc, #108]	; (8001028 <sim7672_timerCallback+0x78>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	625a      	str	r2, [r3, #36]	; 0x24
    if ((strstr(simRxBuf, "\r\n") != NULL) | (strstr(simRxBuf, ">") != NULL))
 8000fc2:	491a      	ldr	r1, [pc, #104]	; (800102c <sim7672_timerCallback+0x7c>)
 8000fc4:	481a      	ldr	r0, [pc, #104]	; (8001030 <sim7672_timerCallback+0x80>)
 8000fc6:	f004 fbe2 	bl	800578e <strstr>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	bf14      	ite	ne
 8000fd0:	2301      	movne	r3, #1
 8000fd2:	2300      	moveq	r3, #0
 8000fd4:	b2dc      	uxtb	r4, r3
 8000fd6:	213e      	movs	r1, #62	; 0x3e
 8000fd8:	4815      	ldr	r0, [pc, #84]	; (8001030 <sim7672_timerCallback+0x80>)
 8000fda:	f004 fbcb 	bl	8005774 <strchr>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	bf14      	ite	ne
 8000fe4:	2301      	movne	r3, #1
 8000fe6:	2300      	moveq	r3, #0
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	4323      	orrs	r3, r4
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d014      	beq.n	800101c <sim7672_timerCallback+0x6c>
    {
        memcpy(simRxResponse, simRxBuf, strlen(simRxBuf));
 8000ff2:	480f      	ldr	r0, [pc, #60]	; (8001030 <sim7672_timerCallback+0x80>)
 8000ff4:	f7ff f916 	bl	8000224 <strlen>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	490c      	ldr	r1, [pc, #48]	; (8001030 <sim7672_timerCallback+0x80>)
 8000ffe:	480d      	ldr	r0, [pc, #52]	; (8001034 <sim7672_timerCallback+0x84>)
 8001000:	f004 fba2 	bl	8005748 <memcpy>
        memset(simRxBuf, '\0', strlen(simRxBuf));
 8001004:	480a      	ldr	r0, [pc, #40]	; (8001030 <sim7672_timerCallback+0x80>)
 8001006:	f7ff f90d 	bl	8000224 <strlen>
 800100a:	4603      	mov	r3, r0
 800100c:	461a      	mov	r2, r3
 800100e:	2100      	movs	r1, #0
 8001010:	4807      	ldr	r0, [pc, #28]	; (8001030 <sim7672_timerCallback+0x80>)
 8001012:	f004 fba7 	bl	8005764 <memset>
        simRxIndex = 0;
 8001016:	4b08      	ldr	r3, [pc, #32]	; (8001038 <sim7672_timerCallback+0x88>)
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
    }
    simRxCplt = SIM_RX_CPLT;
 800101c:	4b07      	ldr	r3, [pc, #28]	; (800103c <sim7672_timerCallback+0x8c>)
 800101e:	2201      	movs	r2, #1
 8001020:	701a      	strb	r2, [r3, #0]
}
 8001022:	bf00      	nop
 8001024:	bd98      	pop	{r3, r4, r7, pc}
 8001026:	bf00      	nop
 8001028:	20000374 	.word	0x20000374
 800102c:	08005824 	.word	0x08005824
 8001030:	2000010c 	.word	0x2000010c
 8001034:	20000174 	.word	0x20000174
 8001038:	200001d8 	.word	0x200001d8
 800103c:	20000170 	.word	0x20000170

08001040 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001044:	4b17      	ldr	r3, [pc, #92]	; (80010a4 <MX_SPI1_Init+0x64>)
 8001046:	4a18      	ldr	r2, [pc, #96]	; (80010a8 <MX_SPI1_Init+0x68>)
 8001048:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800104a:	4b16      	ldr	r3, [pc, #88]	; (80010a4 <MX_SPI1_Init+0x64>)
 800104c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001050:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001052:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <MX_SPI1_Init+0x64>)
 8001054:	2200      	movs	r2, #0
 8001056:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001058:	4b12      	ldr	r3, [pc, #72]	; (80010a4 <MX_SPI1_Init+0x64>)
 800105a:	2200      	movs	r2, #0
 800105c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800105e:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <MX_SPI1_Init+0x64>)
 8001060:	2200      	movs	r2, #0
 8001062:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001064:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <MX_SPI1_Init+0x64>)
 8001066:	2200      	movs	r2, #0
 8001068:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800106a:	4b0e      	ldr	r3, [pc, #56]	; (80010a4 <MX_SPI1_Init+0x64>)
 800106c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001070:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001072:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <MX_SPI1_Init+0x64>)
 8001074:	2208      	movs	r2, #8
 8001076:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001078:	4b0a      	ldr	r3, [pc, #40]	; (80010a4 <MX_SPI1_Init+0x64>)
 800107a:	2200      	movs	r2, #0
 800107c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800107e:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <MX_SPI1_Init+0x64>)
 8001080:	2200      	movs	r2, #0
 8001082:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001084:	4b07      	ldr	r3, [pc, #28]	; (80010a4 <MX_SPI1_Init+0x64>)
 8001086:	2200      	movs	r2, #0
 8001088:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800108a:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <MX_SPI1_Init+0x64>)
 800108c:	220a      	movs	r2, #10
 800108e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001090:	4804      	ldr	r0, [pc, #16]	; (80010a4 <MX_SPI1_Init+0x64>)
 8001092:	f003 fb01 	bl	8004698 <HAL_SPI_Init>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800109c:	f7ff fe76 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010a0:	bf00      	nop
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	200001dc 	.word	0x200001dc
 80010a8:	40013000 	.word	0x40013000

080010ac <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80010b0:	4b17      	ldr	r3, [pc, #92]	; (8001110 <MX_SPI2_Init+0x64>)
 80010b2:	4a18      	ldr	r2, [pc, #96]	; (8001114 <MX_SPI2_Init+0x68>)
 80010b4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80010b6:	4b16      	ldr	r3, [pc, #88]	; (8001110 <MX_SPI2_Init+0x64>)
 80010b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010bc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80010be:	4b14      	ldr	r3, [pc, #80]	; (8001110 <MX_SPI2_Init+0x64>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80010c4:	4b12      	ldr	r3, [pc, #72]	; (8001110 <MX_SPI2_Init+0x64>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010ca:	4b11      	ldr	r3, [pc, #68]	; (8001110 <MX_SPI2_Init+0x64>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010d0:	4b0f      	ldr	r3, [pc, #60]	; (8001110 <MX_SPI2_Init+0x64>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80010d6:	4b0e      	ldr	r3, [pc, #56]	; (8001110 <MX_SPI2_Init+0x64>)
 80010d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010dc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010de:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <MX_SPI2_Init+0x64>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010e4:	4b0a      	ldr	r3, [pc, #40]	; (8001110 <MX_SPI2_Init+0x64>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80010ea:	4b09      	ldr	r3, [pc, #36]	; (8001110 <MX_SPI2_Init+0x64>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010f0:	4b07      	ldr	r3, [pc, #28]	; (8001110 <MX_SPI2_Init+0x64>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80010f6:	4b06      	ldr	r3, [pc, #24]	; (8001110 <MX_SPI2_Init+0x64>)
 80010f8:	220a      	movs	r2, #10
 80010fa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80010fc:	4804      	ldr	r0, [pc, #16]	; (8001110 <MX_SPI2_Init+0x64>)
 80010fe:	f003 facb 	bl	8004698 <HAL_SPI_Init>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001108:	f7ff fe40 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800110c:	bf00      	nop
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20000234 	.word	0x20000234
 8001114:	40003800 	.word	0x40003800

08001118 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 800111c:	4b17      	ldr	r3, [pc, #92]	; (800117c <MX_SPI3_Init+0x64>)
 800111e:	4a18      	ldr	r2, [pc, #96]	; (8001180 <MX_SPI3_Init+0x68>)
 8001120:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001122:	4b16      	ldr	r3, [pc, #88]	; (800117c <MX_SPI3_Init+0x64>)
 8001124:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001128:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800112a:	4b14      	ldr	r3, [pc, #80]	; (800117c <MX_SPI3_Init+0x64>)
 800112c:	2200      	movs	r2, #0
 800112e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001130:	4b12      	ldr	r3, [pc, #72]	; (800117c <MX_SPI3_Init+0x64>)
 8001132:	2200      	movs	r2, #0
 8001134:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001136:	4b11      	ldr	r3, [pc, #68]	; (800117c <MX_SPI3_Init+0x64>)
 8001138:	2200      	movs	r2, #0
 800113a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800113c:	4b0f      	ldr	r3, [pc, #60]	; (800117c <MX_SPI3_Init+0x64>)
 800113e:	2200      	movs	r2, #0
 8001140:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001142:	4b0e      	ldr	r3, [pc, #56]	; (800117c <MX_SPI3_Init+0x64>)
 8001144:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001148:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800114a:	4b0c      	ldr	r3, [pc, #48]	; (800117c <MX_SPI3_Init+0x64>)
 800114c:	2200      	movs	r2, #0
 800114e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001150:	4b0a      	ldr	r3, [pc, #40]	; (800117c <MX_SPI3_Init+0x64>)
 8001152:	2200      	movs	r2, #0
 8001154:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001156:	4b09      	ldr	r3, [pc, #36]	; (800117c <MX_SPI3_Init+0x64>)
 8001158:	2200      	movs	r2, #0
 800115a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800115c:	4b07      	ldr	r3, [pc, #28]	; (800117c <MX_SPI3_Init+0x64>)
 800115e:	2200      	movs	r2, #0
 8001160:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001162:	4b06      	ldr	r3, [pc, #24]	; (800117c <MX_SPI3_Init+0x64>)
 8001164:	220a      	movs	r2, #10
 8001166:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001168:	4804      	ldr	r0, [pc, #16]	; (800117c <MX_SPI3_Init+0x64>)
 800116a:	f003 fa95 	bl	8004698 <HAL_SPI_Init>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001174:	f7ff fe0a 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001178:	bf00      	nop
 800117a:	bd80      	pop	{r7, pc}
 800117c:	2000028c 	.word	0x2000028c
 8001180:	40003c00 	.word	0x40003c00

08001184 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b08c      	sub	sp, #48	; 0x30
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118c:	f107 0320 	add.w	r3, r7, #32
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a56      	ldr	r2, [pc, #344]	; (80012f8 <HAL_SPI_MspInit+0x174>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d138      	bne.n	8001216 <HAL_SPI_MspInit+0x92>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011a4:	4b55      	ldr	r3, [pc, #340]	; (80012fc <HAL_SPI_MspInit+0x178>)
 80011a6:	699b      	ldr	r3, [r3, #24]
 80011a8:	4a54      	ldr	r2, [pc, #336]	; (80012fc <HAL_SPI_MspInit+0x178>)
 80011aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011ae:	6193      	str	r3, [r2, #24]
 80011b0:	4b52      	ldr	r3, [pc, #328]	; (80012fc <HAL_SPI_MspInit+0x178>)
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011b8:	61fb      	str	r3, [r7, #28]
 80011ba:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011bc:	4b4f      	ldr	r3, [pc, #316]	; (80012fc <HAL_SPI_MspInit+0x178>)
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	4a4e      	ldr	r2, [pc, #312]	; (80012fc <HAL_SPI_MspInit+0x178>)
 80011c2:	f043 0304 	orr.w	r3, r3, #4
 80011c6:	6193      	str	r3, [r2, #24]
 80011c8:	4b4c      	ldr	r3, [pc, #304]	; (80012fc <HAL_SPI_MspInit+0x178>)
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	f003 0304 	and.w	r3, r3, #4
 80011d0:	61bb      	str	r3, [r7, #24]
 80011d2:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = RFID_CLK_Pin|RFID_MOSI_Pin;
 80011d4:	23a0      	movs	r3, #160	; 0xa0
 80011d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d8:	2302      	movs	r3, #2
 80011da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011dc:	2303      	movs	r3, #3
 80011de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e0:	f107 0320 	add.w	r3, r7, #32
 80011e4:	4619      	mov	r1, r3
 80011e6:	4846      	ldr	r0, [pc, #280]	; (8001300 <HAL_SPI_MspInit+0x17c>)
 80011e8:	f001 faf2 	bl	80027d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RFID_MISO_Pin;
 80011ec:	2340      	movs	r3, #64	; 0x40
 80011ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011f0:	2300      	movs	r3, #0
 80011f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(RFID_MISO_GPIO_Port, &GPIO_InitStruct);
 80011f8:	f107 0320 	add.w	r3, r7, #32
 80011fc:	4619      	mov	r1, r3
 80011fe:	4840      	ldr	r0, [pc, #256]	; (8001300 <HAL_SPI_MspInit+0x17c>)
 8001200:	f001 fae6 	bl	80027d0 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001204:	2200      	movs	r2, #0
 8001206:	2100      	movs	r1, #0
 8001208:	2023      	movs	r0, #35	; 0x23
 800120a:	f001 f9a2 	bl	8002552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800120e:	2023      	movs	r0, #35	; 0x23
 8001210:	f001 f9bb 	bl	800258a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001214:	e06c      	b.n	80012f0 <HAL_SPI_MspInit+0x16c>
  else if(spiHandle->Instance==SPI2)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a3a      	ldr	r2, [pc, #232]	; (8001304 <HAL_SPI_MspInit+0x180>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d132      	bne.n	8001286 <HAL_SPI_MspInit+0x102>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001220:	4b36      	ldr	r3, [pc, #216]	; (80012fc <HAL_SPI_MspInit+0x178>)
 8001222:	69db      	ldr	r3, [r3, #28]
 8001224:	4a35      	ldr	r2, [pc, #212]	; (80012fc <HAL_SPI_MspInit+0x178>)
 8001226:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800122a:	61d3      	str	r3, [r2, #28]
 800122c:	4b33      	ldr	r3, [pc, #204]	; (80012fc <HAL_SPI_MspInit+0x178>)
 800122e:	69db      	ldr	r3, [r3, #28]
 8001230:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001234:	617b      	str	r3, [r7, #20]
 8001236:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001238:	4b30      	ldr	r3, [pc, #192]	; (80012fc <HAL_SPI_MspInit+0x178>)
 800123a:	699b      	ldr	r3, [r3, #24]
 800123c:	4a2f      	ldr	r2, [pc, #188]	; (80012fc <HAL_SPI_MspInit+0x178>)
 800123e:	f043 0308 	orr.w	r3, r3, #8
 8001242:	6193      	str	r3, [r2, #24]
 8001244:	4b2d      	ldr	r3, [pc, #180]	; (80012fc <HAL_SPI_MspInit+0x178>)
 8001246:	699b      	ldr	r3, [r3, #24]
 8001248:	f003 0308 	and.w	r3, r3, #8
 800124c:	613b      	str	r3, [r7, #16]
 800124e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = FLASH_CLK_Pin|FLASH_MOSI_Pin;
 8001250:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001254:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001256:	2302      	movs	r3, #2
 8001258:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800125a:	2303      	movs	r3, #3
 800125c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800125e:	f107 0320 	add.w	r3, r7, #32
 8001262:	4619      	mov	r1, r3
 8001264:	4828      	ldr	r0, [pc, #160]	; (8001308 <HAL_SPI_MspInit+0x184>)
 8001266:	f001 fab3 	bl	80027d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = FLASH_MISO_Pin;
 800126a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800126e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001270:	2300      	movs	r3, #0
 8001272:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(FLASH_MISO_GPIO_Port, &GPIO_InitStruct);
 8001278:	f107 0320 	add.w	r3, r7, #32
 800127c:	4619      	mov	r1, r3
 800127e:	4822      	ldr	r0, [pc, #136]	; (8001308 <HAL_SPI_MspInit+0x184>)
 8001280:	f001 faa6 	bl	80027d0 <HAL_GPIO_Init>
}
 8001284:	e034      	b.n	80012f0 <HAL_SPI_MspInit+0x16c>
  else if(spiHandle->Instance==SPI3)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a20      	ldr	r2, [pc, #128]	; (800130c <HAL_SPI_MspInit+0x188>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d12f      	bne.n	80012f0 <HAL_SPI_MspInit+0x16c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001290:	4b1a      	ldr	r3, [pc, #104]	; (80012fc <HAL_SPI_MspInit+0x178>)
 8001292:	69db      	ldr	r3, [r3, #28]
 8001294:	4a19      	ldr	r2, [pc, #100]	; (80012fc <HAL_SPI_MspInit+0x178>)
 8001296:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800129a:	61d3      	str	r3, [r2, #28]
 800129c:	4b17      	ldr	r3, [pc, #92]	; (80012fc <HAL_SPI_MspInit+0x178>)
 800129e:	69db      	ldr	r3, [r3, #28]
 80012a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a8:	4b14      	ldr	r3, [pc, #80]	; (80012fc <HAL_SPI_MspInit+0x178>)
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	4a13      	ldr	r2, [pc, #76]	; (80012fc <HAL_SPI_MspInit+0x178>)
 80012ae:	f043 0308 	orr.w	r3, r3, #8
 80012b2:	6193      	str	r3, [r2, #24]
 80012b4:	4b11      	ldr	r3, [pc, #68]	; (80012fc <HAL_SPI_MspInit+0x178>)
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	f003 0308 	and.w	r3, r3, #8
 80012bc:	60bb      	str	r3, [r7, #8]
 80012be:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SDCARD_CLK_Pin|SDCARD_MOSI_Pin;
 80012c0:	2328      	movs	r3, #40	; 0x28
 80012c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c4:	2302      	movs	r3, #2
 80012c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012c8:	2303      	movs	r3, #3
 80012ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012cc:	f107 0320 	add.w	r3, r7, #32
 80012d0:	4619      	mov	r1, r3
 80012d2:	480d      	ldr	r0, [pc, #52]	; (8001308 <HAL_SPI_MspInit+0x184>)
 80012d4:	f001 fa7c 	bl	80027d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SDCARD_MISO_Pin;
 80012d8:	2310      	movs	r3, #16
 80012da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012dc:	2300      	movs	r3, #0
 80012de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(SDCARD_MISO_GPIO_Port, &GPIO_InitStruct);
 80012e4:	f107 0320 	add.w	r3, r7, #32
 80012e8:	4619      	mov	r1, r3
 80012ea:	4807      	ldr	r0, [pc, #28]	; (8001308 <HAL_SPI_MspInit+0x184>)
 80012ec:	f001 fa70 	bl	80027d0 <HAL_GPIO_Init>
}
 80012f0:	bf00      	nop
 80012f2:	3730      	adds	r7, #48	; 0x30
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40013000 	.word	0x40013000
 80012fc:	40021000 	.word	0x40021000
 8001300:	40010800 	.word	0x40010800
 8001304:	40003800 	.word	0x40003800
 8001308:	40010c00 	.word	0x40010c00
 800130c:	40003c00 	.word	0x40003c00

08001310 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001310:	b480      	push	{r7}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001316:	4b15      	ldr	r3, [pc, #84]	; (800136c <HAL_MspInit+0x5c>)
 8001318:	699b      	ldr	r3, [r3, #24]
 800131a:	4a14      	ldr	r2, [pc, #80]	; (800136c <HAL_MspInit+0x5c>)
 800131c:	f043 0301 	orr.w	r3, r3, #1
 8001320:	6193      	str	r3, [r2, #24]
 8001322:	4b12      	ldr	r3, [pc, #72]	; (800136c <HAL_MspInit+0x5c>)
 8001324:	699b      	ldr	r3, [r3, #24]
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	60bb      	str	r3, [r7, #8]
 800132c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800132e:	4b0f      	ldr	r3, [pc, #60]	; (800136c <HAL_MspInit+0x5c>)
 8001330:	69db      	ldr	r3, [r3, #28]
 8001332:	4a0e      	ldr	r2, [pc, #56]	; (800136c <HAL_MspInit+0x5c>)
 8001334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001338:	61d3      	str	r3, [r2, #28]
 800133a:	4b0c      	ldr	r3, [pc, #48]	; (800136c <HAL_MspInit+0x5c>)
 800133c:	69db      	ldr	r3, [r3, #28]
 800133e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001342:	607b      	str	r3, [r7, #4]
 8001344:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001346:	4b0a      	ldr	r3, [pc, #40]	; (8001370 <HAL_MspInit+0x60>)
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	4a04      	ldr	r2, [pc, #16]	; (8001370 <HAL_MspInit+0x60>)
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001362:	bf00      	nop
 8001364:	3714      	adds	r7, #20
 8001366:	46bd      	mov	sp, r7
 8001368:	bc80      	pop	{r7}
 800136a:	4770      	bx	lr
 800136c:	40021000 	.word	0x40021000
 8001370:	40010000 	.word	0x40010000

08001374 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001378:	e7fe      	b.n	8001378 <NMI_Handler+0x4>

0800137a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800137a:	b480      	push	{r7}
 800137c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800137e:	e7fe      	b.n	800137e <HardFault_Handler+0x4>

08001380 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001384:	e7fe      	b.n	8001384 <MemManage_Handler+0x4>

08001386 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001386:	b480      	push	{r7}
 8001388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800138a:	e7fe      	b.n	800138a <BusFault_Handler+0x4>

0800138c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001390:	e7fe      	b.n	8001390 <UsageFault_Handler+0x4>

08001392 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001392:	b480      	push	{r7}
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	46bd      	mov	sp, r7
 800139a:	bc80      	pop	{r7}
 800139c:	4770      	bx	lr

0800139e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800139e:	b480      	push	{r7}
 80013a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013a2:	bf00      	nop
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bc80      	pop	{r7}
 80013a8:	4770      	bx	lr

080013aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013aa:	b480      	push	{r7}
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013ae:	bf00      	nop
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bc80      	pop	{r7}
 80013b4:	4770      	bx	lr

080013b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013ba:	f000 fbad 	bl	8001b18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
	...

080013c4 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 80013c8:	4802      	ldr	r0, [pc, #8]	; (80013d4 <RTC_IRQHandler+0x10>)
 80013ca:	f003 f901 	bl	80045d0 <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	200000f8 	.word	0x200000f8

080013d8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NPN_DATA_IN_Pin);
 80013dc:	2001      	movs	r0, #1
 80013de:	f001 fbbb 	bl	8002b58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
	...

080013e8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80013ec:	4803      	ldr	r0, [pc, #12]	; (80013fc <ADC1_2_IRQHandler+0x14>)
 80013ee:	f000 fd6b 	bl	8001ec8 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80013f2:	4803      	ldr	r0, [pc, #12]	; (8001400 <ADC1_2_IRQHandler+0x18>)
 80013f4:	f000 fd68 	bl	8001ec8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80013f8:	bf00      	nop
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	2000002c 	.word	0x2000002c
 8001400:	2000005c 	.word	0x2000005c

08001404 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001408:	4802      	ldr	r0, [pc, #8]	; (8001414 <TIM2_IRQHandler+0x10>)
 800140a:	f003 fc27 	bl	8004c5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	2000032c 	.word	0x2000032c

08001418 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800141c:	4802      	ldr	r0, [pc, #8]	; (8001428 <TIM3_IRQHandler+0x10>)
 800141e:	f003 fc1d 	bl	8004c5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000374 	.word	0x20000374

0800142c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001430:	4802      	ldr	r0, [pc, #8]	; (800143c <SPI1_IRQHandler+0x10>)
 8001432:	f003 f9b5 	bl	80047a0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	200001dc 	.word	0x200001dc

08001440 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001444:	4802      	ldr	r0, [pc, #8]	; (8001450 <RTC_Alarm_IRQHandler+0x10>)
 8001446:	f002 fdf7 	bl	8004038 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	200000f8 	.word	0x200000f8

08001454 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	bc80      	pop	{r7}
 800145e:	4770      	bx	lr

08001460 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001466:	f107 0308 	add.w	r3, r7, #8
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	605a      	str	r2, [r3, #4]
 8001470:	609a      	str	r2, [r3, #8]
 8001472:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001474:	463b      	mov	r3, r7
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800147c:	4b1e      	ldr	r3, [pc, #120]	; (80014f8 <MX_TIM1_Init+0x98>)
 800147e:	4a1f      	ldr	r2, [pc, #124]	; (80014fc <MX_TIM1_Init+0x9c>)
 8001480:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8001482:	4b1d      	ldr	r3, [pc, #116]	; (80014f8 <MX_TIM1_Init+0x98>)
 8001484:	2247      	movs	r2, #71	; 0x47
 8001486:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001488:	4b1b      	ldr	r3, [pc, #108]	; (80014f8 <MX_TIM1_Init+0x98>)
 800148a:	2200      	movs	r2, #0
 800148c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800148e:	4b1a      	ldr	r3, [pc, #104]	; (80014f8 <MX_TIM1_Init+0x98>)
 8001490:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001494:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001496:	4b18      	ldr	r3, [pc, #96]	; (80014f8 <MX_TIM1_Init+0x98>)
 8001498:	2200      	movs	r2, #0
 800149a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800149c:	4b16      	ldr	r3, [pc, #88]	; (80014f8 <MX_TIM1_Init+0x98>)
 800149e:	2200      	movs	r2, #0
 80014a0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014a2:	4b15      	ldr	r3, [pc, #84]	; (80014f8 <MX_TIM1_Init+0x98>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014a8:	4813      	ldr	r0, [pc, #76]	; (80014f8 <MX_TIM1_Init+0x98>)
 80014aa:	f003 fa7c 	bl	80049a6 <HAL_TIM_Base_Init>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80014b4:	f7ff fc6a 	bl	8000d8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014be:	f107 0308 	add.w	r3, r7, #8
 80014c2:	4619      	mov	r1, r3
 80014c4:	480c      	ldr	r0, [pc, #48]	; (80014f8 <MX_TIM1_Init+0x98>)
 80014c6:	f003 fcd1 	bl	8004e6c <HAL_TIM_ConfigClockSource>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80014d0:	f7ff fc5c 	bl	8000d8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014d4:	2300      	movs	r3, #0
 80014d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d8:	2300      	movs	r3, #0
 80014da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014dc:	463b      	mov	r3, r7
 80014de:	4619      	mov	r1, r3
 80014e0:	4805      	ldr	r0, [pc, #20]	; (80014f8 <MX_TIM1_Init+0x98>)
 80014e2:	f003 febf 	bl	8005264 <HAL_TIMEx_MasterConfigSynchronization>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80014ec:	f7ff fc4e 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80014f0:	bf00      	nop
 80014f2:	3718      	adds	r7, #24
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	200002e4 	.word	0x200002e4
 80014fc:	40012c00 	.word	0x40012c00

08001500 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001506:	f107 0308 	add.w	r3, r7, #8
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]
 8001510:	609a      	str	r2, [r3, #8]
 8001512:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001514:	463b      	mov	r3, r7
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800151c:	4b1e      	ldr	r3, [pc, #120]	; (8001598 <MX_TIM2_Init+0x98>)
 800151e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001522:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200-1;
 8001524:	4b1c      	ldr	r3, [pc, #112]	; (8001598 <MX_TIM2_Init+0x98>)
 8001526:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800152a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800152c:	4b1a      	ldr	r3, [pc, #104]	; (8001598 <MX_TIM2_Init+0x98>)
 800152e:	2200      	movs	r2, #0
 8001530:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60000;
 8001532:	4b19      	ldr	r3, [pc, #100]	; (8001598 <MX_TIM2_Init+0x98>)
 8001534:	f64e 2260 	movw	r2, #60000	; 0xea60
 8001538:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800153a:	4b17      	ldr	r3, [pc, #92]	; (8001598 <MX_TIM2_Init+0x98>)
 800153c:	2200      	movs	r2, #0
 800153e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001540:	4b15      	ldr	r3, [pc, #84]	; (8001598 <MX_TIM2_Init+0x98>)
 8001542:	2200      	movs	r2, #0
 8001544:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001546:	4814      	ldr	r0, [pc, #80]	; (8001598 <MX_TIM2_Init+0x98>)
 8001548:	f003 fa2d 	bl	80049a6 <HAL_TIM_Base_Init>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001552:	f7ff fc1b 	bl	8000d8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001556:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800155a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800155c:	f107 0308 	add.w	r3, r7, #8
 8001560:	4619      	mov	r1, r3
 8001562:	480d      	ldr	r0, [pc, #52]	; (8001598 <MX_TIM2_Init+0x98>)
 8001564:	f003 fc82 	bl	8004e6c <HAL_TIM_ConfigClockSource>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800156e:	f7ff fc0d 	bl	8000d8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001572:	2300      	movs	r3, #0
 8001574:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001576:	2300      	movs	r3, #0
 8001578:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800157a:	463b      	mov	r3, r7
 800157c:	4619      	mov	r1, r3
 800157e:	4806      	ldr	r0, [pc, #24]	; (8001598 <MX_TIM2_Init+0x98>)
 8001580:	f003 fe70 	bl	8005264 <HAL_TIMEx_MasterConfigSynchronization>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800158a:	f7ff fbff 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800158e:	bf00      	nop
 8001590:	3718      	adds	r7, #24
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	2000032c 	.word	0x2000032c

0800159c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015a2:	f107 0308 	add.w	r3, r7, #8
 80015a6:	2200      	movs	r2, #0
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	605a      	str	r2, [r3, #4]
 80015ac:	609a      	str	r2, [r3, #8]
 80015ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015b0:	463b      	mov	r3, r7
 80015b2:	2200      	movs	r2, #0
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015b8:	4b1d      	ldr	r3, [pc, #116]	; (8001630 <MX_TIM3_Init+0x94>)
 80015ba:	4a1e      	ldr	r2, [pc, #120]	; (8001634 <MX_TIM3_Init+0x98>)
 80015bc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200-1;
 80015be:	4b1c      	ldr	r3, [pc, #112]	; (8001630 <MX_TIM3_Init+0x94>)
 80015c0:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80015c4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c6:	4b1a      	ldr	r3, [pc, #104]	; (8001630 <MX_TIM3_Init+0x94>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1999;
 80015cc:	4b18      	ldr	r3, [pc, #96]	; (8001630 <MX_TIM3_Init+0x94>)
 80015ce:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80015d2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015d4:	4b16      	ldr	r3, [pc, #88]	; (8001630 <MX_TIM3_Init+0x94>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015da:	4b15      	ldr	r3, [pc, #84]	; (8001630 <MX_TIM3_Init+0x94>)
 80015dc:	2200      	movs	r2, #0
 80015de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80015e0:	4813      	ldr	r0, [pc, #76]	; (8001630 <MX_TIM3_Init+0x94>)
 80015e2:	f003 f9e0 	bl	80049a6 <HAL_TIM_Base_Init>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80015ec:	f7ff fbce 	bl	8000d8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80015f6:	f107 0308 	add.w	r3, r7, #8
 80015fa:	4619      	mov	r1, r3
 80015fc:	480c      	ldr	r0, [pc, #48]	; (8001630 <MX_TIM3_Init+0x94>)
 80015fe:	f003 fc35 	bl	8004e6c <HAL_TIM_ConfigClockSource>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001608:	f7ff fbc0 	bl	8000d8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800160c:	2300      	movs	r3, #0
 800160e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001610:	2300      	movs	r3, #0
 8001612:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001614:	463b      	mov	r3, r7
 8001616:	4619      	mov	r1, r3
 8001618:	4805      	ldr	r0, [pc, #20]	; (8001630 <MX_TIM3_Init+0x94>)
 800161a:	f003 fe23 	bl	8005264 <HAL_TIMEx_MasterConfigSynchronization>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001624:	f7ff fbb2 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001628:	bf00      	nop
 800162a:	3718      	adds	r7, #24
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	20000374 	.word	0x20000374
 8001634:	40000400 	.word	0x40000400

08001638 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a23      	ldr	r2, [pc, #140]	; (80016d4 <HAL_TIM_Base_MspInit+0x9c>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d10c      	bne.n	8001664 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800164a:	4b23      	ldr	r3, [pc, #140]	; (80016d8 <HAL_TIM_Base_MspInit+0xa0>)
 800164c:	699b      	ldr	r3, [r3, #24]
 800164e:	4a22      	ldr	r2, [pc, #136]	; (80016d8 <HAL_TIM_Base_MspInit+0xa0>)
 8001650:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001654:	6193      	str	r3, [r2, #24]
 8001656:	4b20      	ldr	r3, [pc, #128]	; (80016d8 <HAL_TIM_Base_MspInit+0xa0>)
 8001658:	699b      	ldr	r3, [r3, #24]
 800165a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800165e:	617b      	str	r3, [r7, #20]
 8001660:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001662:	e032      	b.n	80016ca <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM2)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800166c:	d114      	bne.n	8001698 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800166e:	4b1a      	ldr	r3, [pc, #104]	; (80016d8 <HAL_TIM_Base_MspInit+0xa0>)
 8001670:	69db      	ldr	r3, [r3, #28]
 8001672:	4a19      	ldr	r2, [pc, #100]	; (80016d8 <HAL_TIM_Base_MspInit+0xa0>)
 8001674:	f043 0301 	orr.w	r3, r3, #1
 8001678:	61d3      	str	r3, [r2, #28]
 800167a:	4b17      	ldr	r3, [pc, #92]	; (80016d8 <HAL_TIM_Base_MspInit+0xa0>)
 800167c:	69db      	ldr	r3, [r3, #28]
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	613b      	str	r3, [r7, #16]
 8001684:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001686:	2200      	movs	r2, #0
 8001688:	2100      	movs	r1, #0
 800168a:	201c      	movs	r0, #28
 800168c:	f000 ff61 	bl	8002552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001690:	201c      	movs	r0, #28
 8001692:	f000 ff7a 	bl	800258a <HAL_NVIC_EnableIRQ>
}
 8001696:	e018      	b.n	80016ca <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM3)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a0f      	ldr	r2, [pc, #60]	; (80016dc <HAL_TIM_Base_MspInit+0xa4>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d113      	bne.n	80016ca <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016a2:	4b0d      	ldr	r3, [pc, #52]	; (80016d8 <HAL_TIM_Base_MspInit+0xa0>)
 80016a4:	69db      	ldr	r3, [r3, #28]
 80016a6:	4a0c      	ldr	r2, [pc, #48]	; (80016d8 <HAL_TIM_Base_MspInit+0xa0>)
 80016a8:	f043 0302 	orr.w	r3, r3, #2
 80016ac:	61d3      	str	r3, [r2, #28]
 80016ae:	4b0a      	ldr	r3, [pc, #40]	; (80016d8 <HAL_TIM_Base_MspInit+0xa0>)
 80016b0:	69db      	ldr	r3, [r3, #28]
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80016ba:	2200      	movs	r2, #0
 80016bc:	2100      	movs	r1, #0
 80016be:	201d      	movs	r0, #29
 80016c0:	f000 ff47 	bl	8002552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80016c4:	201d      	movs	r0, #29
 80016c6:	f000 ff60 	bl	800258a <HAL_NVIC_EnableIRQ>
}
 80016ca:	bf00      	nop
 80016cc:	3718      	adds	r7, #24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40012c00 	.word	0x40012c00
 80016d8:	40021000 	.word	0x40021000
 80016dc:	40000400 	.word	0x40000400

080016e0 <MX_UART4_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80016e4:	4b11      	ldr	r3, [pc, #68]	; (800172c <MX_UART4_Init+0x4c>)
 80016e6:	4a12      	ldr	r2, [pc, #72]	; (8001730 <MX_UART4_Init+0x50>)
 80016e8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80016ea:	4b10      	ldr	r3, [pc, #64]	; (800172c <MX_UART4_Init+0x4c>)
 80016ec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80016f0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80016f2:	4b0e      	ldr	r3, [pc, #56]	; (800172c <MX_UART4_Init+0x4c>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80016f8:	4b0c      	ldr	r3, [pc, #48]	; (800172c <MX_UART4_Init+0x4c>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80016fe:	4b0b      	ldr	r3, [pc, #44]	; (800172c <MX_UART4_Init+0x4c>)
 8001700:	2200      	movs	r2, #0
 8001702:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001704:	4b09      	ldr	r3, [pc, #36]	; (800172c <MX_UART4_Init+0x4c>)
 8001706:	220c      	movs	r2, #12
 8001708:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800170a:	4b08      	ldr	r3, [pc, #32]	; (800172c <MX_UART4_Init+0x4c>)
 800170c:	2200      	movs	r2, #0
 800170e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001710:	4b06      	ldr	r3, [pc, #24]	; (800172c <MX_UART4_Init+0x4c>)
 8001712:	2200      	movs	r2, #0
 8001714:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001716:	4805      	ldr	r0, [pc, #20]	; (800172c <MX_UART4_Init+0x4c>)
 8001718:	f003 fe22 	bl	8005360 <HAL_UART_Init>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001722:	f7ff fb33 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	200003bc 	.word	0x200003bc
 8001730:	40004c00 	.word	0x40004c00

08001734 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001738:	4b11      	ldr	r3, [pc, #68]	; (8001780 <MX_UART5_Init+0x4c>)
 800173a:	4a12      	ldr	r2, [pc, #72]	; (8001784 <MX_UART5_Init+0x50>)
 800173c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800173e:	4b10      	ldr	r3, [pc, #64]	; (8001780 <MX_UART5_Init+0x4c>)
 8001740:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001744:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001746:	4b0e      	ldr	r3, [pc, #56]	; (8001780 <MX_UART5_Init+0x4c>)
 8001748:	2200      	movs	r2, #0
 800174a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800174c:	4b0c      	ldr	r3, [pc, #48]	; (8001780 <MX_UART5_Init+0x4c>)
 800174e:	2200      	movs	r2, #0
 8001750:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001752:	4b0b      	ldr	r3, [pc, #44]	; (8001780 <MX_UART5_Init+0x4c>)
 8001754:	2200      	movs	r2, #0
 8001756:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001758:	4b09      	ldr	r3, [pc, #36]	; (8001780 <MX_UART5_Init+0x4c>)
 800175a:	220c      	movs	r2, #12
 800175c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800175e:	4b08      	ldr	r3, [pc, #32]	; (8001780 <MX_UART5_Init+0x4c>)
 8001760:	2200      	movs	r2, #0
 8001762:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001764:	4b06      	ldr	r3, [pc, #24]	; (8001780 <MX_UART5_Init+0x4c>)
 8001766:	2200      	movs	r2, #0
 8001768:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800176a:	4805      	ldr	r0, [pc, #20]	; (8001780 <MX_UART5_Init+0x4c>)
 800176c:	f003 fdf8 	bl	8005360 <HAL_UART_Init>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001776:	f7ff fb09 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	20000404 	.word	0x20000404
 8001784:	40005000 	.word	0x40005000

08001788 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800178c:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <MX_USART1_UART_Init+0x4c>)
 800178e:	4a12      	ldr	r2, [pc, #72]	; (80017d8 <MX_USART1_UART_Init+0x50>)
 8001790:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001792:	4b10      	ldr	r3, [pc, #64]	; (80017d4 <MX_USART1_UART_Init+0x4c>)
 8001794:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001798:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800179a:	4b0e      	ldr	r3, [pc, #56]	; (80017d4 <MX_USART1_UART_Init+0x4c>)
 800179c:	2200      	movs	r2, #0
 800179e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017a0:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <MX_USART1_UART_Init+0x4c>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017a6:	4b0b      	ldr	r3, [pc, #44]	; (80017d4 <MX_USART1_UART_Init+0x4c>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017ac:	4b09      	ldr	r3, [pc, #36]	; (80017d4 <MX_USART1_UART_Init+0x4c>)
 80017ae:	220c      	movs	r2, #12
 80017b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017b2:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <MX_USART1_UART_Init+0x4c>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017b8:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <MX_USART1_UART_Init+0x4c>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017be:	4805      	ldr	r0, [pc, #20]	; (80017d4 <MX_USART1_UART_Init+0x4c>)
 80017c0:	f003 fdce 	bl	8005360 <HAL_UART_Init>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80017ca:	f7ff fadf 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	2000044c 	.word	0x2000044c
 80017d8:	40013800 	.word	0x40013800

080017dc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017e0:	4b11      	ldr	r3, [pc, #68]	; (8001828 <MX_USART2_UART_Init+0x4c>)
 80017e2:	4a12      	ldr	r2, [pc, #72]	; (800182c <MX_USART2_UART_Init+0x50>)
 80017e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80017e6:	4b10      	ldr	r3, [pc, #64]	; (8001828 <MX_USART2_UART_Init+0x4c>)
 80017e8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80017ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017ee:	4b0e      	ldr	r3, [pc, #56]	; (8001828 <MX_USART2_UART_Init+0x4c>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017f4:	4b0c      	ldr	r3, [pc, #48]	; (8001828 <MX_USART2_UART_Init+0x4c>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017fa:	4b0b      	ldr	r3, [pc, #44]	; (8001828 <MX_USART2_UART_Init+0x4c>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001800:	4b09      	ldr	r3, [pc, #36]	; (8001828 <MX_USART2_UART_Init+0x4c>)
 8001802:	220c      	movs	r2, #12
 8001804:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001806:	4b08      	ldr	r3, [pc, #32]	; (8001828 <MX_USART2_UART_Init+0x4c>)
 8001808:	2200      	movs	r2, #0
 800180a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800180c:	4b06      	ldr	r3, [pc, #24]	; (8001828 <MX_USART2_UART_Init+0x4c>)
 800180e:	2200      	movs	r2, #0
 8001810:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001812:	4805      	ldr	r0, [pc, #20]	; (8001828 <MX_USART2_UART_Init+0x4c>)
 8001814:	f003 fda4 	bl	8005360 <HAL_UART_Init>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800181e:	f7ff fab5 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20000494 	.word	0x20000494
 800182c:	40004400 	.word	0x40004400

08001830 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b090      	sub	sp, #64	; 0x40
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001838:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==UART4)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a75      	ldr	r2, [pc, #468]	; (8001a20 <HAL_UART_MspInit+0x1f0>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d132      	bne.n	80018b6 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001850:	4b74      	ldr	r3, [pc, #464]	; (8001a24 <HAL_UART_MspInit+0x1f4>)
 8001852:	69db      	ldr	r3, [r3, #28]
 8001854:	4a73      	ldr	r2, [pc, #460]	; (8001a24 <HAL_UART_MspInit+0x1f4>)
 8001856:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800185a:	61d3      	str	r3, [r2, #28]
 800185c:	4b71      	ldr	r3, [pc, #452]	; (8001a24 <HAL_UART_MspInit+0x1f4>)
 800185e:	69db      	ldr	r3, [r3, #28]
 8001860:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001864:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001866:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001868:	4b6e      	ldr	r3, [pc, #440]	; (8001a24 <HAL_UART_MspInit+0x1f4>)
 800186a:	699b      	ldr	r3, [r3, #24]
 800186c:	4a6d      	ldr	r2, [pc, #436]	; (8001a24 <HAL_UART_MspInit+0x1f4>)
 800186e:	f043 0310 	orr.w	r3, r3, #16
 8001872:	6193      	str	r3, [r2, #24]
 8001874:	4b6b      	ldr	r3, [pc, #428]	; (8001a24 <HAL_UART_MspInit+0x1f4>)
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	f003 0310 	and.w	r3, r3, #16
 800187c:	62bb      	str	r3, [r7, #40]	; 0x28
 800187e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GNSS_TX_Pin;
 8001880:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001884:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001886:	2302      	movs	r3, #2
 8001888:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800188a:	2303      	movs	r3, #3
 800188c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GNSS_TX_GPIO_Port, &GPIO_InitStruct);
 800188e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001892:	4619      	mov	r1, r3
 8001894:	4864      	ldr	r0, [pc, #400]	; (8001a28 <HAL_UART_MspInit+0x1f8>)
 8001896:	f000 ff9b 	bl	80027d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GNSS_RX_Pin;
 800189a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800189e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018a0:	2300      	movs	r3, #0
 80018a2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a4:	2300      	movs	r3, #0
 80018a6:	63bb      	str	r3, [r7, #56]	; 0x38
    HAL_GPIO_Init(GNSS_RX_GPIO_Port, &GPIO_InitStruct);
 80018a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018ac:	4619      	mov	r1, r3
 80018ae:	485e      	ldr	r0, [pc, #376]	; (8001a28 <HAL_UART_MspInit+0x1f8>)
 80018b0:	f000 ff8e 	bl	80027d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80018b4:	e0af      	b.n	8001a16 <HAL_UART_MspInit+0x1e6>
  else if(uartHandle->Instance==UART5)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a5c      	ldr	r2, [pc, #368]	; (8001a2c <HAL_UART_MspInit+0x1fc>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d13d      	bne.n	800193c <HAL_UART_MspInit+0x10c>
    __HAL_RCC_UART5_CLK_ENABLE();
 80018c0:	4b58      	ldr	r3, [pc, #352]	; (8001a24 <HAL_UART_MspInit+0x1f4>)
 80018c2:	69db      	ldr	r3, [r3, #28]
 80018c4:	4a57      	ldr	r2, [pc, #348]	; (8001a24 <HAL_UART_MspInit+0x1f4>)
 80018c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80018ca:	61d3      	str	r3, [r2, #28]
 80018cc:	4b55      	ldr	r3, [pc, #340]	; (8001a24 <HAL_UART_MspInit+0x1f4>)
 80018ce:	69db      	ldr	r3, [r3, #28]
 80018d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018d4:	627b      	str	r3, [r7, #36]	; 0x24
 80018d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018d8:	4b52      	ldr	r3, [pc, #328]	; (8001a24 <HAL_UART_MspInit+0x1f4>)
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	4a51      	ldr	r2, [pc, #324]	; (8001a24 <HAL_UART_MspInit+0x1f4>)
 80018de:	f043 0310 	orr.w	r3, r3, #16
 80018e2:	6193      	str	r3, [r2, #24]
 80018e4:	4b4f      	ldr	r3, [pc, #316]	; (8001a24 <HAL_UART_MspInit+0x1f4>)
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	f003 0310 	and.w	r3, r3, #16
 80018ec:	623b      	str	r3, [r7, #32]
 80018ee:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018f0:	4b4c      	ldr	r3, [pc, #304]	; (8001a24 <HAL_UART_MspInit+0x1f4>)
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	4a4b      	ldr	r2, [pc, #300]	; (8001a24 <HAL_UART_MspInit+0x1f4>)
 80018f6:	f043 0320 	orr.w	r3, r3, #32
 80018fa:	6193      	str	r3, [r2, #24]
 80018fc:	4b49      	ldr	r3, [pc, #292]	; (8001a24 <HAL_UART_MspInit+0x1f4>)
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	f003 0320 	and.w	r3, r3, #32
 8001904:	61fb      	str	r3, [r7, #28]
 8001906:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = DEBUG_TX_Pin;
 8001908:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800190c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190e:	2302      	movs	r3, #2
 8001910:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001912:	2303      	movs	r3, #3
 8001914:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(DEBUG_TX_GPIO_Port, &GPIO_InitStruct);
 8001916:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800191a:	4619      	mov	r1, r3
 800191c:	4842      	ldr	r0, [pc, #264]	; (8001a28 <HAL_UART_MspInit+0x1f8>)
 800191e:	f000 ff57 	bl	80027d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DEBUG_RX_Pin;
 8001922:	2304      	movs	r3, #4
 8001924:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001926:	2300      	movs	r3, #0
 8001928:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192a:	2300      	movs	r3, #0
 800192c:	63bb      	str	r3, [r7, #56]	; 0x38
    HAL_GPIO_Init(DEBUG_RX_GPIO_Port, &GPIO_InitStruct);
 800192e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001932:	4619      	mov	r1, r3
 8001934:	483e      	ldr	r0, [pc, #248]	; (8001a30 <HAL_UART_MspInit+0x200>)
 8001936:	f000 ff4b 	bl	80027d0 <HAL_GPIO_Init>
}
 800193a:	e06c      	b.n	8001a16 <HAL_UART_MspInit+0x1e6>
  else if(uartHandle->Instance==USART1)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a3c      	ldr	r2, [pc, #240]	; (8001a34 <HAL_UART_MspInit+0x204>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d132      	bne.n	80019ac <HAL_UART_MspInit+0x17c>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001946:	4b37      	ldr	r3, [pc, #220]	; (8001a24 <HAL_UART_MspInit+0x1f4>)
 8001948:	699b      	ldr	r3, [r3, #24]
 800194a:	4a36      	ldr	r2, [pc, #216]	; (8001a24 <HAL_UART_MspInit+0x1f4>)
 800194c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001950:	6193      	str	r3, [r2, #24]
 8001952:	4b34      	ldr	r3, [pc, #208]	; (8001a24 <HAL_UART_MspInit+0x1f4>)
 8001954:	699b      	ldr	r3, [r3, #24]
 8001956:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800195a:	61bb      	str	r3, [r7, #24]
 800195c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800195e:	4b31      	ldr	r3, [pc, #196]	; (8001a24 <HAL_UART_MspInit+0x1f4>)
 8001960:	699b      	ldr	r3, [r3, #24]
 8001962:	4a30      	ldr	r2, [pc, #192]	; (8001a24 <HAL_UART_MspInit+0x1f4>)
 8001964:	f043 0304 	orr.w	r3, r3, #4
 8001968:	6193      	str	r3, [r2, #24]
 800196a:	4b2e      	ldr	r3, [pc, #184]	; (8001a24 <HAL_UART_MspInit+0x1f4>)
 800196c:	699b      	ldr	r3, [r3, #24]
 800196e:	f003 0304 	and.w	r3, r3, #4
 8001972:	617b      	str	r3, [r7, #20]
 8001974:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = SIM_TX_Pin;
 8001976:	f44f 7300 	mov.w	r3, #512	; 0x200
 800197a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197c:	2302      	movs	r3, #2
 800197e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001980:	2303      	movs	r3, #3
 8001982:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(SIM_TX_GPIO_Port, &GPIO_InitStruct);
 8001984:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001988:	4619      	mov	r1, r3
 800198a:	482b      	ldr	r0, [pc, #172]	; (8001a38 <HAL_UART_MspInit+0x208>)
 800198c:	f000 ff20 	bl	80027d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SIM_RX_Pin;
 8001990:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001994:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001996:	2300      	movs	r3, #0
 8001998:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199a:	2300      	movs	r3, #0
 800199c:	63bb      	str	r3, [r7, #56]	; 0x38
    HAL_GPIO_Init(SIM_RX_GPIO_Port, &GPIO_InitStruct);
 800199e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019a2:	4619      	mov	r1, r3
 80019a4:	4824      	ldr	r0, [pc, #144]	; (8001a38 <HAL_UART_MspInit+0x208>)
 80019a6:	f000 ff13 	bl	80027d0 <HAL_GPIO_Init>
}
 80019aa:	e034      	b.n	8001a16 <HAL_UART_MspInit+0x1e6>
  else if(uartHandle->Instance==USART2)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a22      	ldr	r2, [pc, #136]	; (8001a3c <HAL_UART_MspInit+0x20c>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d12f      	bne.n	8001a16 <HAL_UART_MspInit+0x1e6>
    __HAL_RCC_USART2_CLK_ENABLE();
 80019b6:	4b1b      	ldr	r3, [pc, #108]	; (8001a24 <HAL_UART_MspInit+0x1f4>)
 80019b8:	69db      	ldr	r3, [r3, #28]
 80019ba:	4a1a      	ldr	r2, [pc, #104]	; (8001a24 <HAL_UART_MspInit+0x1f4>)
 80019bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019c0:	61d3      	str	r3, [r2, #28]
 80019c2:	4b18      	ldr	r3, [pc, #96]	; (8001a24 <HAL_UART_MspInit+0x1f4>)
 80019c4:	69db      	ldr	r3, [r3, #28]
 80019c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ca:	613b      	str	r3, [r7, #16]
 80019cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ce:	4b15      	ldr	r3, [pc, #84]	; (8001a24 <HAL_UART_MspInit+0x1f4>)
 80019d0:	699b      	ldr	r3, [r3, #24]
 80019d2:	4a14      	ldr	r2, [pc, #80]	; (8001a24 <HAL_UART_MspInit+0x1f4>)
 80019d4:	f043 0304 	orr.w	r3, r3, #4
 80019d8:	6193      	str	r3, [r2, #24]
 80019da:	4b12      	ldr	r3, [pc, #72]	; (8001a24 <HAL_UART_MspInit+0x1f4>)
 80019dc:	699b      	ldr	r3, [r3, #24]
 80019de:	f003 0304 	and.w	r3, r3, #4
 80019e2:	60fb      	str	r3, [r7, #12]
 80019e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RS232_TX_Pin;
 80019e6:	2304      	movs	r3, #4
 80019e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ea:	2302      	movs	r3, #2
 80019ec:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019ee:	2303      	movs	r3, #3
 80019f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(RS232_TX_GPIO_Port, &GPIO_InitStruct);
 80019f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019f6:	4619      	mov	r1, r3
 80019f8:	480f      	ldr	r0, [pc, #60]	; (8001a38 <HAL_UART_MspInit+0x208>)
 80019fa:	f000 fee9 	bl	80027d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RS232_RX_Pin;
 80019fe:	2308      	movs	r3, #8
 8001a00:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a02:	2300      	movs	r3, #0
 8001a04:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a06:	2300      	movs	r3, #0
 8001a08:	63bb      	str	r3, [r7, #56]	; 0x38
    HAL_GPIO_Init(RS232_RX_GPIO_Port, &GPIO_InitStruct);
 8001a0a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4809      	ldr	r0, [pc, #36]	; (8001a38 <HAL_UART_MspInit+0x208>)
 8001a12:	f000 fedd 	bl	80027d0 <HAL_GPIO_Init>
}
 8001a16:	bf00      	nop
 8001a18:	3740      	adds	r7, #64	; 0x40
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	40004c00 	.word	0x40004c00
 8001a24:	40021000 	.word	0x40021000
 8001a28:	40011000 	.word	0x40011000
 8001a2c:	40005000 	.word	0x40005000
 8001a30:	40011400 	.word	0x40011400
 8001a34:	40013800 	.word	0x40013800
 8001a38:	40010800 	.word	0x40010800
 8001a3c:	40004400 	.word	0x40004400

08001a40 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a40:	f7ff fd08 	bl	8001454 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a44:	480b      	ldr	r0, [pc, #44]	; (8001a74 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a46:	490c      	ldr	r1, [pc, #48]	; (8001a78 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a48:	4a0c      	ldr	r2, [pc, #48]	; (8001a7c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a4c:	e002      	b.n	8001a54 <LoopCopyDataInit>

08001a4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a52:	3304      	adds	r3, #4

08001a54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a58:	d3f9      	bcc.n	8001a4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a5a:	4a09      	ldr	r2, [pc, #36]	; (8001a80 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a5c:	4c09      	ldr	r4, [pc, #36]	; (8001a84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a60:	e001      	b.n	8001a66 <LoopFillZerobss>

08001a62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a64:	3204      	adds	r2, #4

08001a66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a68:	d3fb      	bcc.n	8001a62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a6a:	f003 fe49 	bl	8005700 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a6e:	f7ff f8e3 	bl	8000c38 <main>
  bx lr
 8001a72:	4770      	bx	lr
  ldr r0, =_sdata
 8001a74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a78:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001a7c:	0800587c 	.word	0x0800587c
  ldr r2, =_sbss
 8001a80:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001a84:	200004e0 	.word	0x200004e0

08001a88 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a88:	e7fe      	b.n	8001a88 <ADC3_IRQHandler>
	...

08001a8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a90:	4b08      	ldr	r3, [pc, #32]	; (8001ab4 <HAL_Init+0x28>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a07      	ldr	r2, [pc, #28]	; (8001ab4 <HAL_Init+0x28>)
 8001a96:	f043 0310 	orr.w	r3, r3, #16
 8001a9a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a9c:	2003      	movs	r0, #3
 8001a9e:	f000 fd4d 	bl	800253c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001aa2:	200f      	movs	r0, #15
 8001aa4:	f000 f808 	bl	8001ab8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001aa8:	f7ff fc32 	bl	8001310 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40022000 	.word	0x40022000

08001ab8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ac0:	4b12      	ldr	r3, [pc, #72]	; (8001b0c <HAL_InitTick+0x54>)
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	4b12      	ldr	r3, [pc, #72]	; (8001b10 <HAL_InitTick+0x58>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	4619      	mov	r1, r3
 8001aca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ace:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f000 fd65 	bl	80025a6 <HAL_SYSTICK_Config>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e00e      	b.n	8001b04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2b0f      	cmp	r3, #15
 8001aea:	d80a      	bhi.n	8001b02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001aec:	2200      	movs	r2, #0
 8001aee:	6879      	ldr	r1, [r7, #4]
 8001af0:	f04f 30ff 	mov.w	r0, #4294967295
 8001af4:	f000 fd2d 	bl	8002552 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001af8:	4a06      	ldr	r2, [pc, #24]	; (8001b14 <HAL_InitTick+0x5c>)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001afe:	2300      	movs	r3, #0
 8001b00:	e000      	b.n	8001b04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3708      	adds	r7, #8
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	20000004 	.word	0x20000004
 8001b10:	2000000c 	.word	0x2000000c
 8001b14:	20000008 	.word	0x20000008

08001b18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b1c:	4b05      	ldr	r3, [pc, #20]	; (8001b34 <HAL_IncTick+0x1c>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	461a      	mov	r2, r3
 8001b22:	4b05      	ldr	r3, [pc, #20]	; (8001b38 <HAL_IncTick+0x20>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4413      	add	r3, r2
 8001b28:	4a03      	ldr	r2, [pc, #12]	; (8001b38 <HAL_IncTick+0x20>)
 8001b2a:	6013      	str	r3, [r2, #0]
}
 8001b2c:	bf00      	nop
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bc80      	pop	{r7}
 8001b32:	4770      	bx	lr
 8001b34:	2000000c 	.word	0x2000000c
 8001b38:	200004dc 	.word	0x200004dc

08001b3c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b40:	4b02      	ldr	r3, [pc, #8]	; (8001b4c <HAL_GetTick+0x10>)
 8001b42:	681b      	ldr	r3, [r3, #0]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bc80      	pop	{r7}
 8001b4a:	4770      	bx	lr
 8001b4c:	200004dc 	.word	0x200004dc

08001b50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b58:	f7ff fff0 	bl	8001b3c <HAL_GetTick>
 8001b5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b68:	d005      	beq.n	8001b76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b6a:	4b0a      	ldr	r3, [pc, #40]	; (8001b94 <HAL_Delay+0x44>)
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	461a      	mov	r2, r3
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	4413      	add	r3, r2
 8001b74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b76:	bf00      	nop
 8001b78:	f7ff ffe0 	bl	8001b3c <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	68fa      	ldr	r2, [r7, #12]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d8f7      	bhi.n	8001b78 <HAL_Delay+0x28>
  {
  }
}
 8001b88:	bf00      	nop
 8001b8a:	bf00      	nop
 8001b8c:	3710      	adds	r7, #16
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	2000000c 	.word	0x2000000c

08001b98 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001bac:	2300      	movs	r3, #0
 8001bae:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d101      	bne.n	8001bba <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e0ce      	b.n	8001d58 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d109      	bne.n	8001bdc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f7fe fe06 	bl	80007e8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f000 fb97 	bl	8002310 <ADC_ConversionStop_Disable>
 8001be2:	4603      	mov	r3, r0
 8001be4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bea:	f003 0310 	and.w	r3, r3, #16
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	f040 80a9 	bne.w	8001d46 <HAL_ADC_Init+0x1ae>
 8001bf4:	7dfb      	ldrb	r3, [r7, #23]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	f040 80a5 	bne.w	8001d46 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c00:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c04:	f023 0302 	bic.w	r3, r3, #2
 8001c08:	f043 0202 	orr.w	r2, r3, #2
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4951      	ldr	r1, [pc, #324]	; (8001d60 <HAL_ADC_Init+0x1c8>)
 8001c1a:	428b      	cmp	r3, r1
 8001c1c:	d10a      	bne.n	8001c34 <HAL_ADC_Init+0x9c>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	69db      	ldr	r3, [r3, #28]
 8001c22:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001c26:	d002      	beq.n	8001c2e <HAL_ADC_Init+0x96>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	69db      	ldr	r3, [r3, #28]
 8001c2c:	e004      	b.n	8001c38 <HAL_ADC_Init+0xa0>
 8001c2e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001c32:	e001      	b.n	8001c38 <HAL_ADC_Init+0xa0>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001c38:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	7b1b      	ldrb	r3, [r3, #12]
 8001c3e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001c40:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001c42:	68ba      	ldr	r2, [r7, #8]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c50:	d003      	beq.n	8001c5a <HAL_ADC_Init+0xc2>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d102      	bne.n	8001c60 <HAL_ADC_Init+0xc8>
 8001c5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c5e:	e000      	b.n	8001c62 <HAL_ADC_Init+0xca>
 8001c60:	2300      	movs	r3, #0
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	7d1b      	ldrb	r3, [r3, #20]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d119      	bne.n	8001ca4 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	7b1b      	ldrb	r3, [r3, #12]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d109      	bne.n	8001c8c <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	3b01      	subs	r3, #1
 8001c7e:	035a      	lsls	r2, r3, #13
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c88:	613b      	str	r3, [r7, #16]
 8001c8a:	e00b      	b.n	8001ca4 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c90:	f043 0220 	orr.w	r2, r3, #32
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c9c:	f043 0201 	orr.w	r2, r3, #1
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	689a      	ldr	r2, [r3, #8]
 8001cbe:	4b29      	ldr	r3, [pc, #164]	; (8001d64 <HAL_ADC_Init+0x1cc>)
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	6812      	ldr	r2, [r2, #0]
 8001cc6:	68b9      	ldr	r1, [r7, #8]
 8001cc8:	430b      	orrs	r3, r1
 8001cca:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cd4:	d003      	beq.n	8001cde <HAL_ADC_Init+0x146>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d104      	bne.n	8001ce8 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	051b      	lsls	r3, r3, #20
 8001ce6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cee:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	68fa      	ldr	r2, [r7, #12]
 8001cf8:	430a      	orrs	r2, r1
 8001cfa:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	689a      	ldr	r2, [r3, #8]
 8001d02:	4b19      	ldr	r3, [pc, #100]	; (8001d68 <HAL_ADC_Init+0x1d0>)
 8001d04:	4013      	ands	r3, r2
 8001d06:	68ba      	ldr	r2, [r7, #8]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d10b      	bne.n	8001d24 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d16:	f023 0303 	bic.w	r3, r3, #3
 8001d1a:	f043 0201 	orr.w	r2, r3, #1
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001d22:	e018      	b.n	8001d56 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d28:	f023 0312 	bic.w	r3, r3, #18
 8001d2c:	f043 0210 	orr.w	r2, r3, #16
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d38:	f043 0201 	orr.w	r2, r3, #1
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001d44:	e007      	b.n	8001d56 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d4a:	f043 0210 	orr.w	r2, r3, #16
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001d56:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3718      	adds	r7, #24
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40013c00 	.word	0x40013c00
 8001d64:	ffe1f7fd 	.word	0xffe1f7fd
 8001d68:	ff1f0efe 	.word	0xff1f0efe

08001d6c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d74:	2300      	movs	r3, #0
 8001d76:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d101      	bne.n	8001d86 <HAL_ADC_Start+0x1a>
 8001d82:	2302      	movs	r3, #2
 8001d84:	e098      	b.n	8001eb8 <HAL_ADC_Start+0x14c>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2201      	movs	r2, #1
 8001d8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f000 fa64 	bl	800225c <ADC_Enable>
 8001d94:	4603      	mov	r3, r0
 8001d96:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001d98:	7bfb      	ldrb	r3, [r7, #15]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	f040 8087 	bne.w	8001eae <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001da8:	f023 0301 	bic.w	r3, r3, #1
 8001dac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a41      	ldr	r2, [pc, #260]	; (8001ec0 <HAL_ADC_Start+0x154>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d105      	bne.n	8001dca <HAL_ADC_Start+0x5e>
 8001dbe:	4b41      	ldr	r3, [pc, #260]	; (8001ec4 <HAL_ADC_Start+0x158>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d115      	bne.n	8001df6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d026      	beq.n	8001e32 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001dec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001df4:	e01d      	b.n	8001e32 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dfa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a2f      	ldr	r2, [pc, #188]	; (8001ec4 <HAL_ADC_Start+0x158>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d004      	beq.n	8001e16 <HAL_ADC_Start+0xaa>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a2b      	ldr	r2, [pc, #172]	; (8001ec0 <HAL_ADC_Start+0x154>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d10d      	bne.n	8001e32 <HAL_ADC_Start+0xc6>
 8001e16:	4b2b      	ldr	r3, [pc, #172]	; (8001ec4 <HAL_ADC_Start+0x158>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d007      	beq.n	8001e32 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e26:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e2a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d006      	beq.n	8001e4c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e42:	f023 0206 	bic.w	r2, r3, #6
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e4a:	e002      	b.n	8001e52 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f06f 0202 	mvn.w	r2, #2
 8001e62:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001e6e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001e72:	d113      	bne.n	8001e9c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001e78:	4a11      	ldr	r2, [pc, #68]	; (8001ec0 <HAL_ADC_Start+0x154>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d105      	bne.n	8001e8a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001e7e:	4b11      	ldr	r3, [pc, #68]	; (8001ec4 <HAL_ADC_Start+0x158>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d108      	bne.n	8001e9c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	689a      	ldr	r2, [r3, #8]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001e98:	609a      	str	r2, [r3, #8]
 8001e9a:	e00c      	b.n	8001eb6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	689a      	ldr	r2, [r3, #8]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001eaa:	609a      	str	r2, [r3, #8]
 8001eac:	e003      	b.n	8001eb6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3710      	adds	r7, #16
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	40012800 	.word	0x40012800
 8001ec4:	40012400 	.word	0x40012400

08001ec8 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	f003 0320 	and.w	r3, r3, #32
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d03e      	beq.n	8001f68 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d039      	beq.n	8001f68 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef8:	f003 0310 	and.w	r3, r3, #16
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d105      	bne.n	8001f0c <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f04:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001f16:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001f1a:	d11d      	bne.n	8001f58 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d119      	bne.n	8001f58 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	685a      	ldr	r2, [r3, #4]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f022 0220 	bic.w	r2, r2, #32
 8001f32:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f38:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d105      	bne.n	8001f58 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f50:	f043 0201 	orr.w	r2, r3, #1
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f000 f874 	bl	8002046 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f06f 0212 	mvn.w	r2, #18
 8001f66:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d04d      	beq.n	800200e <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	f003 0304 	and.w	r3, r3, #4
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d048      	beq.n	800200e <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f80:	f003 0310 	and.w	r3, r3, #16
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d105      	bne.n	8001f94 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f8c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001f9e:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001fa2:	d012      	beq.n	8001fca <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d125      	bne.n	8001ffe <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001fbc:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001fc0:	d11d      	bne.n	8001ffe <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d119      	bne.n	8001ffe <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	685a      	ldr	r2, [r3, #4]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fd8:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fde:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d105      	bne.n	8001ffe <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff6:	f043 0201 	orr.w	r2, r3, #1
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f000 f9c7 	bl	8002392 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f06f 020c 	mvn.w	r2, #12
 800200c:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002014:	2b00      	cmp	r3, #0
 8002016:	d012      	beq.n	800203e <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	2b00      	cmp	r3, #0
 8002020:	d00d      	beq.n	800203e <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002026:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f000 f812 	bl	8002058 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f06f 0201 	mvn.w	r2, #1
 800203c:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800203e:	bf00      	nop
 8002040:	3710      	adds	r7, #16
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002046:	b480      	push	{r7}
 8002048:	b083      	sub	sp, #12
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800204e:	bf00      	nop
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	bc80      	pop	{r7}
 8002056:	4770      	bx	lr

08002058 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	bc80      	pop	{r7}
 8002068:	4770      	bx	lr
	...

0800206c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002076:	2300      	movs	r3, #0
 8002078:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800207a:	2300      	movs	r3, #0
 800207c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002084:	2b01      	cmp	r3, #1
 8002086:	d101      	bne.n	800208c <HAL_ADC_ConfigChannel+0x20>
 8002088:	2302      	movs	r3, #2
 800208a:	e0dc      	b.n	8002246 <HAL_ADC_ConfigChannel+0x1da>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2201      	movs	r2, #1
 8002090:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	2b06      	cmp	r3, #6
 800209a:	d81c      	bhi.n	80020d6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	685a      	ldr	r2, [r3, #4]
 80020a6:	4613      	mov	r3, r2
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	4413      	add	r3, r2
 80020ac:	3b05      	subs	r3, #5
 80020ae:	221f      	movs	r2, #31
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	43db      	mvns	r3, r3
 80020b6:	4019      	ands	r1, r3
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	6818      	ldr	r0, [r3, #0]
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685a      	ldr	r2, [r3, #4]
 80020c0:	4613      	mov	r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	4413      	add	r3, r2
 80020c6:	3b05      	subs	r3, #5
 80020c8:	fa00 f203 	lsl.w	r2, r0, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	430a      	orrs	r2, r1
 80020d2:	635a      	str	r2, [r3, #52]	; 0x34
 80020d4:	e03c      	b.n	8002150 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	2b0c      	cmp	r3, #12
 80020dc:	d81c      	bhi.n	8002118 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685a      	ldr	r2, [r3, #4]
 80020e8:	4613      	mov	r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	4413      	add	r3, r2
 80020ee:	3b23      	subs	r3, #35	; 0x23
 80020f0:	221f      	movs	r2, #31
 80020f2:	fa02 f303 	lsl.w	r3, r2, r3
 80020f6:	43db      	mvns	r3, r3
 80020f8:	4019      	ands	r1, r3
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	6818      	ldr	r0, [r3, #0]
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685a      	ldr	r2, [r3, #4]
 8002102:	4613      	mov	r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	4413      	add	r3, r2
 8002108:	3b23      	subs	r3, #35	; 0x23
 800210a:	fa00 f203 	lsl.w	r2, r0, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	430a      	orrs	r2, r1
 8002114:	631a      	str	r2, [r3, #48]	; 0x30
 8002116:	e01b      	b.n	8002150 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685a      	ldr	r2, [r3, #4]
 8002122:	4613      	mov	r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	4413      	add	r3, r2
 8002128:	3b41      	subs	r3, #65	; 0x41
 800212a:	221f      	movs	r2, #31
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	43db      	mvns	r3, r3
 8002132:	4019      	ands	r1, r3
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	6818      	ldr	r0, [r3, #0]
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685a      	ldr	r2, [r3, #4]
 800213c:	4613      	mov	r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	4413      	add	r3, r2
 8002142:	3b41      	subs	r3, #65	; 0x41
 8002144:	fa00 f203 	lsl.w	r2, r0, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	430a      	orrs	r2, r1
 800214e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2b09      	cmp	r3, #9
 8002156:	d91c      	bls.n	8002192 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	68d9      	ldr	r1, [r3, #12]
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	4613      	mov	r3, r2
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	4413      	add	r3, r2
 8002168:	3b1e      	subs	r3, #30
 800216a:	2207      	movs	r2, #7
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	43db      	mvns	r3, r3
 8002172:	4019      	ands	r1, r3
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	6898      	ldr	r0, [r3, #8]
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	4613      	mov	r3, r2
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	4413      	add	r3, r2
 8002182:	3b1e      	subs	r3, #30
 8002184:	fa00 f203 	lsl.w	r2, r0, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	430a      	orrs	r2, r1
 800218e:	60da      	str	r2, [r3, #12]
 8002190:	e019      	b.n	80021c6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	6919      	ldr	r1, [r3, #16]
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	4613      	mov	r3, r2
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	4413      	add	r3, r2
 80021a2:	2207      	movs	r2, #7
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	43db      	mvns	r3, r3
 80021aa:	4019      	ands	r1, r3
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	6898      	ldr	r0, [r3, #8]
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	4613      	mov	r3, r2
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	4413      	add	r3, r2
 80021ba:	fa00 f203 	lsl.w	r2, r0, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	430a      	orrs	r2, r1
 80021c4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2b10      	cmp	r3, #16
 80021cc:	d003      	beq.n	80021d6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80021d2:	2b11      	cmp	r3, #17
 80021d4:	d132      	bne.n	800223c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a1d      	ldr	r2, [pc, #116]	; (8002250 <HAL_ADC_ConfigChannel+0x1e4>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d125      	bne.n	800222c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d126      	bne.n	800223c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	689a      	ldr	r2, [r3, #8]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80021fc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2b10      	cmp	r3, #16
 8002204:	d11a      	bne.n	800223c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002206:	4b13      	ldr	r3, [pc, #76]	; (8002254 <HAL_ADC_ConfigChannel+0x1e8>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a13      	ldr	r2, [pc, #76]	; (8002258 <HAL_ADC_ConfigChannel+0x1ec>)
 800220c:	fba2 2303 	umull	r2, r3, r2, r3
 8002210:	0c9a      	lsrs	r2, r3, #18
 8002212:	4613      	mov	r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	4413      	add	r3, r2
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800221c:	e002      	b.n	8002224 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	3b01      	subs	r3, #1
 8002222:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1f9      	bne.n	800221e <HAL_ADC_ConfigChannel+0x1b2>
 800222a:	e007      	b.n	800223c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002230:	f043 0220 	orr.w	r2, r3, #32
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002244:	7bfb      	ldrb	r3, [r7, #15]
}
 8002246:	4618      	mov	r0, r3
 8002248:	3714      	adds	r7, #20
 800224a:	46bd      	mov	sp, r7
 800224c:	bc80      	pop	{r7}
 800224e:	4770      	bx	lr
 8002250:	40012400 	.word	0x40012400
 8002254:	20000004 	.word	0x20000004
 8002258:	431bde83 	.word	0x431bde83

0800225c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002264:	2300      	movs	r3, #0
 8002266:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002268:	2300      	movs	r3, #0
 800226a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	2b01      	cmp	r3, #1
 8002278:	d040      	beq.n	80022fc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	689a      	ldr	r2, [r3, #8]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f042 0201 	orr.w	r2, r2, #1
 8002288:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800228a:	4b1f      	ldr	r3, [pc, #124]	; (8002308 <ADC_Enable+0xac>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a1f      	ldr	r2, [pc, #124]	; (800230c <ADC_Enable+0xb0>)
 8002290:	fba2 2303 	umull	r2, r3, r2, r3
 8002294:	0c9b      	lsrs	r3, r3, #18
 8002296:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002298:	e002      	b.n	80022a0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	3b01      	subs	r3, #1
 800229e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1f9      	bne.n	800229a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80022a6:	f7ff fc49 	bl	8001b3c <HAL_GetTick>
 80022aa:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80022ac:	e01f      	b.n	80022ee <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80022ae:	f7ff fc45 	bl	8001b3c <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d918      	bls.n	80022ee <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d011      	beq.n	80022ee <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ce:	f043 0210 	orr.w	r2, r3, #16
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022da:	f043 0201 	orr.w	r2, r3, #1
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e007      	b.n	80022fe <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f003 0301 	and.w	r3, r3, #1
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d1d8      	bne.n	80022ae <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3710      	adds	r7, #16
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	20000004 	.word	0x20000004
 800230c:	431bde83 	.word	0x431bde83

08002310 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002318:	2300      	movs	r3, #0
 800231a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	2b01      	cmp	r3, #1
 8002328:	d12e      	bne.n	8002388 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	689a      	ldr	r2, [r3, #8]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f022 0201 	bic.w	r2, r2, #1
 8002338:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800233a:	f7ff fbff 	bl	8001b3c <HAL_GetTick>
 800233e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002340:	e01b      	b.n	800237a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002342:	f7ff fbfb 	bl	8001b3c <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	2b02      	cmp	r3, #2
 800234e:	d914      	bls.n	800237a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	2b01      	cmp	r3, #1
 800235c:	d10d      	bne.n	800237a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002362:	f043 0210 	orr.w	r2, r3, #16
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800236e:	f043 0201 	orr.w	r2, r3, #1
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e007      	b.n	800238a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f003 0301 	and.w	r3, r3, #1
 8002384:	2b01      	cmp	r3, #1
 8002386:	d0dc      	beq.n	8002342 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3710      	adds	r7, #16
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}

08002392 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002392:	b480      	push	{r7}
 8002394:	b083      	sub	sp, #12
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800239a:	bf00      	nop
 800239c:	370c      	adds	r7, #12
 800239e:	46bd      	mov	sp, r7
 80023a0:	bc80      	pop	{r7}
 80023a2:	4770      	bx	lr

080023a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b085      	sub	sp, #20
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f003 0307 	and.w	r3, r3, #7
 80023b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023b4:	4b0c      	ldr	r3, [pc, #48]	; (80023e8 <__NVIC_SetPriorityGrouping+0x44>)
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023ba:	68ba      	ldr	r2, [r7, #8]
 80023bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023c0:	4013      	ands	r3, r2
 80023c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023d6:	4a04      	ldr	r2, [pc, #16]	; (80023e8 <__NVIC_SetPriorityGrouping+0x44>)
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	60d3      	str	r3, [r2, #12]
}
 80023dc:	bf00      	nop
 80023de:	3714      	adds	r7, #20
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bc80      	pop	{r7}
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	e000ed00 	.word	0xe000ed00

080023ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023f0:	4b04      	ldr	r3, [pc, #16]	; (8002404 <__NVIC_GetPriorityGrouping+0x18>)
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	0a1b      	lsrs	r3, r3, #8
 80023f6:	f003 0307 	and.w	r3, r3, #7
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bc80      	pop	{r7}
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	e000ed00 	.word	0xe000ed00

08002408 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	4603      	mov	r3, r0
 8002410:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002416:	2b00      	cmp	r3, #0
 8002418:	db0b      	blt.n	8002432 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800241a:	79fb      	ldrb	r3, [r7, #7]
 800241c:	f003 021f 	and.w	r2, r3, #31
 8002420:	4906      	ldr	r1, [pc, #24]	; (800243c <__NVIC_EnableIRQ+0x34>)
 8002422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002426:	095b      	lsrs	r3, r3, #5
 8002428:	2001      	movs	r0, #1
 800242a:	fa00 f202 	lsl.w	r2, r0, r2
 800242e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002432:	bf00      	nop
 8002434:	370c      	adds	r7, #12
 8002436:	46bd      	mov	sp, r7
 8002438:	bc80      	pop	{r7}
 800243a:	4770      	bx	lr
 800243c:	e000e100 	.word	0xe000e100

08002440 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	4603      	mov	r3, r0
 8002448:	6039      	str	r1, [r7, #0]
 800244a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800244c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002450:	2b00      	cmp	r3, #0
 8002452:	db0a      	blt.n	800246a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	b2da      	uxtb	r2, r3
 8002458:	490c      	ldr	r1, [pc, #48]	; (800248c <__NVIC_SetPriority+0x4c>)
 800245a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245e:	0112      	lsls	r2, r2, #4
 8002460:	b2d2      	uxtb	r2, r2
 8002462:	440b      	add	r3, r1
 8002464:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002468:	e00a      	b.n	8002480 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	b2da      	uxtb	r2, r3
 800246e:	4908      	ldr	r1, [pc, #32]	; (8002490 <__NVIC_SetPriority+0x50>)
 8002470:	79fb      	ldrb	r3, [r7, #7]
 8002472:	f003 030f 	and.w	r3, r3, #15
 8002476:	3b04      	subs	r3, #4
 8002478:	0112      	lsls	r2, r2, #4
 800247a:	b2d2      	uxtb	r2, r2
 800247c:	440b      	add	r3, r1
 800247e:	761a      	strb	r2, [r3, #24]
}
 8002480:	bf00      	nop
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	bc80      	pop	{r7}
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	e000e100 	.word	0xe000e100
 8002490:	e000ed00 	.word	0xe000ed00

08002494 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002494:	b480      	push	{r7}
 8002496:	b089      	sub	sp, #36	; 0x24
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f003 0307 	and.w	r3, r3, #7
 80024a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	f1c3 0307 	rsb	r3, r3, #7
 80024ae:	2b04      	cmp	r3, #4
 80024b0:	bf28      	it	cs
 80024b2:	2304      	movcs	r3, #4
 80024b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	3304      	adds	r3, #4
 80024ba:	2b06      	cmp	r3, #6
 80024bc:	d902      	bls.n	80024c4 <NVIC_EncodePriority+0x30>
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	3b03      	subs	r3, #3
 80024c2:	e000      	b.n	80024c6 <NVIC_EncodePriority+0x32>
 80024c4:	2300      	movs	r3, #0
 80024c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024c8:	f04f 32ff 	mov.w	r2, #4294967295
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	fa02 f303 	lsl.w	r3, r2, r3
 80024d2:	43da      	mvns	r2, r3
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	401a      	ands	r2, r3
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024dc:	f04f 31ff 	mov.w	r1, #4294967295
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	fa01 f303 	lsl.w	r3, r1, r3
 80024e6:	43d9      	mvns	r1, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024ec:	4313      	orrs	r3, r2
         );
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3724      	adds	r7, #36	; 0x24
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bc80      	pop	{r7}
 80024f6:	4770      	bx	lr

080024f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	3b01      	subs	r3, #1
 8002504:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002508:	d301      	bcc.n	800250e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800250a:	2301      	movs	r3, #1
 800250c:	e00f      	b.n	800252e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800250e:	4a0a      	ldr	r2, [pc, #40]	; (8002538 <SysTick_Config+0x40>)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	3b01      	subs	r3, #1
 8002514:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002516:	210f      	movs	r1, #15
 8002518:	f04f 30ff 	mov.w	r0, #4294967295
 800251c:	f7ff ff90 	bl	8002440 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002520:	4b05      	ldr	r3, [pc, #20]	; (8002538 <SysTick_Config+0x40>)
 8002522:	2200      	movs	r2, #0
 8002524:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002526:	4b04      	ldr	r3, [pc, #16]	; (8002538 <SysTick_Config+0x40>)
 8002528:	2207      	movs	r2, #7
 800252a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	e000e010 	.word	0xe000e010

0800253c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f7ff ff2d 	bl	80023a4 <__NVIC_SetPriorityGrouping>
}
 800254a:	bf00      	nop
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002552:	b580      	push	{r7, lr}
 8002554:	b086      	sub	sp, #24
 8002556:	af00      	add	r7, sp, #0
 8002558:	4603      	mov	r3, r0
 800255a:	60b9      	str	r1, [r7, #8]
 800255c:	607a      	str	r2, [r7, #4]
 800255e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002560:	2300      	movs	r3, #0
 8002562:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002564:	f7ff ff42 	bl	80023ec <__NVIC_GetPriorityGrouping>
 8002568:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	68b9      	ldr	r1, [r7, #8]
 800256e:	6978      	ldr	r0, [r7, #20]
 8002570:	f7ff ff90 	bl	8002494 <NVIC_EncodePriority>
 8002574:	4602      	mov	r2, r0
 8002576:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800257a:	4611      	mov	r1, r2
 800257c:	4618      	mov	r0, r3
 800257e:	f7ff ff5f 	bl	8002440 <__NVIC_SetPriority>
}
 8002582:	bf00      	nop
 8002584:	3718      	adds	r7, #24
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800258a:	b580      	push	{r7, lr}
 800258c:	b082      	sub	sp, #8
 800258e:	af00      	add	r7, sp, #0
 8002590:	4603      	mov	r3, r0
 8002592:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002594:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002598:	4618      	mov	r0, r3
 800259a:	f7ff ff35 	bl	8002408 <__NVIC_EnableIRQ>
}
 800259e:	bf00      	nop
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b082      	sub	sp, #8
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f7ff ffa2 	bl	80024f8 <SysTick_Config>
 80025b4:	4603      	mov	r3, r0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
	...

080025c0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025c8:	2300      	movs	r3, #0
 80025ca:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d005      	beq.n	80025e4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2204      	movs	r2, #4
 80025dc:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	73fb      	strb	r3, [r7, #15]
 80025e2:	e0d6      	b.n	8002792 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f022 020e 	bic.w	r2, r2, #14
 80025f2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f022 0201 	bic.w	r2, r2, #1
 8002602:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	461a      	mov	r2, r3
 800260a:	4b64      	ldr	r3, [pc, #400]	; (800279c <HAL_DMA_Abort_IT+0x1dc>)
 800260c:	429a      	cmp	r2, r3
 800260e:	d958      	bls.n	80026c2 <HAL_DMA_Abort_IT+0x102>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a62      	ldr	r2, [pc, #392]	; (80027a0 <HAL_DMA_Abort_IT+0x1e0>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d04f      	beq.n	80026ba <HAL_DMA_Abort_IT+0xfa>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a61      	ldr	r2, [pc, #388]	; (80027a4 <HAL_DMA_Abort_IT+0x1e4>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d048      	beq.n	80026b6 <HAL_DMA_Abort_IT+0xf6>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a5f      	ldr	r2, [pc, #380]	; (80027a8 <HAL_DMA_Abort_IT+0x1e8>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d040      	beq.n	80026b0 <HAL_DMA_Abort_IT+0xf0>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a5e      	ldr	r2, [pc, #376]	; (80027ac <HAL_DMA_Abort_IT+0x1ec>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d038      	beq.n	80026aa <HAL_DMA_Abort_IT+0xea>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a5c      	ldr	r2, [pc, #368]	; (80027b0 <HAL_DMA_Abort_IT+0x1f0>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d030      	beq.n	80026a4 <HAL_DMA_Abort_IT+0xe4>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a5b      	ldr	r2, [pc, #364]	; (80027b4 <HAL_DMA_Abort_IT+0x1f4>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d028      	beq.n	800269e <HAL_DMA_Abort_IT+0xde>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a52      	ldr	r2, [pc, #328]	; (800279c <HAL_DMA_Abort_IT+0x1dc>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d020      	beq.n	8002698 <HAL_DMA_Abort_IT+0xd8>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a57      	ldr	r2, [pc, #348]	; (80027b8 <HAL_DMA_Abort_IT+0x1f8>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d019      	beq.n	8002694 <HAL_DMA_Abort_IT+0xd4>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a55      	ldr	r2, [pc, #340]	; (80027bc <HAL_DMA_Abort_IT+0x1fc>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d012      	beq.n	8002690 <HAL_DMA_Abort_IT+0xd0>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a54      	ldr	r2, [pc, #336]	; (80027c0 <HAL_DMA_Abort_IT+0x200>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d00a      	beq.n	800268a <HAL_DMA_Abort_IT+0xca>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a52      	ldr	r2, [pc, #328]	; (80027c4 <HAL_DMA_Abort_IT+0x204>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d102      	bne.n	8002684 <HAL_DMA_Abort_IT+0xc4>
 800267e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002682:	e01b      	b.n	80026bc <HAL_DMA_Abort_IT+0xfc>
 8002684:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002688:	e018      	b.n	80026bc <HAL_DMA_Abort_IT+0xfc>
 800268a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800268e:	e015      	b.n	80026bc <HAL_DMA_Abort_IT+0xfc>
 8002690:	2310      	movs	r3, #16
 8002692:	e013      	b.n	80026bc <HAL_DMA_Abort_IT+0xfc>
 8002694:	2301      	movs	r3, #1
 8002696:	e011      	b.n	80026bc <HAL_DMA_Abort_IT+0xfc>
 8002698:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800269c:	e00e      	b.n	80026bc <HAL_DMA_Abort_IT+0xfc>
 800269e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80026a2:	e00b      	b.n	80026bc <HAL_DMA_Abort_IT+0xfc>
 80026a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026a8:	e008      	b.n	80026bc <HAL_DMA_Abort_IT+0xfc>
 80026aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026ae:	e005      	b.n	80026bc <HAL_DMA_Abort_IT+0xfc>
 80026b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026b4:	e002      	b.n	80026bc <HAL_DMA_Abort_IT+0xfc>
 80026b6:	2310      	movs	r3, #16
 80026b8:	e000      	b.n	80026bc <HAL_DMA_Abort_IT+0xfc>
 80026ba:	2301      	movs	r3, #1
 80026bc:	4a42      	ldr	r2, [pc, #264]	; (80027c8 <HAL_DMA_Abort_IT+0x208>)
 80026be:	6053      	str	r3, [r2, #4]
 80026c0:	e057      	b.n	8002772 <HAL_DMA_Abort_IT+0x1b2>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a36      	ldr	r2, [pc, #216]	; (80027a0 <HAL_DMA_Abort_IT+0x1e0>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d04f      	beq.n	800276c <HAL_DMA_Abort_IT+0x1ac>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a34      	ldr	r2, [pc, #208]	; (80027a4 <HAL_DMA_Abort_IT+0x1e4>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d048      	beq.n	8002768 <HAL_DMA_Abort_IT+0x1a8>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a33      	ldr	r2, [pc, #204]	; (80027a8 <HAL_DMA_Abort_IT+0x1e8>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d040      	beq.n	8002762 <HAL_DMA_Abort_IT+0x1a2>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a31      	ldr	r2, [pc, #196]	; (80027ac <HAL_DMA_Abort_IT+0x1ec>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d038      	beq.n	800275c <HAL_DMA_Abort_IT+0x19c>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a30      	ldr	r2, [pc, #192]	; (80027b0 <HAL_DMA_Abort_IT+0x1f0>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d030      	beq.n	8002756 <HAL_DMA_Abort_IT+0x196>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a2e      	ldr	r2, [pc, #184]	; (80027b4 <HAL_DMA_Abort_IT+0x1f4>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d028      	beq.n	8002750 <HAL_DMA_Abort_IT+0x190>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a26      	ldr	r2, [pc, #152]	; (800279c <HAL_DMA_Abort_IT+0x1dc>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d020      	beq.n	800274a <HAL_DMA_Abort_IT+0x18a>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a2a      	ldr	r2, [pc, #168]	; (80027b8 <HAL_DMA_Abort_IT+0x1f8>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d019      	beq.n	8002746 <HAL_DMA_Abort_IT+0x186>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a29      	ldr	r2, [pc, #164]	; (80027bc <HAL_DMA_Abort_IT+0x1fc>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d012      	beq.n	8002742 <HAL_DMA_Abort_IT+0x182>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a27      	ldr	r2, [pc, #156]	; (80027c0 <HAL_DMA_Abort_IT+0x200>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d00a      	beq.n	800273c <HAL_DMA_Abort_IT+0x17c>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a26      	ldr	r2, [pc, #152]	; (80027c4 <HAL_DMA_Abort_IT+0x204>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d102      	bne.n	8002736 <HAL_DMA_Abort_IT+0x176>
 8002730:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002734:	e01b      	b.n	800276e <HAL_DMA_Abort_IT+0x1ae>
 8002736:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800273a:	e018      	b.n	800276e <HAL_DMA_Abort_IT+0x1ae>
 800273c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002740:	e015      	b.n	800276e <HAL_DMA_Abort_IT+0x1ae>
 8002742:	2310      	movs	r3, #16
 8002744:	e013      	b.n	800276e <HAL_DMA_Abort_IT+0x1ae>
 8002746:	2301      	movs	r3, #1
 8002748:	e011      	b.n	800276e <HAL_DMA_Abort_IT+0x1ae>
 800274a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800274e:	e00e      	b.n	800276e <HAL_DMA_Abort_IT+0x1ae>
 8002750:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002754:	e00b      	b.n	800276e <HAL_DMA_Abort_IT+0x1ae>
 8002756:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800275a:	e008      	b.n	800276e <HAL_DMA_Abort_IT+0x1ae>
 800275c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002760:	e005      	b.n	800276e <HAL_DMA_Abort_IT+0x1ae>
 8002762:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002766:	e002      	b.n	800276e <HAL_DMA_Abort_IT+0x1ae>
 8002768:	2310      	movs	r3, #16
 800276a:	e000      	b.n	800276e <HAL_DMA_Abort_IT+0x1ae>
 800276c:	2301      	movs	r3, #1
 800276e:	4a17      	ldr	r2, [pc, #92]	; (80027cc <HAL_DMA_Abort_IT+0x20c>)
 8002770:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2201      	movs	r2, #1
 8002776:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002786:	2b00      	cmp	r3, #0
 8002788:	d003      	beq.n	8002792 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	4798      	blx	r3
    } 
  }
  return status;
 8002792:	7bfb      	ldrb	r3, [r7, #15]
}
 8002794:	4618      	mov	r0, r3
 8002796:	3710      	adds	r7, #16
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	40020080 	.word	0x40020080
 80027a0:	40020008 	.word	0x40020008
 80027a4:	4002001c 	.word	0x4002001c
 80027a8:	40020030 	.word	0x40020030
 80027ac:	40020044 	.word	0x40020044
 80027b0:	40020058 	.word	0x40020058
 80027b4:	4002006c 	.word	0x4002006c
 80027b8:	40020408 	.word	0x40020408
 80027bc:	4002041c 	.word	0x4002041c
 80027c0:	40020430 	.word	0x40020430
 80027c4:	40020444 	.word	0x40020444
 80027c8:	40020400 	.word	0x40020400
 80027cc:	40020000 	.word	0x40020000

080027d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b08b      	sub	sp, #44	; 0x2c
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027da:	2300      	movs	r3, #0
 80027dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80027de:	2300      	movs	r3, #0
 80027e0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027e2:	e179      	b.n	8002ad8 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80027e4:	2201      	movs	r2, #1
 80027e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	69fa      	ldr	r2, [r7, #28]
 80027f4:	4013      	ands	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	f040 8168 	bne.w	8002ad2 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	4a96      	ldr	r2, [pc, #600]	; (8002a60 <HAL_GPIO_Init+0x290>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d05e      	beq.n	80028ca <HAL_GPIO_Init+0xfa>
 800280c:	4a94      	ldr	r2, [pc, #592]	; (8002a60 <HAL_GPIO_Init+0x290>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d875      	bhi.n	80028fe <HAL_GPIO_Init+0x12e>
 8002812:	4a94      	ldr	r2, [pc, #592]	; (8002a64 <HAL_GPIO_Init+0x294>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d058      	beq.n	80028ca <HAL_GPIO_Init+0xfa>
 8002818:	4a92      	ldr	r2, [pc, #584]	; (8002a64 <HAL_GPIO_Init+0x294>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d86f      	bhi.n	80028fe <HAL_GPIO_Init+0x12e>
 800281e:	4a92      	ldr	r2, [pc, #584]	; (8002a68 <HAL_GPIO_Init+0x298>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d052      	beq.n	80028ca <HAL_GPIO_Init+0xfa>
 8002824:	4a90      	ldr	r2, [pc, #576]	; (8002a68 <HAL_GPIO_Init+0x298>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d869      	bhi.n	80028fe <HAL_GPIO_Init+0x12e>
 800282a:	4a90      	ldr	r2, [pc, #576]	; (8002a6c <HAL_GPIO_Init+0x29c>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d04c      	beq.n	80028ca <HAL_GPIO_Init+0xfa>
 8002830:	4a8e      	ldr	r2, [pc, #568]	; (8002a6c <HAL_GPIO_Init+0x29c>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d863      	bhi.n	80028fe <HAL_GPIO_Init+0x12e>
 8002836:	4a8e      	ldr	r2, [pc, #568]	; (8002a70 <HAL_GPIO_Init+0x2a0>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d046      	beq.n	80028ca <HAL_GPIO_Init+0xfa>
 800283c:	4a8c      	ldr	r2, [pc, #560]	; (8002a70 <HAL_GPIO_Init+0x2a0>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d85d      	bhi.n	80028fe <HAL_GPIO_Init+0x12e>
 8002842:	2b12      	cmp	r3, #18
 8002844:	d82a      	bhi.n	800289c <HAL_GPIO_Init+0xcc>
 8002846:	2b12      	cmp	r3, #18
 8002848:	d859      	bhi.n	80028fe <HAL_GPIO_Init+0x12e>
 800284a:	a201      	add	r2, pc, #4	; (adr r2, 8002850 <HAL_GPIO_Init+0x80>)
 800284c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002850:	080028cb 	.word	0x080028cb
 8002854:	080028a5 	.word	0x080028a5
 8002858:	080028b7 	.word	0x080028b7
 800285c:	080028f9 	.word	0x080028f9
 8002860:	080028ff 	.word	0x080028ff
 8002864:	080028ff 	.word	0x080028ff
 8002868:	080028ff 	.word	0x080028ff
 800286c:	080028ff 	.word	0x080028ff
 8002870:	080028ff 	.word	0x080028ff
 8002874:	080028ff 	.word	0x080028ff
 8002878:	080028ff 	.word	0x080028ff
 800287c:	080028ff 	.word	0x080028ff
 8002880:	080028ff 	.word	0x080028ff
 8002884:	080028ff 	.word	0x080028ff
 8002888:	080028ff 	.word	0x080028ff
 800288c:	080028ff 	.word	0x080028ff
 8002890:	080028ff 	.word	0x080028ff
 8002894:	080028ad 	.word	0x080028ad
 8002898:	080028c1 	.word	0x080028c1
 800289c:	4a75      	ldr	r2, [pc, #468]	; (8002a74 <HAL_GPIO_Init+0x2a4>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d013      	beq.n	80028ca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80028a2:	e02c      	b.n	80028fe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	623b      	str	r3, [r7, #32]
          break;
 80028aa:	e029      	b.n	8002900 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	3304      	adds	r3, #4
 80028b2:	623b      	str	r3, [r7, #32]
          break;
 80028b4:	e024      	b.n	8002900 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	3308      	adds	r3, #8
 80028bc:	623b      	str	r3, [r7, #32]
          break;
 80028be:	e01f      	b.n	8002900 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	330c      	adds	r3, #12
 80028c6:	623b      	str	r3, [r7, #32]
          break;
 80028c8:	e01a      	b.n	8002900 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d102      	bne.n	80028d8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80028d2:	2304      	movs	r3, #4
 80028d4:	623b      	str	r3, [r7, #32]
          break;
 80028d6:	e013      	b.n	8002900 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d105      	bne.n	80028ec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028e0:	2308      	movs	r3, #8
 80028e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	69fa      	ldr	r2, [r7, #28]
 80028e8:	611a      	str	r2, [r3, #16]
          break;
 80028ea:	e009      	b.n	8002900 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028ec:	2308      	movs	r3, #8
 80028ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	69fa      	ldr	r2, [r7, #28]
 80028f4:	615a      	str	r2, [r3, #20]
          break;
 80028f6:	e003      	b.n	8002900 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80028f8:	2300      	movs	r3, #0
 80028fa:	623b      	str	r3, [r7, #32]
          break;
 80028fc:	e000      	b.n	8002900 <HAL_GPIO_Init+0x130>
          break;
 80028fe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	2bff      	cmp	r3, #255	; 0xff
 8002904:	d801      	bhi.n	800290a <HAL_GPIO_Init+0x13a>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	e001      	b.n	800290e <HAL_GPIO_Init+0x13e>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	3304      	adds	r3, #4
 800290e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	2bff      	cmp	r3, #255	; 0xff
 8002914:	d802      	bhi.n	800291c <HAL_GPIO_Init+0x14c>
 8002916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	e002      	b.n	8002922 <HAL_GPIO_Init+0x152>
 800291c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291e:	3b08      	subs	r3, #8
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	210f      	movs	r1, #15
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	fa01 f303 	lsl.w	r3, r1, r3
 8002930:	43db      	mvns	r3, r3
 8002932:	401a      	ands	r2, r3
 8002934:	6a39      	ldr	r1, [r7, #32]
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	fa01 f303 	lsl.w	r3, r1, r3
 800293c:	431a      	orrs	r2, r3
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800294a:	2b00      	cmp	r3, #0
 800294c:	f000 80c1 	beq.w	8002ad2 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002950:	4b49      	ldr	r3, [pc, #292]	; (8002a78 <HAL_GPIO_Init+0x2a8>)
 8002952:	699b      	ldr	r3, [r3, #24]
 8002954:	4a48      	ldr	r2, [pc, #288]	; (8002a78 <HAL_GPIO_Init+0x2a8>)
 8002956:	f043 0301 	orr.w	r3, r3, #1
 800295a:	6193      	str	r3, [r2, #24]
 800295c:	4b46      	ldr	r3, [pc, #280]	; (8002a78 <HAL_GPIO_Init+0x2a8>)
 800295e:	699b      	ldr	r3, [r3, #24]
 8002960:	f003 0301 	and.w	r3, r3, #1
 8002964:	60bb      	str	r3, [r7, #8]
 8002966:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002968:	4a44      	ldr	r2, [pc, #272]	; (8002a7c <HAL_GPIO_Init+0x2ac>)
 800296a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296c:	089b      	lsrs	r3, r3, #2
 800296e:	3302      	adds	r3, #2
 8002970:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002974:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002978:	f003 0303 	and.w	r3, r3, #3
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	220f      	movs	r2, #15
 8002980:	fa02 f303 	lsl.w	r3, r2, r3
 8002984:	43db      	mvns	r3, r3
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	4013      	ands	r3, r2
 800298a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4a3c      	ldr	r2, [pc, #240]	; (8002a80 <HAL_GPIO_Init+0x2b0>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d01f      	beq.n	80029d4 <HAL_GPIO_Init+0x204>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	4a3b      	ldr	r2, [pc, #236]	; (8002a84 <HAL_GPIO_Init+0x2b4>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d019      	beq.n	80029d0 <HAL_GPIO_Init+0x200>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a3a      	ldr	r2, [pc, #232]	; (8002a88 <HAL_GPIO_Init+0x2b8>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d013      	beq.n	80029cc <HAL_GPIO_Init+0x1fc>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4a39      	ldr	r2, [pc, #228]	; (8002a8c <HAL_GPIO_Init+0x2bc>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d00d      	beq.n	80029c8 <HAL_GPIO_Init+0x1f8>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a38      	ldr	r2, [pc, #224]	; (8002a90 <HAL_GPIO_Init+0x2c0>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d007      	beq.n	80029c4 <HAL_GPIO_Init+0x1f4>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a37      	ldr	r2, [pc, #220]	; (8002a94 <HAL_GPIO_Init+0x2c4>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d101      	bne.n	80029c0 <HAL_GPIO_Init+0x1f0>
 80029bc:	2305      	movs	r3, #5
 80029be:	e00a      	b.n	80029d6 <HAL_GPIO_Init+0x206>
 80029c0:	2306      	movs	r3, #6
 80029c2:	e008      	b.n	80029d6 <HAL_GPIO_Init+0x206>
 80029c4:	2304      	movs	r3, #4
 80029c6:	e006      	b.n	80029d6 <HAL_GPIO_Init+0x206>
 80029c8:	2303      	movs	r3, #3
 80029ca:	e004      	b.n	80029d6 <HAL_GPIO_Init+0x206>
 80029cc:	2302      	movs	r3, #2
 80029ce:	e002      	b.n	80029d6 <HAL_GPIO_Init+0x206>
 80029d0:	2301      	movs	r3, #1
 80029d2:	e000      	b.n	80029d6 <HAL_GPIO_Init+0x206>
 80029d4:	2300      	movs	r3, #0
 80029d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029d8:	f002 0203 	and.w	r2, r2, #3
 80029dc:	0092      	lsls	r2, r2, #2
 80029de:	4093      	lsls	r3, r2
 80029e0:	68fa      	ldr	r2, [r7, #12]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80029e6:	4925      	ldr	r1, [pc, #148]	; (8002a7c <HAL_GPIO_Init+0x2ac>)
 80029e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ea:	089b      	lsrs	r3, r3, #2
 80029ec:	3302      	adds	r3, #2
 80029ee:	68fa      	ldr	r2, [r7, #12]
 80029f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d006      	beq.n	8002a0e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a00:	4b25      	ldr	r3, [pc, #148]	; (8002a98 <HAL_GPIO_Init+0x2c8>)
 8002a02:	689a      	ldr	r2, [r3, #8]
 8002a04:	4924      	ldr	r1, [pc, #144]	; (8002a98 <HAL_GPIO_Init+0x2c8>)
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	608b      	str	r3, [r1, #8]
 8002a0c:	e006      	b.n	8002a1c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002a0e:	4b22      	ldr	r3, [pc, #136]	; (8002a98 <HAL_GPIO_Init+0x2c8>)
 8002a10:	689a      	ldr	r2, [r3, #8]
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	43db      	mvns	r3, r3
 8002a16:	4920      	ldr	r1, [pc, #128]	; (8002a98 <HAL_GPIO_Init+0x2c8>)
 8002a18:	4013      	ands	r3, r2
 8002a1a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d006      	beq.n	8002a36 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002a28:	4b1b      	ldr	r3, [pc, #108]	; (8002a98 <HAL_GPIO_Init+0x2c8>)
 8002a2a:	68da      	ldr	r2, [r3, #12]
 8002a2c:	491a      	ldr	r1, [pc, #104]	; (8002a98 <HAL_GPIO_Init+0x2c8>)
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	60cb      	str	r3, [r1, #12]
 8002a34:	e006      	b.n	8002a44 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002a36:	4b18      	ldr	r3, [pc, #96]	; (8002a98 <HAL_GPIO_Init+0x2c8>)
 8002a38:	68da      	ldr	r2, [r3, #12]
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	43db      	mvns	r3, r3
 8002a3e:	4916      	ldr	r1, [pc, #88]	; (8002a98 <HAL_GPIO_Init+0x2c8>)
 8002a40:	4013      	ands	r3, r2
 8002a42:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d025      	beq.n	8002a9c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002a50:	4b11      	ldr	r3, [pc, #68]	; (8002a98 <HAL_GPIO_Init+0x2c8>)
 8002a52:	685a      	ldr	r2, [r3, #4]
 8002a54:	4910      	ldr	r1, [pc, #64]	; (8002a98 <HAL_GPIO_Init+0x2c8>)
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	604b      	str	r3, [r1, #4]
 8002a5c:	e025      	b.n	8002aaa <HAL_GPIO_Init+0x2da>
 8002a5e:	bf00      	nop
 8002a60:	10320000 	.word	0x10320000
 8002a64:	10310000 	.word	0x10310000
 8002a68:	10220000 	.word	0x10220000
 8002a6c:	10210000 	.word	0x10210000
 8002a70:	10120000 	.word	0x10120000
 8002a74:	10110000 	.word	0x10110000
 8002a78:	40021000 	.word	0x40021000
 8002a7c:	40010000 	.word	0x40010000
 8002a80:	40010800 	.word	0x40010800
 8002a84:	40010c00 	.word	0x40010c00
 8002a88:	40011000 	.word	0x40011000
 8002a8c:	40011400 	.word	0x40011400
 8002a90:	40011800 	.word	0x40011800
 8002a94:	40011c00 	.word	0x40011c00
 8002a98:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002a9c:	4b15      	ldr	r3, [pc, #84]	; (8002af4 <HAL_GPIO_Init+0x324>)
 8002a9e:	685a      	ldr	r2, [r3, #4]
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	43db      	mvns	r3, r3
 8002aa4:	4913      	ldr	r1, [pc, #76]	; (8002af4 <HAL_GPIO_Init+0x324>)
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d006      	beq.n	8002ac4 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ab6:	4b0f      	ldr	r3, [pc, #60]	; (8002af4 <HAL_GPIO_Init+0x324>)
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	490e      	ldr	r1, [pc, #56]	; (8002af4 <HAL_GPIO_Init+0x324>)
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	600b      	str	r3, [r1, #0]
 8002ac2:	e006      	b.n	8002ad2 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002ac4:	4b0b      	ldr	r3, [pc, #44]	; (8002af4 <HAL_GPIO_Init+0x324>)
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	43db      	mvns	r3, r3
 8002acc:	4909      	ldr	r1, [pc, #36]	; (8002af4 <HAL_GPIO_Init+0x324>)
 8002ace:	4013      	ands	r3, r2
 8002ad0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ade:	fa22 f303 	lsr.w	r3, r2, r3
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	f47f ae7e 	bne.w	80027e4 <HAL_GPIO_Init+0x14>
  }
}
 8002ae8:	bf00      	nop
 8002aea:	bf00      	nop
 8002aec:	372c      	adds	r7, #44	; 0x2c
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bc80      	pop	{r7}
 8002af2:	4770      	bx	lr
 8002af4:	40010400 	.word	0x40010400

08002af8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b085      	sub	sp, #20
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	460b      	mov	r3, r1
 8002b02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	689a      	ldr	r2, [r3, #8]
 8002b08:	887b      	ldrh	r3, [r7, #2]
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d002      	beq.n	8002b16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b10:	2301      	movs	r3, #1
 8002b12:	73fb      	strb	r3, [r7, #15]
 8002b14:	e001      	b.n	8002b1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b16:	2300      	movs	r3, #0
 8002b18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3714      	adds	r7, #20
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bc80      	pop	{r7}
 8002b24:	4770      	bx	lr

08002b26 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b26:	b480      	push	{r7}
 8002b28:	b083      	sub	sp, #12
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
 8002b2e:	460b      	mov	r3, r1
 8002b30:	807b      	strh	r3, [r7, #2]
 8002b32:	4613      	mov	r3, r2
 8002b34:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b36:	787b      	ldrb	r3, [r7, #1]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d003      	beq.n	8002b44 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b3c:	887a      	ldrh	r2, [r7, #2]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002b42:	e003      	b.n	8002b4c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b44:	887b      	ldrh	r3, [r7, #2]
 8002b46:	041a      	lsls	r2, r3, #16
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	611a      	str	r2, [r3, #16]
}
 8002b4c:	bf00      	nop
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bc80      	pop	{r7}
 8002b54:	4770      	bx	lr
	...

08002b58 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	4603      	mov	r3, r0
 8002b60:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002b62:	4b08      	ldr	r3, [pc, #32]	; (8002b84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b64:	695a      	ldr	r2, [r3, #20]
 8002b66:	88fb      	ldrh	r3, [r7, #6]
 8002b68:	4013      	ands	r3, r2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d006      	beq.n	8002b7c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b6e:	4a05      	ldr	r2, [pc, #20]	; (8002b84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b70:	88fb      	ldrh	r3, [r7, #6]
 8002b72:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b74:	88fb      	ldrh	r3, [r7, #6]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7fd ffdc 	bl	8000b34 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b7c:	bf00      	nop
 8002b7e:	3708      	adds	r7, #8
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	40010400 	.word	0x40010400

08002b88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d101      	bne.n	8002b9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e12b      	b.n	8002df2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d106      	bne.n	8002bb4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f7fd ff82 	bl	8000ab8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2224      	movs	r2, #36	; 0x24
 8002bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f022 0201 	bic.w	r2, r2, #1
 8002bca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bda:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002bec:	f000 fce6 	bl	80035bc <HAL_RCC_GetPCLK1Freq>
 8002bf0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	4a81      	ldr	r2, [pc, #516]	; (8002dfc <HAL_I2C_Init+0x274>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d807      	bhi.n	8002c0c <HAL_I2C_Init+0x84>
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	4a80      	ldr	r2, [pc, #512]	; (8002e00 <HAL_I2C_Init+0x278>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	bf94      	ite	ls
 8002c04:	2301      	movls	r3, #1
 8002c06:	2300      	movhi	r3, #0
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	e006      	b.n	8002c1a <HAL_I2C_Init+0x92>
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	4a7d      	ldr	r2, [pc, #500]	; (8002e04 <HAL_I2C_Init+0x27c>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	bf94      	ite	ls
 8002c14:	2301      	movls	r3, #1
 8002c16:	2300      	movhi	r3, #0
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e0e7      	b.n	8002df2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	4a78      	ldr	r2, [pc, #480]	; (8002e08 <HAL_I2C_Init+0x280>)
 8002c26:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2a:	0c9b      	lsrs	r3, r3, #18
 8002c2c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68ba      	ldr	r2, [r7, #8]
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	6a1b      	ldr	r3, [r3, #32]
 8002c48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	4a6a      	ldr	r2, [pc, #424]	; (8002dfc <HAL_I2C_Init+0x274>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d802      	bhi.n	8002c5c <HAL_I2C_Init+0xd4>
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	3301      	adds	r3, #1
 8002c5a:	e009      	b.n	8002c70 <HAL_I2C_Init+0xe8>
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c62:	fb02 f303 	mul.w	r3, r2, r3
 8002c66:	4a69      	ldr	r2, [pc, #420]	; (8002e0c <HAL_I2C_Init+0x284>)
 8002c68:	fba2 2303 	umull	r2, r3, r2, r3
 8002c6c:	099b      	lsrs	r3, r3, #6
 8002c6e:	3301      	adds	r3, #1
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	6812      	ldr	r2, [r2, #0]
 8002c74:	430b      	orrs	r3, r1
 8002c76:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	69db      	ldr	r3, [r3, #28]
 8002c7e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002c82:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	495c      	ldr	r1, [pc, #368]	; (8002dfc <HAL_I2C_Init+0x274>)
 8002c8c:	428b      	cmp	r3, r1
 8002c8e:	d819      	bhi.n	8002cc4 <HAL_I2C_Init+0x13c>
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	1e59      	subs	r1, r3, #1
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c9e:	1c59      	adds	r1, r3, #1
 8002ca0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002ca4:	400b      	ands	r3, r1
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00a      	beq.n	8002cc0 <HAL_I2C_Init+0x138>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	1e59      	subs	r1, r3, #1
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cb8:	3301      	adds	r3, #1
 8002cba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cbe:	e051      	b.n	8002d64 <HAL_I2C_Init+0x1dc>
 8002cc0:	2304      	movs	r3, #4
 8002cc2:	e04f      	b.n	8002d64 <HAL_I2C_Init+0x1dc>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d111      	bne.n	8002cf0 <HAL_I2C_Init+0x168>
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	1e58      	subs	r0, r3, #1
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6859      	ldr	r1, [r3, #4]
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	005b      	lsls	r3, r3, #1
 8002cd8:	440b      	add	r3, r1
 8002cda:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cde:	3301      	adds	r3, #1
 8002ce0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	bf0c      	ite	eq
 8002ce8:	2301      	moveq	r3, #1
 8002cea:	2300      	movne	r3, #0
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	e012      	b.n	8002d16 <HAL_I2C_Init+0x18e>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	1e58      	subs	r0, r3, #1
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6859      	ldr	r1, [r3, #4]
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	440b      	add	r3, r1
 8002cfe:	0099      	lsls	r1, r3, #2
 8002d00:	440b      	add	r3, r1
 8002d02:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d06:	3301      	adds	r3, #1
 8002d08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	bf0c      	ite	eq
 8002d10:	2301      	moveq	r3, #1
 8002d12:	2300      	movne	r3, #0
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <HAL_I2C_Init+0x196>
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e022      	b.n	8002d64 <HAL_I2C_Init+0x1dc>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d10e      	bne.n	8002d44 <HAL_I2C_Init+0x1bc>
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	1e58      	subs	r0, r3, #1
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6859      	ldr	r1, [r3, #4]
 8002d2e:	460b      	mov	r3, r1
 8002d30:	005b      	lsls	r3, r3, #1
 8002d32:	440b      	add	r3, r1
 8002d34:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d38:	3301      	adds	r3, #1
 8002d3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d42:	e00f      	b.n	8002d64 <HAL_I2C_Init+0x1dc>
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	1e58      	subs	r0, r3, #1
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6859      	ldr	r1, [r3, #4]
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	440b      	add	r3, r1
 8002d52:	0099      	lsls	r1, r3, #2
 8002d54:	440b      	add	r3, r1
 8002d56:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d64:	6879      	ldr	r1, [r7, #4]
 8002d66:	6809      	ldr	r1, [r1, #0]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	69da      	ldr	r2, [r3, #28]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	431a      	orrs	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	430a      	orrs	r2, r1
 8002d86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002d92:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	6911      	ldr	r1, [r2, #16]
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	68d2      	ldr	r2, [r2, #12]
 8002d9e:	4311      	orrs	r1, r2
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	6812      	ldr	r2, [r2, #0]
 8002da4:	430b      	orrs	r3, r1
 8002da6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	695a      	ldr	r2, [r3, #20]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	431a      	orrs	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	430a      	orrs	r2, r1
 8002dc2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f042 0201 	orr.w	r2, r2, #1
 8002dd2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2220      	movs	r2, #32
 8002dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3710      	adds	r7, #16
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	000186a0 	.word	0x000186a0
 8002e00:	001e847f 	.word	0x001e847f
 8002e04:	003d08ff 	.word	0x003d08ff
 8002e08:	431bde83 	.word	0x431bde83
 8002e0c:	10624dd3 	.word	0x10624dd3

08002e10 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002e10:	b480      	push	{r7}
 8002e12:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8002e14:	4b03      	ldr	r3, [pc, #12]	; (8002e24 <HAL_PWR_EnableBkUpAccess+0x14>)
 8002e16:	2201      	movs	r2, #1
 8002e18:	601a      	str	r2, [r3, #0]
}
 8002e1a:	bf00      	nop
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bc80      	pop	{r7}
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	420e0020 	.word	0x420e0020

08002e28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b086      	sub	sp, #24
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d101      	bne.n	8002e3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e272      	b.n	8003320 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	f000 8087 	beq.w	8002f56 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e48:	4b92      	ldr	r3, [pc, #584]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f003 030c 	and.w	r3, r3, #12
 8002e50:	2b04      	cmp	r3, #4
 8002e52:	d00c      	beq.n	8002e6e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e54:	4b8f      	ldr	r3, [pc, #572]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f003 030c 	and.w	r3, r3, #12
 8002e5c:	2b08      	cmp	r3, #8
 8002e5e:	d112      	bne.n	8002e86 <HAL_RCC_OscConfig+0x5e>
 8002e60:	4b8c      	ldr	r3, [pc, #560]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e6c:	d10b      	bne.n	8002e86 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e6e:	4b89      	ldr	r3, [pc, #548]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d06c      	beq.n	8002f54 <HAL_RCC_OscConfig+0x12c>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d168      	bne.n	8002f54 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e24c      	b.n	8003320 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e8e:	d106      	bne.n	8002e9e <HAL_RCC_OscConfig+0x76>
 8002e90:	4b80      	ldr	r3, [pc, #512]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a7f      	ldr	r2, [pc, #508]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002e96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e9a:	6013      	str	r3, [r2, #0]
 8002e9c:	e02e      	b.n	8002efc <HAL_RCC_OscConfig+0xd4>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d10c      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x98>
 8002ea6:	4b7b      	ldr	r3, [pc, #492]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a7a      	ldr	r2, [pc, #488]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002eac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eb0:	6013      	str	r3, [r2, #0]
 8002eb2:	4b78      	ldr	r3, [pc, #480]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a77      	ldr	r2, [pc, #476]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002eb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ebc:	6013      	str	r3, [r2, #0]
 8002ebe:	e01d      	b.n	8002efc <HAL_RCC_OscConfig+0xd4>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ec8:	d10c      	bne.n	8002ee4 <HAL_RCC_OscConfig+0xbc>
 8002eca:	4b72      	ldr	r3, [pc, #456]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a71      	ldr	r2, [pc, #452]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002ed0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ed4:	6013      	str	r3, [r2, #0]
 8002ed6:	4b6f      	ldr	r3, [pc, #444]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a6e      	ldr	r2, [pc, #440]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002edc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ee0:	6013      	str	r3, [r2, #0]
 8002ee2:	e00b      	b.n	8002efc <HAL_RCC_OscConfig+0xd4>
 8002ee4:	4b6b      	ldr	r3, [pc, #428]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a6a      	ldr	r2, [pc, #424]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002eea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eee:	6013      	str	r3, [r2, #0]
 8002ef0:	4b68      	ldr	r3, [pc, #416]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a67      	ldr	r2, [pc, #412]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002ef6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002efa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d013      	beq.n	8002f2c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f04:	f7fe fe1a 	bl	8001b3c <HAL_GetTick>
 8002f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f0a:	e008      	b.n	8002f1e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f0c:	f7fe fe16 	bl	8001b3c <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b64      	cmp	r3, #100	; 0x64
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e200      	b.n	8003320 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f1e:	4b5d      	ldr	r3, [pc, #372]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d0f0      	beq.n	8002f0c <HAL_RCC_OscConfig+0xe4>
 8002f2a:	e014      	b.n	8002f56 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f2c:	f7fe fe06 	bl	8001b3c <HAL_GetTick>
 8002f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f32:	e008      	b.n	8002f46 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f34:	f7fe fe02 	bl	8001b3c <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	2b64      	cmp	r3, #100	; 0x64
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e1ec      	b.n	8003320 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f46:	4b53      	ldr	r3, [pc, #332]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d1f0      	bne.n	8002f34 <HAL_RCC_OscConfig+0x10c>
 8002f52:	e000      	b.n	8002f56 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d063      	beq.n	800302a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f62:	4b4c      	ldr	r3, [pc, #304]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f003 030c 	and.w	r3, r3, #12
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d00b      	beq.n	8002f86 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002f6e:	4b49      	ldr	r3, [pc, #292]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f003 030c 	and.w	r3, r3, #12
 8002f76:	2b08      	cmp	r3, #8
 8002f78:	d11c      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x18c>
 8002f7a:	4b46      	ldr	r3, [pc, #280]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d116      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f86:	4b43      	ldr	r3, [pc, #268]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d005      	beq.n	8002f9e <HAL_RCC_OscConfig+0x176>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d001      	beq.n	8002f9e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e1c0      	b.n	8003320 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f9e:	4b3d      	ldr	r3, [pc, #244]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	695b      	ldr	r3, [r3, #20]
 8002faa:	00db      	lsls	r3, r3, #3
 8002fac:	4939      	ldr	r1, [pc, #228]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fb2:	e03a      	b.n	800302a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	691b      	ldr	r3, [r3, #16]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d020      	beq.n	8002ffe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fbc:	4b36      	ldr	r3, [pc, #216]	; (8003098 <HAL_RCC_OscConfig+0x270>)
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc2:	f7fe fdbb 	bl	8001b3c <HAL_GetTick>
 8002fc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fc8:	e008      	b.n	8002fdc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fca:	f7fe fdb7 	bl	8001b3c <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d901      	bls.n	8002fdc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e1a1      	b.n	8003320 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fdc:	4b2d      	ldr	r3, [pc, #180]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0302 	and.w	r3, r3, #2
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d0f0      	beq.n	8002fca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fe8:	4b2a      	ldr	r3, [pc, #168]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	695b      	ldr	r3, [r3, #20]
 8002ff4:	00db      	lsls	r3, r3, #3
 8002ff6:	4927      	ldr	r1, [pc, #156]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	600b      	str	r3, [r1, #0]
 8002ffc:	e015      	b.n	800302a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ffe:	4b26      	ldr	r3, [pc, #152]	; (8003098 <HAL_RCC_OscConfig+0x270>)
 8003000:	2200      	movs	r2, #0
 8003002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003004:	f7fe fd9a 	bl	8001b3c <HAL_GetTick>
 8003008:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800300a:	e008      	b.n	800301e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800300c:	f7fe fd96 	bl	8001b3c <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b02      	cmp	r3, #2
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e180      	b.n	8003320 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800301e:	4b1d      	ldr	r3, [pc, #116]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1f0      	bne.n	800300c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0308 	and.w	r3, r3, #8
 8003032:	2b00      	cmp	r3, #0
 8003034:	d03a      	beq.n	80030ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d019      	beq.n	8003072 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800303e:	4b17      	ldr	r3, [pc, #92]	; (800309c <HAL_RCC_OscConfig+0x274>)
 8003040:	2201      	movs	r2, #1
 8003042:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003044:	f7fe fd7a 	bl	8001b3c <HAL_GetTick>
 8003048:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800304a:	e008      	b.n	800305e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800304c:	f7fe fd76 	bl	8001b3c <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b02      	cmp	r3, #2
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e160      	b.n	8003320 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800305e:	4b0d      	ldr	r3, [pc, #52]	; (8003094 <HAL_RCC_OscConfig+0x26c>)
 8003060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d0f0      	beq.n	800304c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800306a:	2001      	movs	r0, #1
 800306c:	f000 face 	bl	800360c <RCC_Delay>
 8003070:	e01c      	b.n	80030ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003072:	4b0a      	ldr	r3, [pc, #40]	; (800309c <HAL_RCC_OscConfig+0x274>)
 8003074:	2200      	movs	r2, #0
 8003076:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003078:	f7fe fd60 	bl	8001b3c <HAL_GetTick>
 800307c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800307e:	e00f      	b.n	80030a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003080:	f7fe fd5c 	bl	8001b3c <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	2b02      	cmp	r3, #2
 800308c:	d908      	bls.n	80030a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e146      	b.n	8003320 <HAL_RCC_OscConfig+0x4f8>
 8003092:	bf00      	nop
 8003094:	40021000 	.word	0x40021000
 8003098:	42420000 	.word	0x42420000
 800309c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030a0:	4b92      	ldr	r3, [pc, #584]	; (80032ec <HAL_RCC_OscConfig+0x4c4>)
 80030a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a4:	f003 0302 	and.w	r3, r3, #2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d1e9      	bne.n	8003080 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0304 	and.w	r3, r3, #4
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	f000 80a6 	beq.w	8003206 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030ba:	2300      	movs	r3, #0
 80030bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030be:	4b8b      	ldr	r3, [pc, #556]	; (80032ec <HAL_RCC_OscConfig+0x4c4>)
 80030c0:	69db      	ldr	r3, [r3, #28]
 80030c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d10d      	bne.n	80030e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030ca:	4b88      	ldr	r3, [pc, #544]	; (80032ec <HAL_RCC_OscConfig+0x4c4>)
 80030cc:	69db      	ldr	r3, [r3, #28]
 80030ce:	4a87      	ldr	r2, [pc, #540]	; (80032ec <HAL_RCC_OscConfig+0x4c4>)
 80030d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030d4:	61d3      	str	r3, [r2, #28]
 80030d6:	4b85      	ldr	r3, [pc, #532]	; (80032ec <HAL_RCC_OscConfig+0x4c4>)
 80030d8:	69db      	ldr	r3, [r3, #28]
 80030da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030de:	60bb      	str	r3, [r7, #8]
 80030e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030e2:	2301      	movs	r3, #1
 80030e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030e6:	4b82      	ldr	r3, [pc, #520]	; (80032f0 <HAL_RCC_OscConfig+0x4c8>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d118      	bne.n	8003124 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030f2:	4b7f      	ldr	r3, [pc, #508]	; (80032f0 <HAL_RCC_OscConfig+0x4c8>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a7e      	ldr	r2, [pc, #504]	; (80032f0 <HAL_RCC_OscConfig+0x4c8>)
 80030f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030fe:	f7fe fd1d 	bl	8001b3c <HAL_GetTick>
 8003102:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003104:	e008      	b.n	8003118 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003106:	f7fe fd19 	bl	8001b3c <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	2b64      	cmp	r3, #100	; 0x64
 8003112:	d901      	bls.n	8003118 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e103      	b.n	8003320 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003118:	4b75      	ldr	r3, [pc, #468]	; (80032f0 <HAL_RCC_OscConfig+0x4c8>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003120:	2b00      	cmp	r3, #0
 8003122:	d0f0      	beq.n	8003106 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	2b01      	cmp	r3, #1
 800312a:	d106      	bne.n	800313a <HAL_RCC_OscConfig+0x312>
 800312c:	4b6f      	ldr	r3, [pc, #444]	; (80032ec <HAL_RCC_OscConfig+0x4c4>)
 800312e:	6a1b      	ldr	r3, [r3, #32]
 8003130:	4a6e      	ldr	r2, [pc, #440]	; (80032ec <HAL_RCC_OscConfig+0x4c4>)
 8003132:	f043 0301 	orr.w	r3, r3, #1
 8003136:	6213      	str	r3, [r2, #32]
 8003138:	e02d      	b.n	8003196 <HAL_RCC_OscConfig+0x36e>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d10c      	bne.n	800315c <HAL_RCC_OscConfig+0x334>
 8003142:	4b6a      	ldr	r3, [pc, #424]	; (80032ec <HAL_RCC_OscConfig+0x4c4>)
 8003144:	6a1b      	ldr	r3, [r3, #32]
 8003146:	4a69      	ldr	r2, [pc, #420]	; (80032ec <HAL_RCC_OscConfig+0x4c4>)
 8003148:	f023 0301 	bic.w	r3, r3, #1
 800314c:	6213      	str	r3, [r2, #32]
 800314e:	4b67      	ldr	r3, [pc, #412]	; (80032ec <HAL_RCC_OscConfig+0x4c4>)
 8003150:	6a1b      	ldr	r3, [r3, #32]
 8003152:	4a66      	ldr	r2, [pc, #408]	; (80032ec <HAL_RCC_OscConfig+0x4c4>)
 8003154:	f023 0304 	bic.w	r3, r3, #4
 8003158:	6213      	str	r3, [r2, #32]
 800315a:	e01c      	b.n	8003196 <HAL_RCC_OscConfig+0x36e>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	2b05      	cmp	r3, #5
 8003162:	d10c      	bne.n	800317e <HAL_RCC_OscConfig+0x356>
 8003164:	4b61      	ldr	r3, [pc, #388]	; (80032ec <HAL_RCC_OscConfig+0x4c4>)
 8003166:	6a1b      	ldr	r3, [r3, #32]
 8003168:	4a60      	ldr	r2, [pc, #384]	; (80032ec <HAL_RCC_OscConfig+0x4c4>)
 800316a:	f043 0304 	orr.w	r3, r3, #4
 800316e:	6213      	str	r3, [r2, #32]
 8003170:	4b5e      	ldr	r3, [pc, #376]	; (80032ec <HAL_RCC_OscConfig+0x4c4>)
 8003172:	6a1b      	ldr	r3, [r3, #32]
 8003174:	4a5d      	ldr	r2, [pc, #372]	; (80032ec <HAL_RCC_OscConfig+0x4c4>)
 8003176:	f043 0301 	orr.w	r3, r3, #1
 800317a:	6213      	str	r3, [r2, #32]
 800317c:	e00b      	b.n	8003196 <HAL_RCC_OscConfig+0x36e>
 800317e:	4b5b      	ldr	r3, [pc, #364]	; (80032ec <HAL_RCC_OscConfig+0x4c4>)
 8003180:	6a1b      	ldr	r3, [r3, #32]
 8003182:	4a5a      	ldr	r2, [pc, #360]	; (80032ec <HAL_RCC_OscConfig+0x4c4>)
 8003184:	f023 0301 	bic.w	r3, r3, #1
 8003188:	6213      	str	r3, [r2, #32]
 800318a:	4b58      	ldr	r3, [pc, #352]	; (80032ec <HAL_RCC_OscConfig+0x4c4>)
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	4a57      	ldr	r2, [pc, #348]	; (80032ec <HAL_RCC_OscConfig+0x4c4>)
 8003190:	f023 0304 	bic.w	r3, r3, #4
 8003194:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d015      	beq.n	80031ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800319e:	f7fe fccd 	bl	8001b3c <HAL_GetTick>
 80031a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031a4:	e00a      	b.n	80031bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031a6:	f7fe fcc9 	bl	8001b3c <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d901      	bls.n	80031bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e0b1      	b.n	8003320 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031bc:	4b4b      	ldr	r3, [pc, #300]	; (80032ec <HAL_RCC_OscConfig+0x4c4>)
 80031be:	6a1b      	ldr	r3, [r3, #32]
 80031c0:	f003 0302 	and.w	r3, r3, #2
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d0ee      	beq.n	80031a6 <HAL_RCC_OscConfig+0x37e>
 80031c8:	e014      	b.n	80031f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ca:	f7fe fcb7 	bl	8001b3c <HAL_GetTick>
 80031ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031d0:	e00a      	b.n	80031e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031d2:	f7fe fcb3 	bl	8001b3c <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d901      	bls.n	80031e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	e09b      	b.n	8003320 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031e8:	4b40      	ldr	r3, [pc, #256]	; (80032ec <HAL_RCC_OscConfig+0x4c4>)
 80031ea:	6a1b      	ldr	r3, [r3, #32]
 80031ec:	f003 0302 	and.w	r3, r3, #2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d1ee      	bne.n	80031d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80031f4:	7dfb      	ldrb	r3, [r7, #23]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d105      	bne.n	8003206 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031fa:	4b3c      	ldr	r3, [pc, #240]	; (80032ec <HAL_RCC_OscConfig+0x4c4>)
 80031fc:	69db      	ldr	r3, [r3, #28]
 80031fe:	4a3b      	ldr	r2, [pc, #236]	; (80032ec <HAL_RCC_OscConfig+0x4c4>)
 8003200:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003204:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	69db      	ldr	r3, [r3, #28]
 800320a:	2b00      	cmp	r3, #0
 800320c:	f000 8087 	beq.w	800331e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003210:	4b36      	ldr	r3, [pc, #216]	; (80032ec <HAL_RCC_OscConfig+0x4c4>)
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f003 030c 	and.w	r3, r3, #12
 8003218:	2b08      	cmp	r3, #8
 800321a:	d061      	beq.n	80032e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	69db      	ldr	r3, [r3, #28]
 8003220:	2b02      	cmp	r3, #2
 8003222:	d146      	bne.n	80032b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003224:	4b33      	ldr	r3, [pc, #204]	; (80032f4 <HAL_RCC_OscConfig+0x4cc>)
 8003226:	2200      	movs	r2, #0
 8003228:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800322a:	f7fe fc87 	bl	8001b3c <HAL_GetTick>
 800322e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003230:	e008      	b.n	8003244 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003232:	f7fe fc83 	bl	8001b3c <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	2b02      	cmp	r3, #2
 800323e:	d901      	bls.n	8003244 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e06d      	b.n	8003320 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003244:	4b29      	ldr	r3, [pc, #164]	; (80032ec <HAL_RCC_OscConfig+0x4c4>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d1f0      	bne.n	8003232 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a1b      	ldr	r3, [r3, #32]
 8003254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003258:	d108      	bne.n	800326c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800325a:	4b24      	ldr	r3, [pc, #144]	; (80032ec <HAL_RCC_OscConfig+0x4c4>)
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	4921      	ldr	r1, [pc, #132]	; (80032ec <HAL_RCC_OscConfig+0x4c4>)
 8003268:	4313      	orrs	r3, r2
 800326a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800326c:	4b1f      	ldr	r3, [pc, #124]	; (80032ec <HAL_RCC_OscConfig+0x4c4>)
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6a19      	ldr	r1, [r3, #32]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327c:	430b      	orrs	r3, r1
 800327e:	491b      	ldr	r1, [pc, #108]	; (80032ec <HAL_RCC_OscConfig+0x4c4>)
 8003280:	4313      	orrs	r3, r2
 8003282:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003284:	4b1b      	ldr	r3, [pc, #108]	; (80032f4 <HAL_RCC_OscConfig+0x4cc>)
 8003286:	2201      	movs	r2, #1
 8003288:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800328a:	f7fe fc57 	bl	8001b3c <HAL_GetTick>
 800328e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003290:	e008      	b.n	80032a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003292:	f7fe fc53 	bl	8001b3c <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	2b02      	cmp	r3, #2
 800329e:	d901      	bls.n	80032a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e03d      	b.n	8003320 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032a4:	4b11      	ldr	r3, [pc, #68]	; (80032ec <HAL_RCC_OscConfig+0x4c4>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d0f0      	beq.n	8003292 <HAL_RCC_OscConfig+0x46a>
 80032b0:	e035      	b.n	800331e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032b2:	4b10      	ldr	r3, [pc, #64]	; (80032f4 <HAL_RCC_OscConfig+0x4cc>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b8:	f7fe fc40 	bl	8001b3c <HAL_GetTick>
 80032bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032be:	e008      	b.n	80032d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032c0:	f7fe fc3c 	bl	8001b3c <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e026      	b.n	8003320 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032d2:	4b06      	ldr	r3, [pc, #24]	; (80032ec <HAL_RCC_OscConfig+0x4c4>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d1f0      	bne.n	80032c0 <HAL_RCC_OscConfig+0x498>
 80032de:	e01e      	b.n	800331e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	69db      	ldr	r3, [r3, #28]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d107      	bne.n	80032f8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e019      	b.n	8003320 <HAL_RCC_OscConfig+0x4f8>
 80032ec:	40021000 	.word	0x40021000
 80032f0:	40007000 	.word	0x40007000
 80032f4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80032f8:	4b0b      	ldr	r3, [pc, #44]	; (8003328 <HAL_RCC_OscConfig+0x500>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a1b      	ldr	r3, [r3, #32]
 8003308:	429a      	cmp	r2, r3
 800330a:	d106      	bne.n	800331a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003316:	429a      	cmp	r2, r3
 8003318:	d001      	beq.n	800331e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e000      	b.n	8003320 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800331e:	2300      	movs	r3, #0
}
 8003320:	4618      	mov	r0, r3
 8003322:	3718      	adds	r7, #24
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	40021000 	.word	0x40021000

0800332c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d101      	bne.n	8003340 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e0d0      	b.n	80034e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003340:	4b6a      	ldr	r3, [pc, #424]	; (80034ec <HAL_RCC_ClockConfig+0x1c0>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0307 	and.w	r3, r3, #7
 8003348:	683a      	ldr	r2, [r7, #0]
 800334a:	429a      	cmp	r2, r3
 800334c:	d910      	bls.n	8003370 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800334e:	4b67      	ldr	r3, [pc, #412]	; (80034ec <HAL_RCC_ClockConfig+0x1c0>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f023 0207 	bic.w	r2, r3, #7
 8003356:	4965      	ldr	r1, [pc, #404]	; (80034ec <HAL_RCC_ClockConfig+0x1c0>)
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	4313      	orrs	r3, r2
 800335c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800335e:	4b63      	ldr	r3, [pc, #396]	; (80034ec <HAL_RCC_ClockConfig+0x1c0>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0307 	and.w	r3, r3, #7
 8003366:	683a      	ldr	r2, [r7, #0]
 8003368:	429a      	cmp	r2, r3
 800336a:	d001      	beq.n	8003370 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e0b8      	b.n	80034e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0302 	and.w	r3, r3, #2
 8003378:	2b00      	cmp	r3, #0
 800337a:	d020      	beq.n	80033be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0304 	and.w	r3, r3, #4
 8003384:	2b00      	cmp	r3, #0
 8003386:	d005      	beq.n	8003394 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003388:	4b59      	ldr	r3, [pc, #356]	; (80034f0 <HAL_RCC_ClockConfig+0x1c4>)
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	4a58      	ldr	r2, [pc, #352]	; (80034f0 <HAL_RCC_ClockConfig+0x1c4>)
 800338e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003392:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0308 	and.w	r3, r3, #8
 800339c:	2b00      	cmp	r3, #0
 800339e:	d005      	beq.n	80033ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033a0:	4b53      	ldr	r3, [pc, #332]	; (80034f0 <HAL_RCC_ClockConfig+0x1c4>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	4a52      	ldr	r2, [pc, #328]	; (80034f0 <HAL_RCC_ClockConfig+0x1c4>)
 80033a6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80033aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033ac:	4b50      	ldr	r3, [pc, #320]	; (80034f0 <HAL_RCC_ClockConfig+0x1c4>)
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	494d      	ldr	r1, [pc, #308]	; (80034f0 <HAL_RCC_ClockConfig+0x1c4>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d040      	beq.n	800344c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d107      	bne.n	80033e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033d2:	4b47      	ldr	r3, [pc, #284]	; (80034f0 <HAL_RCC_ClockConfig+0x1c4>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d115      	bne.n	800340a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e07f      	b.n	80034e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d107      	bne.n	80033fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ea:	4b41      	ldr	r3, [pc, #260]	; (80034f0 <HAL_RCC_ClockConfig+0x1c4>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d109      	bne.n	800340a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e073      	b.n	80034e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033fa:	4b3d      	ldr	r3, [pc, #244]	; (80034f0 <HAL_RCC_ClockConfig+0x1c4>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0302 	and.w	r3, r3, #2
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e06b      	b.n	80034e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800340a:	4b39      	ldr	r3, [pc, #228]	; (80034f0 <HAL_RCC_ClockConfig+0x1c4>)
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f023 0203 	bic.w	r2, r3, #3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	4936      	ldr	r1, [pc, #216]	; (80034f0 <HAL_RCC_ClockConfig+0x1c4>)
 8003418:	4313      	orrs	r3, r2
 800341a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800341c:	f7fe fb8e 	bl	8001b3c <HAL_GetTick>
 8003420:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003422:	e00a      	b.n	800343a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003424:	f7fe fb8a 	bl	8001b3c <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003432:	4293      	cmp	r3, r2
 8003434:	d901      	bls.n	800343a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e053      	b.n	80034e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800343a:	4b2d      	ldr	r3, [pc, #180]	; (80034f0 <HAL_RCC_ClockConfig+0x1c4>)
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f003 020c 	and.w	r2, r3, #12
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	429a      	cmp	r2, r3
 800344a:	d1eb      	bne.n	8003424 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800344c:	4b27      	ldr	r3, [pc, #156]	; (80034ec <HAL_RCC_ClockConfig+0x1c0>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0307 	and.w	r3, r3, #7
 8003454:	683a      	ldr	r2, [r7, #0]
 8003456:	429a      	cmp	r2, r3
 8003458:	d210      	bcs.n	800347c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800345a:	4b24      	ldr	r3, [pc, #144]	; (80034ec <HAL_RCC_ClockConfig+0x1c0>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f023 0207 	bic.w	r2, r3, #7
 8003462:	4922      	ldr	r1, [pc, #136]	; (80034ec <HAL_RCC_ClockConfig+0x1c0>)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	4313      	orrs	r3, r2
 8003468:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800346a:	4b20      	ldr	r3, [pc, #128]	; (80034ec <HAL_RCC_ClockConfig+0x1c0>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0307 	and.w	r3, r3, #7
 8003472:	683a      	ldr	r2, [r7, #0]
 8003474:	429a      	cmp	r2, r3
 8003476:	d001      	beq.n	800347c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e032      	b.n	80034e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0304 	and.w	r3, r3, #4
 8003484:	2b00      	cmp	r3, #0
 8003486:	d008      	beq.n	800349a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003488:	4b19      	ldr	r3, [pc, #100]	; (80034f0 <HAL_RCC_ClockConfig+0x1c4>)
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	4916      	ldr	r1, [pc, #88]	; (80034f0 <HAL_RCC_ClockConfig+0x1c4>)
 8003496:	4313      	orrs	r3, r2
 8003498:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0308 	and.w	r3, r3, #8
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d009      	beq.n	80034ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80034a6:	4b12      	ldr	r3, [pc, #72]	; (80034f0 <HAL_RCC_ClockConfig+0x1c4>)
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	00db      	lsls	r3, r3, #3
 80034b4:	490e      	ldr	r1, [pc, #56]	; (80034f0 <HAL_RCC_ClockConfig+0x1c4>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80034ba:	f000 f821 	bl	8003500 <HAL_RCC_GetSysClockFreq>
 80034be:	4602      	mov	r2, r0
 80034c0:	4b0b      	ldr	r3, [pc, #44]	; (80034f0 <HAL_RCC_ClockConfig+0x1c4>)
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	091b      	lsrs	r3, r3, #4
 80034c6:	f003 030f 	and.w	r3, r3, #15
 80034ca:	490a      	ldr	r1, [pc, #40]	; (80034f4 <HAL_RCC_ClockConfig+0x1c8>)
 80034cc:	5ccb      	ldrb	r3, [r1, r3]
 80034ce:	fa22 f303 	lsr.w	r3, r2, r3
 80034d2:	4a09      	ldr	r2, [pc, #36]	; (80034f8 <HAL_RCC_ClockConfig+0x1cc>)
 80034d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80034d6:	4b09      	ldr	r3, [pc, #36]	; (80034fc <HAL_RCC_ClockConfig+0x1d0>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4618      	mov	r0, r3
 80034dc:	f7fe faec 	bl	8001ab8 <HAL_InitTick>

  return HAL_OK;
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3710      	adds	r7, #16
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	40022000 	.word	0x40022000
 80034f0:	40021000 	.word	0x40021000
 80034f4:	08005834 	.word	0x08005834
 80034f8:	20000004 	.word	0x20000004
 80034fc:	20000008 	.word	0x20000008

08003500 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003500:	b480      	push	{r7}
 8003502:	b087      	sub	sp, #28
 8003504:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003506:	2300      	movs	r3, #0
 8003508:	60fb      	str	r3, [r7, #12]
 800350a:	2300      	movs	r3, #0
 800350c:	60bb      	str	r3, [r7, #8]
 800350e:	2300      	movs	r3, #0
 8003510:	617b      	str	r3, [r7, #20]
 8003512:	2300      	movs	r3, #0
 8003514:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003516:	2300      	movs	r3, #0
 8003518:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800351a:	4b1e      	ldr	r3, [pc, #120]	; (8003594 <HAL_RCC_GetSysClockFreq+0x94>)
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f003 030c 	and.w	r3, r3, #12
 8003526:	2b04      	cmp	r3, #4
 8003528:	d002      	beq.n	8003530 <HAL_RCC_GetSysClockFreq+0x30>
 800352a:	2b08      	cmp	r3, #8
 800352c:	d003      	beq.n	8003536 <HAL_RCC_GetSysClockFreq+0x36>
 800352e:	e027      	b.n	8003580 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003530:	4b19      	ldr	r3, [pc, #100]	; (8003598 <HAL_RCC_GetSysClockFreq+0x98>)
 8003532:	613b      	str	r3, [r7, #16]
      break;
 8003534:	e027      	b.n	8003586 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	0c9b      	lsrs	r3, r3, #18
 800353a:	f003 030f 	and.w	r3, r3, #15
 800353e:	4a17      	ldr	r2, [pc, #92]	; (800359c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003540:	5cd3      	ldrb	r3, [r2, r3]
 8003542:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d010      	beq.n	8003570 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800354e:	4b11      	ldr	r3, [pc, #68]	; (8003594 <HAL_RCC_GetSysClockFreq+0x94>)
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	0c5b      	lsrs	r3, r3, #17
 8003554:	f003 0301 	and.w	r3, r3, #1
 8003558:	4a11      	ldr	r2, [pc, #68]	; (80035a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800355a:	5cd3      	ldrb	r3, [r2, r3]
 800355c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a0d      	ldr	r2, [pc, #52]	; (8003598 <HAL_RCC_GetSysClockFreq+0x98>)
 8003562:	fb03 f202 	mul.w	r2, r3, r2
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	fbb2 f3f3 	udiv	r3, r2, r3
 800356c:	617b      	str	r3, [r7, #20]
 800356e:	e004      	b.n	800357a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4a0c      	ldr	r2, [pc, #48]	; (80035a4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003574:	fb02 f303 	mul.w	r3, r2, r3
 8003578:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	613b      	str	r3, [r7, #16]
      break;
 800357e:	e002      	b.n	8003586 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003580:	4b05      	ldr	r3, [pc, #20]	; (8003598 <HAL_RCC_GetSysClockFreq+0x98>)
 8003582:	613b      	str	r3, [r7, #16]
      break;
 8003584:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003586:	693b      	ldr	r3, [r7, #16]
}
 8003588:	4618      	mov	r0, r3
 800358a:	371c      	adds	r7, #28
 800358c:	46bd      	mov	sp, r7
 800358e:	bc80      	pop	{r7}
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	40021000 	.word	0x40021000
 8003598:	007a1200 	.word	0x007a1200
 800359c:	0800584c 	.word	0x0800584c
 80035a0:	0800585c 	.word	0x0800585c
 80035a4:	003d0900 	.word	0x003d0900

080035a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035a8:	b480      	push	{r7}
 80035aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035ac:	4b02      	ldr	r3, [pc, #8]	; (80035b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80035ae:	681b      	ldr	r3, [r3, #0]
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bc80      	pop	{r7}
 80035b6:	4770      	bx	lr
 80035b8:	20000004 	.word	0x20000004

080035bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035c0:	f7ff fff2 	bl	80035a8 <HAL_RCC_GetHCLKFreq>
 80035c4:	4602      	mov	r2, r0
 80035c6:	4b05      	ldr	r3, [pc, #20]	; (80035dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	0a1b      	lsrs	r3, r3, #8
 80035cc:	f003 0307 	and.w	r3, r3, #7
 80035d0:	4903      	ldr	r1, [pc, #12]	; (80035e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035d2:	5ccb      	ldrb	r3, [r1, r3]
 80035d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035d8:	4618      	mov	r0, r3
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	40021000 	.word	0x40021000
 80035e0:	08005844 	.word	0x08005844

080035e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80035e8:	f7ff ffde 	bl	80035a8 <HAL_RCC_GetHCLKFreq>
 80035ec:	4602      	mov	r2, r0
 80035ee:	4b05      	ldr	r3, [pc, #20]	; (8003604 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	0adb      	lsrs	r3, r3, #11
 80035f4:	f003 0307 	and.w	r3, r3, #7
 80035f8:	4903      	ldr	r1, [pc, #12]	; (8003608 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035fa:	5ccb      	ldrb	r3, [r1, r3]
 80035fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003600:	4618      	mov	r0, r3
 8003602:	bd80      	pop	{r7, pc}
 8003604:	40021000 	.word	0x40021000
 8003608:	08005844 	.word	0x08005844

0800360c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800360c:	b480      	push	{r7}
 800360e:	b085      	sub	sp, #20
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003614:	4b0a      	ldr	r3, [pc, #40]	; (8003640 <RCC_Delay+0x34>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a0a      	ldr	r2, [pc, #40]	; (8003644 <RCC_Delay+0x38>)
 800361a:	fba2 2303 	umull	r2, r3, r2, r3
 800361e:	0a5b      	lsrs	r3, r3, #9
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	fb02 f303 	mul.w	r3, r2, r3
 8003626:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003628:	bf00      	nop
  }
  while (Delay --);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	1e5a      	subs	r2, r3, #1
 800362e:	60fa      	str	r2, [r7, #12]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d1f9      	bne.n	8003628 <RCC_Delay+0x1c>
}
 8003634:	bf00      	nop
 8003636:	bf00      	nop
 8003638:	3714      	adds	r7, #20
 800363a:	46bd      	mov	sp, r7
 800363c:	bc80      	pop	{r7}
 800363e:	4770      	bx	lr
 8003640:	20000004 	.word	0x20000004
 8003644:	10624dd3 	.word	0x10624dd3

08003648 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b086      	sub	sp, #24
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003650:	2300      	movs	r3, #0
 8003652:	613b      	str	r3, [r7, #16]
 8003654:	2300      	movs	r3, #0
 8003656:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0301 	and.w	r3, r3, #1
 8003660:	2b00      	cmp	r3, #0
 8003662:	d07d      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003664:	2300      	movs	r3, #0
 8003666:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003668:	4b4f      	ldr	r3, [pc, #316]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800366a:	69db      	ldr	r3, [r3, #28]
 800366c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d10d      	bne.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003674:	4b4c      	ldr	r3, [pc, #304]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003676:	69db      	ldr	r3, [r3, #28]
 8003678:	4a4b      	ldr	r2, [pc, #300]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800367a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800367e:	61d3      	str	r3, [r2, #28]
 8003680:	4b49      	ldr	r3, [pc, #292]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003682:	69db      	ldr	r3, [r3, #28]
 8003684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003688:	60bb      	str	r3, [r7, #8]
 800368a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800368c:	2301      	movs	r3, #1
 800368e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003690:	4b46      	ldr	r3, [pc, #280]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003698:	2b00      	cmp	r3, #0
 800369a:	d118      	bne.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800369c:	4b43      	ldr	r3, [pc, #268]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a42      	ldr	r2, [pc, #264]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036a8:	f7fe fa48 	bl	8001b3c <HAL_GetTick>
 80036ac:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ae:	e008      	b.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036b0:	f7fe fa44 	bl	8001b3c <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	2b64      	cmp	r3, #100	; 0x64
 80036bc:	d901      	bls.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e06d      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036c2:	4b3a      	ldr	r3, [pc, #232]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d0f0      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80036ce:	4b36      	ldr	r3, [pc, #216]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036d0:	6a1b      	ldr	r3, [r3, #32]
 80036d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036d6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d02e      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036e6:	68fa      	ldr	r2, [r7, #12]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d027      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80036ec:	4b2e      	ldr	r3, [pc, #184]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ee:	6a1b      	ldr	r3, [r3, #32]
 80036f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036f4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80036f6:	4b2e      	ldr	r3, [pc, #184]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80036f8:	2201      	movs	r2, #1
 80036fa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80036fc:	4b2c      	ldr	r3, [pc, #176]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80036fe:	2200      	movs	r2, #0
 8003700:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003702:	4a29      	ldr	r2, [pc, #164]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f003 0301 	and.w	r3, r3, #1
 800370e:	2b00      	cmp	r3, #0
 8003710:	d014      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003712:	f7fe fa13 	bl	8001b3c <HAL_GetTick>
 8003716:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003718:	e00a      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800371a:	f7fe fa0f 	bl	8001b3c <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	f241 3288 	movw	r2, #5000	; 0x1388
 8003728:	4293      	cmp	r3, r2
 800372a:	d901      	bls.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e036      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003730:	4b1d      	ldr	r3, [pc, #116]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003732:	6a1b      	ldr	r3, [r3, #32]
 8003734:	f003 0302 	and.w	r3, r3, #2
 8003738:	2b00      	cmp	r3, #0
 800373a:	d0ee      	beq.n	800371a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800373c:	4b1a      	ldr	r3, [pc, #104]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800373e:	6a1b      	ldr	r3, [r3, #32]
 8003740:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	4917      	ldr	r1, [pc, #92]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800374a:	4313      	orrs	r3, r2
 800374c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800374e:	7dfb      	ldrb	r3, [r7, #23]
 8003750:	2b01      	cmp	r3, #1
 8003752:	d105      	bne.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003754:	4b14      	ldr	r3, [pc, #80]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003756:	69db      	ldr	r3, [r3, #28]
 8003758:	4a13      	ldr	r2, [pc, #76]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800375a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800375e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0302 	and.w	r3, r3, #2
 8003768:	2b00      	cmp	r3, #0
 800376a:	d008      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800376c:	4b0e      	ldr	r3, [pc, #56]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	490b      	ldr	r1, [pc, #44]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800377a:	4313      	orrs	r3, r2
 800377c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0310 	and.w	r3, r3, #16
 8003786:	2b00      	cmp	r3, #0
 8003788:	d008      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800378a:	4b07      	ldr	r3, [pc, #28]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	695b      	ldr	r3, [r3, #20]
 8003796:	4904      	ldr	r1, [pc, #16]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003798:	4313      	orrs	r3, r2
 800379a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3718      	adds	r7, #24
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	40021000 	.word	0x40021000
 80037ac:	40007000 	.word	0x40007000
 80037b0:	42420440 	.word	0x42420440

080037b4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b088      	sub	sp, #32
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80037bc:	2300      	movs	r3, #0
 80037be:	617b      	str	r3, [r7, #20]
 80037c0:	2300      	movs	r3, #0
 80037c2:	61fb      	str	r3, [r7, #28]
 80037c4:	2300      	movs	r3, #0
 80037c6:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80037c8:	2300      	movs	r3, #0
 80037ca:	60fb      	str	r3, [r7, #12]
 80037cc:	2300      	movs	r3, #0
 80037ce:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	3b01      	subs	r3, #1
 80037d4:	2b0f      	cmp	r3, #15
 80037d6:	f200 80af 	bhi.w	8003938 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 80037da:	a201      	add	r2, pc, #4	; (adr r2, 80037e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 80037dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037e0:	080038b7 	.word	0x080038b7
 80037e4:	0800391d 	.word	0x0800391d
 80037e8:	08003939 	.word	0x08003939
 80037ec:	080038a7 	.word	0x080038a7
 80037f0:	08003939 	.word	0x08003939
 80037f4:	08003939 	.word	0x08003939
 80037f8:	08003939 	.word	0x08003939
 80037fc:	080038af 	.word	0x080038af
 8003800:	08003939 	.word	0x08003939
 8003804:	08003939 	.word	0x08003939
 8003808:	08003939 	.word	0x08003939
 800380c:	08003939 	.word	0x08003939
 8003810:	08003939 	.word	0x08003939
 8003814:	08003939 	.word	0x08003939
 8003818:	08003939 	.word	0x08003939
 800381c:	08003821 	.word	0x08003821
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8003820:	4b4a      	ldr	r3, [pc, #296]	; (800394c <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	60fb      	str	r3, [r7, #12]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003826:	4b49      	ldr	r3, [pc, #292]	; (800394c <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800382e:	2b00      	cmp	r3, #0
 8003830:	f000 8084 	beq.w	800393c <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	0c9b      	lsrs	r3, r3, #18
 8003838:	f003 030f 	and.w	r3, r3, #15
 800383c:	4a44      	ldr	r2, [pc, #272]	; (8003950 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 800383e:	5cd3      	ldrb	r3, [r2, r3]
 8003840:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003848:	2b00      	cmp	r3, #0
 800384a:	d015      	beq.n	8003878 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800384c:	4b3f      	ldr	r3, [pc, #252]	; (800394c <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	0c5b      	lsrs	r3, r3, #17
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	4a3f      	ldr	r2, [pc, #252]	; (8003954 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 8003858:	5cd3      	ldrb	r3, [r2, r3]
 800385a:	617b      	str	r3, [r7, #20]
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00d      	beq.n	8003882 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003866:	4a3c      	ldr	r2, [pc, #240]	; (8003958 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	fbb2 f2f3 	udiv	r2, r2, r3
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	fb02 f303 	mul.w	r3, r2, r3
 8003874:	61fb      	str	r3, [r7, #28]
 8003876:	e004      	b.n	8003882 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	4a38      	ldr	r2, [pc, #224]	; (800395c <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 800387c:	fb02 f303 	mul.w	r3, r2, r3
 8003880:	61fb      	str	r3, [r7, #28]
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003882:	4b32      	ldr	r3, [pc, #200]	; (800394c <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800388a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800388e:	d102      	bne.n	8003896 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	61bb      	str	r3, [r7, #24]
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8003894:	e052      	b.n	800393c <HAL_RCCEx_GetPeriphCLKFreq+0x188>
          frequency = (pllclk * 2) / 3;
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	005b      	lsls	r3, r3, #1
 800389a:	4a31      	ldr	r2, [pc, #196]	; (8003960 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 800389c:	fba2 2303 	umull	r2, r3, r2, r3
 80038a0:	085b      	lsrs	r3, r3, #1
 80038a2:	61bb      	str	r3, [r7, #24]
      break;
 80038a4:	e04a      	b.n	800393c <HAL_RCCEx_GetPeriphCLKFreq+0x188>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 80038a6:	f7ff fe2b 	bl	8003500 <HAL_RCC_GetSysClockFreq>
 80038aa:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80038ac:	e049      	b.n	8003942 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 80038ae:	f7ff fe27 	bl	8003500 <HAL_RCC_GetSysClockFreq>
 80038b2:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80038b4:	e045      	b.n	8003942 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 80038b6:	4b25      	ldr	r3, [pc, #148]	; (800394c <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	60fb      	str	r3, [r7, #12]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038c6:	d108      	bne.n	80038da <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d003      	beq.n	80038da <HAL_RCCEx_GetPeriphCLKFreq+0x126>
      {
        frequency = LSE_VALUE;
 80038d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038d6:	61bb      	str	r3, [r7, #24]
 80038d8:	e01f      	b.n	800391a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038e4:	d109      	bne.n	80038fa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80038e6:	4b19      	ldr	r3, [pc, #100]	; (800394c <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80038e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ea:	f003 0302 	and.w	r3, r3, #2
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d003      	beq.n	80038fa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSI_VALUE;
 80038f2:	f649 4340 	movw	r3, #40000	; 0x9c40
 80038f6:	61bb      	str	r3, [r7, #24]
 80038f8:	e00f      	b.n	800391a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003900:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003904:	d11c      	bne.n	8003940 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8003906:	4b11      	ldr	r3, [pc, #68]	; (800394c <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d016      	beq.n	8003940 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      {
        frequency = HSE_VALUE / 128U;
 8003912:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003916:	61bb      	str	r3, [r7, #24]
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8003918:	e012      	b.n	8003940 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 800391a:	e011      	b.n	8003940 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800391c:	f7ff fe62 	bl	80035e4 <HAL_RCC_GetPCLK2Freq>
 8003920:	4602      	mov	r2, r0
 8003922:	4b0a      	ldr	r3, [pc, #40]	; (800394c <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	0b9b      	lsrs	r3, r3, #14
 8003928:	f003 0303 	and.w	r3, r3, #3
 800392c:	3301      	adds	r3, #1
 800392e:	005b      	lsls	r3, r3, #1
 8003930:	fbb2 f3f3 	udiv	r3, r2, r3
 8003934:	61bb      	str	r3, [r7, #24]
      break;
 8003936:	e004      	b.n	8003942 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    default:
    {
      break;
 8003938:	bf00      	nop
 800393a:	e002      	b.n	8003942 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 800393c:	bf00      	nop
 800393e:	e000      	b.n	8003942 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 8003940:	bf00      	nop
    }
  }
  return (frequency);
 8003942:	69bb      	ldr	r3, [r7, #24]
}
 8003944:	4618      	mov	r0, r3
 8003946:	3720      	adds	r7, #32
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	40021000 	.word	0x40021000
 8003950:	08005860 	.word	0x08005860
 8003954:	08005870 	.word	0x08005870
 8003958:	007a1200 	.word	0x007a1200
 800395c:	003d0900 	.word	0x003d0900
 8003960:	aaaaaaab 	.word	0xaaaaaaab

08003964 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 800396c:	2300      	movs	r3, #0
 800396e:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d101      	bne.n	800397a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e07a      	b.n	8003a70 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	7c5b      	ldrb	r3, [r3, #17]
 800397e:	b2db      	uxtb	r3, r3
 8003980:	2b00      	cmp	r3, #0
 8003982:	d105      	bne.n	8003990 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f7fd fac0 	bl	8000f10 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2202      	movs	r2, #2
 8003994:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 fb78 	bl	800408c <HAL_RTC_WaitForSynchro>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d004      	beq.n	80039ac <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2204      	movs	r2, #4
 80039a6:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e061      	b.n	8003a70 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f000 fc31 	bl	8004214 <RTC_EnterInitMode>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d004      	beq.n	80039c2 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2204      	movs	r2, #4
 80039bc:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e056      	b.n	8003a70 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	685a      	ldr	r2, [r3, #4]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f022 0207 	bic.w	r2, r2, #7
 80039d0:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d005      	beq.n	80039e6 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80039da:	4b27      	ldr	r3, [pc, #156]	; (8003a78 <HAL_RTC_Init+0x114>)
 80039dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039de:	4a26      	ldr	r2, [pc, #152]	; (8003a78 <HAL_RTC_Init+0x114>)
 80039e0:	f023 0301 	bic.w	r3, r3, #1
 80039e4:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80039e6:	4b24      	ldr	r3, [pc, #144]	; (8003a78 <HAL_RTC_Init+0x114>)
 80039e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ea:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	4921      	ldr	r1, [pc, #132]	; (8003a78 <HAL_RTC_Init+0x114>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a00:	d003      	beq.n	8003a0a <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	60fb      	str	r3, [r7, #12]
 8003a08:	e00e      	b.n	8003a28 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8003a0a:	2001      	movs	r0, #1
 8003a0c:	f7ff fed2 	bl	80037b4 <HAL_RCCEx_GetPeriphCLKFreq>
 8003a10:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d104      	bne.n	8003a22 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2204      	movs	r2, #4
 8003a1c:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e026      	b.n	8003a70 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	3b01      	subs	r3, #1
 8003a26:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	0c1a      	lsrs	r2, r3, #16
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f002 020f 	and.w	r2, r2, #15
 8003a34:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	68fa      	ldr	r2, [r7, #12]
 8003a3c:	b292      	uxth	r2, r2
 8003a3e:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f000 fc0f 	bl	8004264 <RTC_ExitInitMode>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d004      	beq.n	8003a56 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2204      	movs	r2, #4
 8003a50:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e00c      	b.n	8003a70 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2201      	movs	r2, #1
 8003a66:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8003a6e:	2300      	movs	r3, #0
  }
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3710      	adds	r7, #16
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	40006c00 	.word	0x40006c00

08003a7c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003a7c:	b590      	push	{r4, r7, lr}
 8003a7e:	b087      	sub	sp, #28
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	617b      	str	r3, [r7, #20]
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d002      	beq.n	8003a9c <HAL_RTC_SetTime+0x20>
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d101      	bne.n	8003aa0 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e080      	b.n	8003ba2 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	7c1b      	ldrb	r3, [r3, #16]
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d101      	bne.n	8003aac <HAL_RTC_SetTime+0x30>
 8003aa8:	2302      	movs	r3, #2
 8003aaa:	e07a      	b.n	8003ba2 <HAL_RTC_SetTime+0x126>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2202      	movs	r2, #2
 8003ab6:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d113      	bne.n	8003ae6 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003ac8:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	785b      	ldrb	r3, [r3, #1]
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	011b      	lsls	r3, r3, #4
 8003ad6:	1a5b      	subs	r3, r3, r1
 8003ad8:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003ada:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8003adc:	68ba      	ldr	r2, [r7, #8]
 8003ade:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003ae0:	4413      	add	r3, r2
 8003ae2:	617b      	str	r3, [r7, #20]
 8003ae4:	e01e      	b.n	8003b24 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	4618      	mov	r0, r3
 8003aec:	f000 fbff 	bl	80042ee <RTC_Bcd2ToByte>
 8003af0:	4603      	mov	r3, r0
 8003af2:	461a      	mov	r2, r3
 8003af4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003af8:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	785b      	ldrb	r3, [r3, #1]
 8003b00:	4618      	mov	r0, r3
 8003b02:	f000 fbf4 	bl	80042ee <RTC_Bcd2ToByte>
 8003b06:	4603      	mov	r3, r0
 8003b08:	461a      	mov	r2, r3
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	011b      	lsls	r3, r3, #4
 8003b0e:	1a9b      	subs	r3, r3, r2
 8003b10:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003b12:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	789b      	ldrb	r3, [r3, #2]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f000 fbe8 	bl	80042ee <RTC_Bcd2ToByte>
 8003b1e:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003b20:	4423      	add	r3, r4
 8003b22:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003b24:	6979      	ldr	r1, [r7, #20]
 8003b26:	68f8      	ldr	r0, [r7, #12]
 8003b28:	f000 fb0d 	bl	8004146 <RTC_WriteTimeCounter>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d007      	beq.n	8003b42 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2204      	movs	r2, #4
 8003b36:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e02f      	b.n	8003ba2 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	685a      	ldr	r2, [r3, #4]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f022 0205 	bic.w	r2, r2, #5
 8003b50:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003b52:	68f8      	ldr	r0, [r7, #12]
 8003b54:	f000 fb1e 	bl	8004194 <RTC_ReadAlarmCounter>
 8003b58:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b60:	d018      	beq.n	8003b94 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8003b62:	693a      	ldr	r2, [r7, #16]
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d214      	bcs.n	8003b94 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8003b70:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003b74:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003b76:	6939      	ldr	r1, [r7, #16]
 8003b78:	68f8      	ldr	r0, [r7, #12]
 8003b7a:	f000 fb24 	bl	80041c6 <RTC_WriteAlarmCounter>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d007      	beq.n	8003b94 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2204      	movs	r2, #4
 8003b88:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e006      	b.n	8003ba2 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2201      	movs	r2, #1
 8003b98:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
  }
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	371c      	adds	r7, #28
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd90      	pop	{r4, r7, pc}
	...

08003bac <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b088      	sub	sp, #32
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	61bb      	str	r3, [r7, #24]
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	61fb      	str	r3, [r7, #28]
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	617b      	str	r3, [r7, #20]
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d002      	beq.n	8003bd4 <HAL_RTC_GetTime+0x28>
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d101      	bne.n	8003bd8 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e0b5      	b.n	8003d44 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	f003 0304 	and.w	r3, r3, #4
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e0ac      	b.n	8003d44 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8003bea:	68f8      	ldr	r0, [r7, #12]
 8003bec:	f000 fa7b 	bl	80040e6 <RTC_ReadTimeCounter>
 8003bf0:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	4a55      	ldr	r2, [pc, #340]	; (8003d4c <HAL_RTC_GetTime+0x1a0>)
 8003bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bfa:	0adb      	lsrs	r3, r3, #11
 8003bfc:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8003bfe:	69ba      	ldr	r2, [r7, #24]
 8003c00:	4b52      	ldr	r3, [pc, #328]	; (8003d4c <HAL_RTC_GetTime+0x1a0>)
 8003c02:	fba3 1302 	umull	r1, r3, r3, r2
 8003c06:	0adb      	lsrs	r3, r3, #11
 8003c08:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8003c0c:	fb01 f303 	mul.w	r3, r1, r3
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	4a4f      	ldr	r2, [pc, #316]	; (8003d50 <HAL_RTC_GetTime+0x1a4>)
 8003c14:	fba2 2303 	umull	r2, r3, r2, r3
 8003c18:	095b      	lsrs	r3, r3, #5
 8003c1a:	b2da      	uxtb	r2, r3
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	4a4a      	ldr	r2, [pc, #296]	; (8003d4c <HAL_RTC_GetTime+0x1a0>)
 8003c24:	fba2 1203 	umull	r1, r2, r2, r3
 8003c28:	0ad2      	lsrs	r2, r2, #11
 8003c2a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8003c2e:	fb01 f202 	mul.w	r2, r1, r2
 8003c32:	1a9a      	subs	r2, r3, r2
 8003c34:	4b46      	ldr	r3, [pc, #280]	; (8003d50 <HAL_RTC_GetTime+0x1a4>)
 8003c36:	fba3 1302 	umull	r1, r3, r3, r2
 8003c3a:	0959      	lsrs	r1, r3, #5
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	011b      	lsls	r3, r3, #4
 8003c40:	1a5b      	subs	r3, r3, r1
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	1ad1      	subs	r1, r2, r3
 8003c46:	b2ca      	uxtb	r2, r1
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	2b17      	cmp	r3, #23
 8003c50:	d955      	bls.n	8003cfe <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	4a3f      	ldr	r2, [pc, #252]	; (8003d54 <HAL_RTC_GetTime+0x1a8>)
 8003c56:	fba2 2303 	umull	r2, r3, r2, r3
 8003c5a:	091b      	lsrs	r3, r3, #4
 8003c5c:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8003c5e:	6939      	ldr	r1, [r7, #16]
 8003c60:	4b3c      	ldr	r3, [pc, #240]	; (8003d54 <HAL_RTC_GetTime+0x1a8>)
 8003c62:	fba3 2301 	umull	r2, r3, r3, r1
 8003c66:	091a      	lsrs	r2, r3, #4
 8003c68:	4613      	mov	r3, r2
 8003c6a:	005b      	lsls	r3, r3, #1
 8003c6c:	4413      	add	r3, r2
 8003c6e:	00db      	lsls	r3, r3, #3
 8003c70:	1aca      	subs	r2, r1, r3
 8003c72:	b2d2      	uxtb	r2, r2
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003c78:	68f8      	ldr	r0, [r7, #12]
 8003c7a:	f000 fa8b 	bl	8004194 <RTC_ReadAlarmCounter>
 8003c7e:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c86:	d008      	beq.n	8003c9a <HAL_RTC_GetTime+0xee>
 8003c88:	69fa      	ldr	r2, [r7, #28]
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d904      	bls.n	8003c9a <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8003c90:	69fa      	ldr	r2, [r7, #28]
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	61fb      	str	r3, [r7, #28]
 8003c98:	e002      	b.n	8003ca0 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8003c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c9e:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	4a2d      	ldr	r2, [pc, #180]	; (8003d58 <HAL_RTC_GetTime+0x1ac>)
 8003ca4:	fb02 f303 	mul.w	r3, r2, r3
 8003ca8:	69ba      	ldr	r2, [r7, #24]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003cae:	69b9      	ldr	r1, [r7, #24]
 8003cb0:	68f8      	ldr	r0, [r7, #12]
 8003cb2:	f000 fa48 	bl	8004146 <RTC_WriteTimeCounter>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d001      	beq.n	8003cc0 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e041      	b.n	8003d44 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc6:	d00c      	beq.n	8003ce2 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8003cc8:	69fa      	ldr	r2, [r7, #28]
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	4413      	add	r3, r2
 8003cce:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003cd0:	69f9      	ldr	r1, [r7, #28]
 8003cd2:	68f8      	ldr	r0, [r7, #12]
 8003cd4:	f000 fa77 	bl	80041c6 <RTC_WriteAlarmCounter>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00a      	beq.n	8003cf4 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e030      	b.n	8003d44 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003ce2:	69f9      	ldr	r1, [r7, #28]
 8003ce4:	68f8      	ldr	r0, [r7, #12]
 8003ce6:	f000 fa6e 	bl	80041c6 <RTC_WriteAlarmCounter>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d001      	beq.n	8003cf4 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e027      	b.n	8003d44 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8003cf4:	6979      	ldr	r1, [r7, #20]
 8003cf6:	68f8      	ldr	r0, [r7, #12]
 8003cf8:	f000 fb16 	bl	8004328 <RTC_DateUpdate>
 8003cfc:	e003      	b.n	8003d06 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	b2da      	uxtb	r2, r3
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d01a      	beq.n	8003d42 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	4618      	mov	r0, r3
 8003d12:	f000 facf 	bl	80042b4 <RTC_ByteToBcd2>
 8003d16:	4603      	mov	r3, r0
 8003d18:	461a      	mov	r2, r3
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	785b      	ldrb	r3, [r3, #1]
 8003d22:	4618      	mov	r0, r3
 8003d24:	f000 fac6 	bl	80042b4 <RTC_ByteToBcd2>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	789b      	ldrb	r3, [r3, #2]
 8003d34:	4618      	mov	r0, r3
 8003d36:	f000 fabd 	bl	80042b4 <RTC_ByteToBcd2>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003d42:	2300      	movs	r3, #0
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3720      	adds	r7, #32
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	91a2b3c5 	.word	0x91a2b3c5
 8003d50:	88888889 	.word	0x88888889
 8003d54:	aaaaaaab 	.word	0xaaaaaaab
 8003d58:	00015180 	.word	0x00015180

08003d5c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b088      	sub	sp, #32
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	61fb      	str	r3, [r7, #28]
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	61bb      	str	r3, [r7, #24]
 8003d70:	2300      	movs	r3, #0
 8003d72:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d002      	beq.n	8003d80 <HAL_RTC_SetDate+0x24>
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d101      	bne.n	8003d84 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e097      	b.n	8003eb4 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	7c1b      	ldrb	r3, [r3, #16]
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d101      	bne.n	8003d90 <HAL_RTC_SetDate+0x34>
 8003d8c:	2302      	movs	r3, #2
 8003d8e:	e091      	b.n	8003eb4 <HAL_RTC_SetDate+0x158>
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2201      	movs	r2, #1
 8003d94:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2202      	movs	r2, #2
 8003d9a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d10c      	bne.n	8003dbc <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	78da      	ldrb	r2, [r3, #3]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	785a      	ldrb	r2, [r3, #1]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	789a      	ldrb	r2, [r3, #2]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	739a      	strb	r2, [r3, #14]
 8003dba:	e01a      	b.n	8003df2 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	78db      	ldrb	r3, [r3, #3]
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f000 fa94 	bl	80042ee <RTC_Bcd2ToByte>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	461a      	mov	r2, r3
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	785b      	ldrb	r3, [r3, #1]
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f000 fa8b 	bl	80042ee <RTC_Bcd2ToByte>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	461a      	mov	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	789b      	ldrb	r3, [r3, #2]
 8003de4:	4618      	mov	r0, r3
 8003de6:	f000 fa82 	bl	80042ee <RTC_Bcd2ToByte>
 8003dea:	4603      	mov	r3, r0
 8003dec:	461a      	mov	r2, r3
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	7bdb      	ldrb	r3, [r3, #15]
 8003df6:	4618      	mov	r0, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	7b59      	ldrb	r1, [r3, #13]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	7b9b      	ldrb	r3, [r3, #14]
 8003e00:	461a      	mov	r2, r3
 8003e02:	f000 fb6d 	bl	80044e0 <RTC_WeekDayNum>
 8003e06:	4603      	mov	r3, r0
 8003e08:	461a      	mov	r2, r3
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	7b1a      	ldrb	r2, [r3, #12]
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8003e16:	68f8      	ldr	r0, [r7, #12]
 8003e18:	f000 f965 	bl	80040e6 <RTC_ReadTimeCounter>
 8003e1c:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	4a26      	ldr	r2, [pc, #152]	; (8003ebc <HAL_RTC_SetDate+0x160>)
 8003e22:	fba2 2303 	umull	r2, r3, r2, r3
 8003e26:	0adb      	lsrs	r3, r3, #11
 8003e28:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	2b18      	cmp	r3, #24
 8003e2e:	d93a      	bls.n	8003ea6 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	4a23      	ldr	r2, [pc, #140]	; (8003ec0 <HAL_RTC_SetDate+0x164>)
 8003e34:	fba2 2303 	umull	r2, r3, r2, r3
 8003e38:	091b      	lsrs	r3, r3, #4
 8003e3a:	4a22      	ldr	r2, [pc, #136]	; (8003ec4 <HAL_RTC_SetDate+0x168>)
 8003e3c:	fb02 f303 	mul.w	r3, r2, r3
 8003e40:	69fa      	ldr	r2, [r7, #28]
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003e46:	69f9      	ldr	r1, [r7, #28]
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	f000 f97c 	bl	8004146 <RTC_WriteTimeCounter>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d007      	beq.n	8003e64 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2204      	movs	r2, #4
 8003e58:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e027      	b.n	8003eb4 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003e64:	68f8      	ldr	r0, [r7, #12]
 8003e66:	f000 f995 	bl	8004194 <RTC_ReadAlarmCounter>
 8003e6a:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e72:	d018      	beq.n	8003ea6 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8003e74:	69ba      	ldr	r2, [r7, #24]
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d214      	bcs.n	8003ea6 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8003e82:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003e86:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003e88:	69b9      	ldr	r1, [r7, #24]
 8003e8a:	68f8      	ldr	r0, [r7, #12]
 8003e8c:	f000 f99b 	bl	80041c6 <RTC_WriteAlarmCounter>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d007      	beq.n	8003ea6 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2204      	movs	r2, #4
 8003e9a:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e006      	b.n	8003eb4 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003eb2:	2300      	movs	r3, #0
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3720      	adds	r7, #32
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	91a2b3c5 	.word	0x91a2b3c5
 8003ec0:	aaaaaaab 	.word	0xaaaaaaab
 8003ec4:	00015180 	.word	0x00015180

08003ec8 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003ec8:	b590      	push	{r4, r7, lr}
 8003eca:	b089      	sub	sp, #36	; 0x24
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 8003ed8:	f107 0314 	add.w	r3, r7, #20
 8003edc:	2100      	movs	r1, #0
 8003ede:	460a      	mov	r2, r1
 8003ee0:	801a      	strh	r2, [r3, #0]
 8003ee2:	460a      	mov	r2, r1
 8003ee4:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d002      	beq.n	8003ef2 <HAL_RTC_SetAlarm_IT+0x2a>
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d101      	bne.n	8003ef6 <HAL_RTC_SetAlarm_IT+0x2e>
  {
    return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e099      	b.n	800402a <HAL_RTC_SetAlarm_IT+0x162>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	7c1b      	ldrb	r3, [r3, #16]
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d101      	bne.n	8003f02 <HAL_RTC_SetAlarm_IT+0x3a>
 8003efe:	2302      	movs	r3, #2
 8003f00:	e093      	b.n	800402a <HAL_RTC_SetAlarm_IT+0x162>
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2201      	movs	r2, #1
 8003f06:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2202      	movs	r2, #2
 8003f0c:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8003f0e:	f107 0314 	add.w	r3, r7, #20
 8003f12:	2200      	movs	r2, #0
 8003f14:	4619      	mov	r1, r3
 8003f16:	68f8      	ldr	r0, [r7, #12]
 8003f18:	f7ff fe48 	bl	8003bac <HAL_RTC_GetTime>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d001      	beq.n	8003f26 <HAL_RTC_SetAlarm_IT+0x5e>
  {
    return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e081      	b.n	800402a <HAL_RTC_SetAlarm_IT+0x162>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8003f26:	7d3b      	ldrb	r3, [r7, #20]
 8003f28:	461a      	mov	r2, r3
 8003f2a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003f2e:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 8003f32:	7d7b      	ldrb	r3, [r7, #21]
 8003f34:	4619      	mov	r1, r3
 8003f36:	460b      	mov	r3, r1
 8003f38:	011b      	lsls	r3, r3, #4
 8003f3a:	1a5b      	subs	r3, r3, r1
 8003f3c:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8003f3e:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 8003f40:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8003f42:	4413      	add	r3, r2
 8003f44:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d113      	bne.n	8003f74 <HAL_RTC_SetAlarm_IT+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	461a      	mov	r2, r3
 8003f52:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003f56:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	785b      	ldrb	r3, [r3, #1]
 8003f5e:	4619      	mov	r1, r3
 8003f60:	460b      	mov	r3, r1
 8003f62:	011b      	lsls	r3, r3, #4
 8003f64:	1a5b      	subs	r3, r3, r1
 8003f66:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8003f68:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 8003f6a:	68ba      	ldr	r2, [r7, #8]
 8003f6c:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8003f6e:	4413      	add	r3, r2
 8003f70:	61fb      	str	r3, [r7, #28]
 8003f72:	e01e      	b.n	8003fb2 <HAL_RTC_SetAlarm_IT+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f000 f9b8 	bl	80042ee <RTC_Bcd2ToByte>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	461a      	mov	r2, r3
 8003f82:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003f86:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	785b      	ldrb	r3, [r3, #1]
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f000 f9ad 	bl	80042ee <RTC_Bcd2ToByte>
 8003f94:	4603      	mov	r3, r0
 8003f96:	461a      	mov	r2, r3
 8003f98:	4613      	mov	r3, r2
 8003f9a:	011b      	lsls	r3, r3, #4
 8003f9c:	1a9b      	subs	r3, r3, r2
 8003f9e:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8003fa0:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	789b      	ldrb	r3, [r3, #2]
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f000 f9a1 	bl	80042ee <RTC_Bcd2ToByte>
 8003fac:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8003fae:	4423      	add	r3, r4
 8003fb0:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 8003fb2:	69fa      	ldr	r2, [r7, #28]
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d205      	bcs.n	8003fc6 <HAL_RTC_SetAlarm_IT+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8003fc0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003fc4:	61fb      	str	r3, [r7, #28]
  }

  /* Write alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003fc6:	69f9      	ldr	r1, [r7, #28]
 8003fc8:	68f8      	ldr	r0, [r7, #12]
 8003fca:	f000 f8fc 	bl	80041c6 <RTC_WriteAlarmCounter>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d007      	beq.n	8003fe4 <HAL_RTC_SetAlarm_IT+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2204      	movs	r2, #4
 8003fd8:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e022      	b.n	800402a <HAL_RTC_SetAlarm_IT+0x162>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	685a      	ldr	r2, [r3, #4]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f022 0202 	bic.w	r2, r2, #2
 8003ff2:	605a      	str	r2, [r3, #4]

    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f042 0202 	orr.w	r2, r2, #2
 8004002:	601a      	str	r2, [r3, #0]

    /* RTC Alarm Interrupt Configuration: EXTI configuration */
    __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004004:	4b0b      	ldr	r3, [pc, #44]	; (8004034 <HAL_RTC_SetAlarm_IT+0x16c>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a0a      	ldr	r2, [pc, #40]	; (8004034 <HAL_RTC_SetAlarm_IT+0x16c>)
 800400a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800400e:	6013      	str	r3, [r2, #0]

    __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8004010:	4b08      	ldr	r3, [pc, #32]	; (8004034 <HAL_RTC_SetAlarm_IT+0x16c>)
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	4a07      	ldr	r2, [pc, #28]	; (8004034 <HAL_RTC_SetAlarm_IT+0x16c>)
 8004016:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800401a:	6093      	str	r3, [r2, #8]

    hrtc->State = HAL_RTC_STATE_READY;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2201      	movs	r2, #1
 8004020:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2200      	movs	r2, #0
 8004026:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8004028:	2300      	movs	r3, #0
  }
}
 800402a:	4618      	mov	r0, r3
 800402c:	3724      	adds	r7, #36	; 0x24
 800402e:	46bd      	mov	sp, r7
 8004030:	bd90      	pop	{r4, r7, pc}
 8004032:	bf00      	nop
 8004034:	40010400 	.word	0x40010400

08004038 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0302 	and.w	r3, r3, #2
 800404a:	2b00      	cmp	r3, #0
 800404c:	d011      	beq.n	8004072 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	f003 0302 	and.w	r3, r3, #2
 8004058:	2b00      	cmp	r3, #0
 800405a:	d00a      	beq.n	8004072 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f7fc fddd 	bl	8000c1c <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	685a      	ldr	r2, [r3, #4]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f022 0202 	bic.w	r2, r2, #2
 8004070:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8004072:	4b05      	ldr	r3, [pc, #20]	; (8004088 <HAL_RTC_AlarmIRQHandler+0x50>)
 8004074:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004078:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2201      	movs	r2, #1
 800407e:	745a      	strb	r2, [r3, #17]
}
 8004080:	bf00      	nop
 8004082:	3708      	adds	r7, #8
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}
 8004088:	40010400 	.word	0x40010400

0800408c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004094:	2300      	movs	r3, #0
 8004096:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d101      	bne.n	80040a2 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e01d      	b.n	80040de <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	685a      	ldr	r2, [r3, #4]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f022 0208 	bic.w	r2, r2, #8
 80040b0:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80040b2:	f7fd fd43 	bl	8001b3c <HAL_GetTick>
 80040b6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80040b8:	e009      	b.n	80040ce <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80040ba:	f7fd fd3f 	bl	8001b3c <HAL_GetTick>
 80040be:	4602      	mov	r2, r0
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80040c8:	d901      	bls.n	80040ce <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e007      	b.n	80040de <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f003 0308 	and.w	r3, r3, #8
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d0ee      	beq.n	80040ba <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3710      	adds	r7, #16
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}

080040e6 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80040e6:	b480      	push	{r7}
 80040e8:	b087      	sub	sp, #28
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80040ee:	2300      	movs	r3, #0
 80040f0:	827b      	strh	r3, [r7, #18]
 80040f2:	2300      	movs	r3, #0
 80040f4:	823b      	strh	r3, [r7, #16]
 80040f6:	2300      	movs	r3, #0
 80040f8:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80040fa:	2300      	movs	r3, #0
 80040fc:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	699b      	ldr	r3, [r3, #24]
 8004104:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	69db      	ldr	r3, [r3, #28]
 800410c:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	699b      	ldr	r3, [r3, #24]
 8004114:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8004116:	8a7a      	ldrh	r2, [r7, #18]
 8004118:	8a3b      	ldrh	r3, [r7, #16]
 800411a:	429a      	cmp	r2, r3
 800411c:	d008      	beq.n	8004130 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 800411e:	8a3b      	ldrh	r3, [r7, #16]
 8004120:	041a      	lsls	r2, r3, #16
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	69db      	ldr	r3, [r3, #28]
 8004128:	b29b      	uxth	r3, r3
 800412a:	4313      	orrs	r3, r2
 800412c:	617b      	str	r3, [r7, #20]
 800412e:	e004      	b.n	800413a <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8004130:	8a7b      	ldrh	r3, [r7, #18]
 8004132:	041a      	lsls	r2, r3, #16
 8004134:	89fb      	ldrh	r3, [r7, #14]
 8004136:	4313      	orrs	r3, r2
 8004138:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 800413a:	697b      	ldr	r3, [r7, #20]
}
 800413c:	4618      	mov	r0, r3
 800413e:	371c      	adds	r7, #28
 8004140:	46bd      	mov	sp, r7
 8004142:	bc80      	pop	{r7}
 8004144:	4770      	bx	lr

08004146 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8004146:	b580      	push	{r7, lr}
 8004148:	b084      	sub	sp, #16
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
 800414e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004150:	2300      	movs	r3, #0
 8004152:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f000 f85d 	bl	8004214 <RTC_EnterInitMode>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d002      	beq.n	8004166 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	73fb      	strb	r3, [r7, #15]
 8004164:	e011      	b.n	800418a <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	683a      	ldr	r2, [r7, #0]
 800416c:	0c12      	lsrs	r2, r2, #16
 800416e:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	683a      	ldr	r2, [r7, #0]
 8004176:	b292      	uxth	r2, r2
 8004178:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f000 f872 	bl	8004264 <RTC_ExitInitMode>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d001      	beq.n	800418a <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800418a:	7bfb      	ldrb	r3, [r7, #15]
}
 800418c:	4618      	mov	r0, r3
 800418e:	3710      	adds	r7, #16
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8004194:	b480      	push	{r7}
 8004196:	b085      	sub	sp, #20
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 800419c:	2300      	movs	r3, #0
 800419e:	81fb      	strh	r3, [r7, #14]
 80041a0:	2300      	movs	r3, #0
 80041a2:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	6a1b      	ldr	r3, [r3, #32]
 80041aa:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b2:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 80041b4:	89fb      	ldrh	r3, [r7, #14]
 80041b6:	041a      	lsls	r2, r3, #16
 80041b8:	89bb      	ldrh	r3, [r7, #12]
 80041ba:	4313      	orrs	r3, r2
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3714      	adds	r7, #20
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bc80      	pop	{r7}
 80041c4:	4770      	bx	lr

080041c6 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 80041c6:	b580      	push	{r7, lr}
 80041c8:	b084      	sub	sp, #16
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
 80041ce:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041d0:	2300      	movs	r3, #0
 80041d2:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f000 f81d 	bl	8004214 <RTC_EnterInitMode>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d002      	beq.n	80041e6 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	73fb      	strb	r3, [r7, #15]
 80041e4:	e011      	b.n	800420a <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	683a      	ldr	r2, [r7, #0]
 80041ec:	0c12      	lsrs	r2, r2, #16
 80041ee:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	683a      	ldr	r2, [r7, #0]
 80041f6:	b292      	uxth	r2, r2
 80041f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 f832 	bl	8004264 <RTC_ExitInitMode>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d001      	beq.n	800420a <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800420a:	7bfb      	ldrb	r3, [r7, #15]
}
 800420c:	4618      	mov	r0, r3
 800420e:	3710      	adds	r7, #16
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800421c:	2300      	movs	r3, #0
 800421e:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8004220:	f7fd fc8c 	bl	8001b3c <HAL_GetTick>
 8004224:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004226:	e009      	b.n	800423c <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004228:	f7fd fc88 	bl	8001b3c <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004236:	d901      	bls.n	800423c <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	e00f      	b.n	800425c <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f003 0320 	and.w	r3, r3, #32
 8004246:	2b00      	cmp	r3, #0
 8004248:	d0ee      	beq.n	8004228 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	685a      	ldr	r2, [r3, #4]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f042 0210 	orr.w	r2, r2, #16
 8004258:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800425a:	2300      	movs	r3, #0
}
 800425c:	4618      	mov	r0, r3
 800425e:	3710      	adds	r7, #16
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800426c:	2300      	movs	r3, #0
 800426e:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	685a      	ldr	r2, [r3, #4]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f022 0210 	bic.w	r2, r2, #16
 800427e:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004280:	f7fd fc5c 	bl	8001b3c <HAL_GetTick>
 8004284:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004286:	e009      	b.n	800429c <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004288:	f7fd fc58 	bl	8001b3c <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004296:	d901      	bls.n	800429c <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	e007      	b.n	80042ac <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	f003 0320 	and.w	r3, r3, #32
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d0ee      	beq.n	8004288 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3710      	adds	r7, #16
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b085      	sub	sp, #20
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	4603      	mov	r3, r0
 80042bc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80042be:	2300      	movs	r3, #0
 80042c0:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 80042c2:	e005      	b.n	80042d0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	3301      	adds	r3, #1
 80042c8:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80042ca:	79fb      	ldrb	r3, [r7, #7]
 80042cc:	3b0a      	subs	r3, #10
 80042ce:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 80042d0:	79fb      	ldrb	r3, [r7, #7]
 80042d2:	2b09      	cmp	r3, #9
 80042d4:	d8f6      	bhi.n	80042c4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	011b      	lsls	r3, r3, #4
 80042dc:	b2da      	uxtb	r2, r3
 80042de:	79fb      	ldrb	r3, [r7, #7]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	b2db      	uxtb	r3, r3
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3714      	adds	r7, #20
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bc80      	pop	{r7}
 80042ec:	4770      	bx	lr

080042ee <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80042ee:	b480      	push	{r7}
 80042f0:	b085      	sub	sp, #20
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	4603      	mov	r3, r0
 80042f6:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80042f8:	2300      	movs	r3, #0
 80042fa:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80042fc:	79fb      	ldrb	r3, [r7, #7]
 80042fe:	091b      	lsrs	r3, r3, #4
 8004300:	b2db      	uxtb	r3, r3
 8004302:	461a      	mov	r2, r3
 8004304:	4613      	mov	r3, r2
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	4413      	add	r3, r2
 800430a:	005b      	lsls	r3, r3, #1
 800430c:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800430e:	79fb      	ldrb	r3, [r7, #7]
 8004310:	f003 030f 	and.w	r3, r3, #15
 8004314:	b2da      	uxtb	r2, r3
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	b2db      	uxtb	r3, r3
 800431a:	4413      	add	r3, r2
 800431c:	b2db      	uxtb	r3, r3
}
 800431e:	4618      	mov	r0, r3
 8004320:	3714      	adds	r7, #20
 8004322:	46bd      	mov	sp, r7
 8004324:	bc80      	pop	{r7}
 8004326:	4770      	bx	lr

08004328 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b086      	sub	sp, #24
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8004332:	2300      	movs	r3, #0
 8004334:	617b      	str	r3, [r7, #20]
 8004336:	2300      	movs	r3, #0
 8004338:	613b      	str	r3, [r7, #16]
 800433a:	2300      	movs	r3, #0
 800433c:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 800433e:	2300      	movs	r3, #0
 8004340:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	7bdb      	ldrb	r3, [r3, #15]
 8004346:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	7b5b      	ldrb	r3, [r3, #13]
 800434c:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	7b9b      	ldrb	r3, [r3, #14]
 8004352:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8004354:	2300      	movs	r3, #0
 8004356:	60bb      	str	r3, [r7, #8]
 8004358:	e06f      	b.n	800443a <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	2b01      	cmp	r3, #1
 800435e:	d011      	beq.n	8004384 <RTC_DateUpdate+0x5c>
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	2b03      	cmp	r3, #3
 8004364:	d00e      	beq.n	8004384 <RTC_DateUpdate+0x5c>
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	2b05      	cmp	r3, #5
 800436a:	d00b      	beq.n	8004384 <RTC_DateUpdate+0x5c>
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	2b07      	cmp	r3, #7
 8004370:	d008      	beq.n	8004384 <RTC_DateUpdate+0x5c>
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	2b08      	cmp	r3, #8
 8004376:	d005      	beq.n	8004384 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	2b0a      	cmp	r3, #10
 800437c:	d002      	beq.n	8004384 <RTC_DateUpdate+0x5c>
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	2b0c      	cmp	r3, #12
 8004382:	d117      	bne.n	80043b4 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2b1e      	cmp	r3, #30
 8004388:	d803      	bhi.n	8004392 <RTC_DateUpdate+0x6a>
      {
        day++;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	3301      	adds	r3, #1
 800438e:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8004390:	e050      	b.n	8004434 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	2b0c      	cmp	r3, #12
 8004396:	d005      	beq.n	80043a4 <RTC_DateUpdate+0x7c>
        {
          month++;
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	3301      	adds	r3, #1
 800439c:	613b      	str	r3, [r7, #16]
          day = 1U;
 800439e:	2301      	movs	r3, #1
 80043a0:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80043a2:	e047      	b.n	8004434 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 80043a4:	2301      	movs	r3, #1
 80043a6:	613b      	str	r3, [r7, #16]
          day = 1U;
 80043a8:	2301      	movs	r3, #1
 80043aa:	60fb      	str	r3, [r7, #12]
          year++;
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	3301      	adds	r3, #1
 80043b0:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 80043b2:	e03f      	b.n	8004434 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	2b04      	cmp	r3, #4
 80043b8:	d008      	beq.n	80043cc <RTC_DateUpdate+0xa4>
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	2b06      	cmp	r3, #6
 80043be:	d005      	beq.n	80043cc <RTC_DateUpdate+0xa4>
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	2b09      	cmp	r3, #9
 80043c4:	d002      	beq.n	80043cc <RTC_DateUpdate+0xa4>
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	2b0b      	cmp	r3, #11
 80043ca:	d10c      	bne.n	80043e6 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2b1d      	cmp	r3, #29
 80043d0:	d803      	bhi.n	80043da <RTC_DateUpdate+0xb2>
      {
        day++;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	3301      	adds	r3, #1
 80043d6:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80043d8:	e02c      	b.n	8004434 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	3301      	adds	r3, #1
 80043de:	613b      	str	r3, [r7, #16]
        day = 1U;
 80043e0:	2301      	movs	r3, #1
 80043e2:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80043e4:	e026      	b.n	8004434 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	2b02      	cmp	r3, #2
 80043ea:	d123      	bne.n	8004434 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2b1b      	cmp	r3, #27
 80043f0:	d803      	bhi.n	80043fa <RTC_DateUpdate+0xd2>
      {
        day++;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	3301      	adds	r3, #1
 80043f6:	60fb      	str	r3, [r7, #12]
 80043f8:	e01c      	b.n	8004434 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2b1c      	cmp	r3, #28
 80043fe:	d111      	bne.n	8004424 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	b29b      	uxth	r3, r3
 8004404:	4618      	mov	r0, r3
 8004406:	f000 f839 	bl	800447c <RTC_IsLeapYear>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d003      	beq.n	8004418 <RTC_DateUpdate+0xf0>
        {
          day++;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	3301      	adds	r3, #1
 8004414:	60fb      	str	r3, [r7, #12]
 8004416:	e00d      	b.n	8004434 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	3301      	adds	r3, #1
 800441c:	613b      	str	r3, [r7, #16]
          day = 1U;
 800441e:	2301      	movs	r3, #1
 8004420:	60fb      	str	r3, [r7, #12]
 8004422:	e007      	b.n	8004434 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2b1d      	cmp	r3, #29
 8004428:	d104      	bne.n	8004434 <RTC_DateUpdate+0x10c>
      {
        month++;
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	3301      	adds	r3, #1
 800442e:	613b      	str	r3, [r7, #16]
        day = 1U;
 8004430:	2301      	movs	r3, #1
 8004432:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	3301      	adds	r3, #1
 8004438:	60bb      	str	r3, [r7, #8]
 800443a:	68ba      	ldr	r2, [r7, #8]
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	429a      	cmp	r2, r3
 8004440:	d38b      	bcc.n	800435a <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	b2da      	uxtb	r2, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	b2da      	uxtb	r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	b2da      	uxtb	r2, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	b2db      	uxtb	r3, r3
 800445e:	68fa      	ldr	r2, [r7, #12]
 8004460:	b2d2      	uxtb	r2, r2
 8004462:	4619      	mov	r1, r3
 8004464:	6978      	ldr	r0, [r7, #20]
 8004466:	f000 f83b 	bl	80044e0 <RTC_WeekDayNum>
 800446a:	4603      	mov	r3, r0
 800446c:	461a      	mov	r2, r3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	731a      	strb	r2, [r3, #12]
}
 8004472:	bf00      	nop
 8004474:	3718      	adds	r7, #24
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
	...

0800447c <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	4603      	mov	r3, r0
 8004484:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8004486:	88fb      	ldrh	r3, [r7, #6]
 8004488:	f003 0303 	and.w	r3, r3, #3
 800448c:	b29b      	uxth	r3, r3
 800448e:	2b00      	cmp	r3, #0
 8004490:	d001      	beq.n	8004496 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8004492:	2300      	movs	r3, #0
 8004494:	e01d      	b.n	80044d2 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8004496:	88fb      	ldrh	r3, [r7, #6]
 8004498:	4a10      	ldr	r2, [pc, #64]	; (80044dc <RTC_IsLeapYear+0x60>)
 800449a:	fba2 1203 	umull	r1, r2, r2, r3
 800449e:	0952      	lsrs	r2, r2, #5
 80044a0:	2164      	movs	r1, #100	; 0x64
 80044a2:	fb01 f202 	mul.w	r2, r1, r2
 80044a6:	1a9b      	subs	r3, r3, r2
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d001      	beq.n	80044b2 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e00f      	b.n	80044d2 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 80044b2:	88fb      	ldrh	r3, [r7, #6]
 80044b4:	4a09      	ldr	r2, [pc, #36]	; (80044dc <RTC_IsLeapYear+0x60>)
 80044b6:	fba2 1203 	umull	r1, r2, r2, r3
 80044ba:	09d2      	lsrs	r2, r2, #7
 80044bc:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80044c0:	fb01 f202 	mul.w	r2, r1, r2
 80044c4:	1a9b      	subs	r3, r3, r2
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d101      	bne.n	80044d0 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e000      	b.n	80044d2 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 80044d0:	2300      	movs	r3, #0
  }
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	370c      	adds	r7, #12
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bc80      	pop	{r7}
 80044da:	4770      	bx	lr
 80044dc:	51eb851f 	.word	0x51eb851f

080044e0 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b085      	sub	sp, #20
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	460b      	mov	r3, r1
 80044ea:	70fb      	strb	r3, [r7, #3]
 80044ec:	4613      	mov	r3, r2
 80044ee:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 80044f0:	2300      	movs	r3, #0
 80044f2:	60bb      	str	r3, [r7, #8]
 80044f4:	2300      	movs	r3, #0
 80044f6:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80044fe:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8004500:	78fb      	ldrb	r3, [r7, #3]
 8004502:	2b02      	cmp	r3, #2
 8004504:	d82d      	bhi.n	8004562 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8004506:	78fa      	ldrb	r2, [r7, #3]
 8004508:	4613      	mov	r3, r2
 800450a:	005b      	lsls	r3, r3, #1
 800450c:	4413      	add	r3, r2
 800450e:	00db      	lsls	r3, r3, #3
 8004510:	1a9b      	subs	r3, r3, r2
 8004512:	4a2c      	ldr	r2, [pc, #176]	; (80045c4 <RTC_WeekDayNum+0xe4>)
 8004514:	fba2 2303 	umull	r2, r3, r2, r3
 8004518:	085a      	lsrs	r2, r3, #1
 800451a:	78bb      	ldrb	r3, [r7, #2]
 800451c:	441a      	add	r2, r3
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	441a      	add	r2, r3
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	3b01      	subs	r3, #1
 8004526:	089b      	lsrs	r3, r3, #2
 8004528:	441a      	add	r2, r3
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	3b01      	subs	r3, #1
 800452e:	4926      	ldr	r1, [pc, #152]	; (80045c8 <RTC_WeekDayNum+0xe8>)
 8004530:	fba1 1303 	umull	r1, r3, r1, r3
 8004534:	095b      	lsrs	r3, r3, #5
 8004536:	1ad2      	subs	r2, r2, r3
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	3b01      	subs	r3, #1
 800453c:	4922      	ldr	r1, [pc, #136]	; (80045c8 <RTC_WeekDayNum+0xe8>)
 800453e:	fba1 1303 	umull	r1, r3, r1, r3
 8004542:	09db      	lsrs	r3, r3, #7
 8004544:	4413      	add	r3, r2
 8004546:	1d1a      	adds	r2, r3, #4
 8004548:	4b20      	ldr	r3, [pc, #128]	; (80045cc <RTC_WeekDayNum+0xec>)
 800454a:	fba3 1302 	umull	r1, r3, r3, r2
 800454e:	1ad1      	subs	r1, r2, r3
 8004550:	0849      	lsrs	r1, r1, #1
 8004552:	440b      	add	r3, r1
 8004554:	0899      	lsrs	r1, r3, #2
 8004556:	460b      	mov	r3, r1
 8004558:	00db      	lsls	r3, r3, #3
 800455a:	1a5b      	subs	r3, r3, r1
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	60fb      	str	r3, [r7, #12]
 8004560:	e029      	b.n	80045b6 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8004562:	78fa      	ldrb	r2, [r7, #3]
 8004564:	4613      	mov	r3, r2
 8004566:	005b      	lsls	r3, r3, #1
 8004568:	4413      	add	r3, r2
 800456a:	00db      	lsls	r3, r3, #3
 800456c:	1a9b      	subs	r3, r3, r2
 800456e:	4a15      	ldr	r2, [pc, #84]	; (80045c4 <RTC_WeekDayNum+0xe4>)
 8004570:	fba2 2303 	umull	r2, r3, r2, r3
 8004574:	085a      	lsrs	r2, r3, #1
 8004576:	78bb      	ldrb	r3, [r7, #2]
 8004578:	441a      	add	r2, r3
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	441a      	add	r2, r3
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	089b      	lsrs	r3, r3, #2
 8004582:	441a      	add	r2, r3
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	4910      	ldr	r1, [pc, #64]	; (80045c8 <RTC_WeekDayNum+0xe8>)
 8004588:	fba1 1303 	umull	r1, r3, r1, r3
 800458c:	095b      	lsrs	r3, r3, #5
 800458e:	1ad2      	subs	r2, r2, r3
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	490d      	ldr	r1, [pc, #52]	; (80045c8 <RTC_WeekDayNum+0xe8>)
 8004594:	fba1 1303 	umull	r1, r3, r1, r3
 8004598:	09db      	lsrs	r3, r3, #7
 800459a:	4413      	add	r3, r2
 800459c:	1c9a      	adds	r2, r3, #2
 800459e:	4b0b      	ldr	r3, [pc, #44]	; (80045cc <RTC_WeekDayNum+0xec>)
 80045a0:	fba3 1302 	umull	r1, r3, r3, r2
 80045a4:	1ad1      	subs	r1, r2, r3
 80045a6:	0849      	lsrs	r1, r1, #1
 80045a8:	440b      	add	r3, r1
 80045aa:	0899      	lsrs	r1, r3, #2
 80045ac:	460b      	mov	r3, r1
 80045ae:	00db      	lsls	r3, r3, #3
 80045b0:	1a5b      	subs	r3, r3, r1
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	b2db      	uxtb	r3, r3
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3714      	adds	r7, #20
 80045be:	46bd      	mov	sp, r7
 80045c0:	bc80      	pop	{r7}
 80045c2:	4770      	bx	lr
 80045c4:	38e38e39 	.word	0x38e38e39
 80045c8:	51eb851f 	.word	0x51eb851f
 80045cc:	24924925 	.word	0x24924925

080045d0 <HAL_RTCEx_RTCIRQHandler>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0301 	and.w	r3, r3, #1
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d027      	beq.n	8004636 <HAL_RTCEx_RTCIRQHandler+0x66>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f003 0301 	and.w	r3, r3, #1
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d020      	beq.n	8004636 <HAL_RTCEx_RTCIRQHandler+0x66>
    {
      /* Check if Overrun occurred */
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f003 0304 	and.w	r3, r3, #4
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00b      	beq.n	800461a <HAL_RTCEx_RTCIRQHandler+0x4a>
      {
        /* Second error callback */
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 f824 	bl	8004650 <HAL_RTCEx_RTCEventErrorCallback>

        /* Clear flag Second */
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f06f 0204 	mvn.w	r2, #4
 8004610:	605a      	str	r2, [r3, #4]

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2204      	movs	r2, #4
 8004616:	745a      	strb	r2, [r3, #17]
 8004618:	e005      	b.n	8004626 <HAL_RTCEx_RTCIRQHandler+0x56>
      }
      else
      {
        /* Second callback */
        HAL_RTCEx_RTCEventCallback(hrtc);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 f80f 	bl	800463e <HAL_RTCEx_RTCEventCallback>

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	745a      	strb	r2, [r3, #17]
      }

      /* Clear flag Second */
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	685a      	ldr	r2, [r3, #4]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f022 0201 	bic.w	r2, r2, #1
 8004634:	605a      	str	r2, [r3, #4]
    }
  }
}
 8004636:	bf00      	nop
 8004638:	3708      	adds	r7, #8
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}

0800463e <HAL_RTCEx_RTCEventCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventCallback(RTC_HandleTypeDef *hrtc)
{
 800463e:	b480      	push	{r7}
 8004640:	b083      	sub	sp, #12
 8004642:	af00      	add	r7, sp, #0
 8004644:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventCallback could be implemented in the user file
   */
}
 8004646:	bf00      	nop
 8004648:	370c      	adds	r7, #12
 800464a:	46bd      	mov	sp, r7
 800464c:	bc80      	pop	{r7}
 800464e:	4770      	bx	lr

08004650 <HAL_RTCEx_RTCEventErrorCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventErrorCallback could be implemented in the user file
   */
}
 8004658:	bf00      	nop
 800465a:	370c      	adds	r7, #12
 800465c:	46bd      	mov	sp, r7
 800465e:	bc80      	pop	{r7}
 8004660:	4770      	bx	lr
	...

08004664 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register (depending devices).
  * @param  Data: Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8004664:	b480      	push	{r7}
 8004666:	b087      	sub	sp, #28
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8004670:	2300      	movs	r3, #0
 8004672:	617b      	str	r3, [r7, #20]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)BKP_BASE;
 8004674:	4b07      	ldr	r3, [pc, #28]	; (8004694 <HAL_RTCEx_BKUPWrite+0x30>)
 8004676:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	697a      	ldr	r2, [r7, #20]
 800467e:	4413      	add	r3, r2
 8004680:	617b      	str	r3, [r7, #20]

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	b292      	uxth	r2, r2
 8004688:	601a      	str	r2, [r3, #0]
}
 800468a:	bf00      	nop
 800468c:	371c      	adds	r7, #28
 800468e:	46bd      	mov	sp, r7
 8004690:	bc80      	pop	{r7}
 8004692:	4770      	bx	lr
 8004694:	40006c00 	.word	0x40006c00

08004698 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d101      	bne.n	80046aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e076      	b.n	8004798 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d108      	bne.n	80046c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046ba:	d009      	beq.n	80046d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	61da      	str	r2, [r3, #28]
 80046c2:	e005      	b.n	80046d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d106      	bne.n	80046f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f7fc fd4a 	bl	8001184 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2202      	movs	r2, #2
 80046f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004706:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004718:	431a      	orrs	r2, r3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004722:	431a      	orrs	r2, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	691b      	ldr	r3, [r3, #16]
 8004728:	f003 0302 	and.w	r3, r3, #2
 800472c:	431a      	orrs	r2, r3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	695b      	ldr	r3, [r3, #20]
 8004732:	f003 0301 	and.w	r3, r3, #1
 8004736:	431a      	orrs	r2, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	699b      	ldr	r3, [r3, #24]
 800473c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004740:	431a      	orrs	r2, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	69db      	ldr	r3, [r3, #28]
 8004746:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800474a:	431a      	orrs	r2, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6a1b      	ldr	r3, [r3, #32]
 8004750:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004754:	ea42 0103 	orr.w	r1, r2, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800475c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	430a      	orrs	r2, r1
 8004766:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	699b      	ldr	r3, [r3, #24]
 800476c:	0c1a      	lsrs	r2, r3, #16
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f002 0204 	and.w	r2, r2, #4
 8004776:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	69da      	ldr	r2, [r3, #28]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004786:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2201      	movs	r2, #1
 8004792:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004796:	2300      	movs	r3, #0
}
 8004798:	4618      	mov	r0, r3
 800479a:	3708      	adds	r7, #8
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}

080047a0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b088      	sub	sp, #32
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	099b      	lsrs	r3, r3, #6
 80047bc:	f003 0301 	and.w	r3, r3, #1
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d10f      	bne.n	80047e4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00a      	beq.n	80047e4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	099b      	lsrs	r3, r3, #6
 80047d2:	f003 0301 	and.w	r3, r3, #1
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d004      	beq.n	80047e4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	4798      	blx	r3
    return;
 80047e2:	e0be      	b.n	8004962 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	085b      	lsrs	r3, r3, #1
 80047e8:	f003 0301 	and.w	r3, r3, #1
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d00a      	beq.n	8004806 <HAL_SPI_IRQHandler+0x66>
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	09db      	lsrs	r3, r3, #7
 80047f4:	f003 0301 	and.w	r3, r3, #1
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d004      	beq.n	8004806 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	4798      	blx	r3
    return;
 8004804:	e0ad      	b.n	8004962 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	095b      	lsrs	r3, r3, #5
 800480a:	f003 0301 	and.w	r3, r3, #1
 800480e:	2b00      	cmp	r3, #0
 8004810:	d106      	bne.n	8004820 <HAL_SPI_IRQHandler+0x80>
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	099b      	lsrs	r3, r3, #6
 8004816:	f003 0301 	and.w	r3, r3, #1
 800481a:	2b00      	cmp	r3, #0
 800481c:	f000 80a1 	beq.w	8004962 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	095b      	lsrs	r3, r3, #5
 8004824:	f003 0301 	and.w	r3, r3, #1
 8004828:	2b00      	cmp	r3, #0
 800482a:	f000 809a 	beq.w	8004962 <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800482e:	69bb      	ldr	r3, [r7, #24]
 8004830:	099b      	lsrs	r3, r3, #6
 8004832:	f003 0301 	and.w	r3, r3, #1
 8004836:	2b00      	cmp	r3, #0
 8004838:	d023      	beq.n	8004882 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004840:	b2db      	uxtb	r3, r3
 8004842:	2b03      	cmp	r3, #3
 8004844:	d011      	beq.n	800486a <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800484a:	f043 0204 	orr.w	r2, r3, #4
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004852:	2300      	movs	r3, #0
 8004854:	617b      	str	r3, [r7, #20]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	617b      	str	r3, [r7, #20]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	617b      	str	r3, [r7, #20]
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	e00b      	b.n	8004882 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800486a:	2300      	movs	r3, #0
 800486c:	613b      	str	r3, [r7, #16]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	613b      	str	r3, [r7, #16]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	613b      	str	r3, [r7, #16]
 800487e:	693b      	ldr	r3, [r7, #16]
        return;
 8004880:	e06f      	b.n	8004962 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	095b      	lsrs	r3, r3, #5
 8004886:	f003 0301 	and.w	r3, r3, #1
 800488a:	2b00      	cmp	r3, #0
 800488c:	d014      	beq.n	80048b8 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004892:	f043 0201 	orr.w	r2, r3, #1
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800489a:	2300      	movs	r3, #0
 800489c:	60fb      	str	r3, [r7, #12]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	60fb      	str	r3, [r7, #12]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048b4:	601a      	str	r2, [r3, #0]
 80048b6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d04f      	beq.n	8004960 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	685a      	ldr	r2, [r3, #4]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80048ce:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	f003 0302 	and.w	r3, r3, #2
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d104      	bne.n	80048ec <HAL_SPI_IRQHandler+0x14c>
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	f003 0301 	and.w	r3, r3, #1
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d034      	beq.n	8004956 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	685a      	ldr	r2, [r3, #4]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f022 0203 	bic.w	r2, r2, #3
 80048fa:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004900:	2b00      	cmp	r3, #0
 8004902:	d011      	beq.n	8004928 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004908:	4a17      	ldr	r2, [pc, #92]	; (8004968 <HAL_SPI_IRQHandler+0x1c8>)
 800490a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004910:	4618      	mov	r0, r3
 8004912:	f7fd fe55 	bl	80025c0 <HAL_DMA_Abort_IT>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d005      	beq.n	8004928 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004920:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800492c:	2b00      	cmp	r3, #0
 800492e:	d016      	beq.n	800495e <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004934:	4a0c      	ldr	r2, [pc, #48]	; (8004968 <HAL_SPI_IRQHandler+0x1c8>)
 8004936:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800493c:	4618      	mov	r0, r3
 800493e:	f7fd fe3f 	bl	80025c0 <HAL_DMA_Abort_IT>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d00a      	beq.n	800495e <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800494c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004954:	e003      	b.n	800495e <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 f808 	bl	800496c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800495c:	e000      	b.n	8004960 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 800495e:	bf00      	nop
    return;
 8004960:	bf00      	nop
  }
}
 8004962:	3720      	adds	r7, #32
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}
 8004968:	0800497f 	.word	0x0800497f

0800496c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004974:	bf00      	nop
 8004976:	370c      	adds	r7, #12
 8004978:	46bd      	mov	sp, r7
 800497a:	bc80      	pop	{r7}
 800497c:	4770      	bx	lr

0800497e <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800497e:	b580      	push	{r7, lr}
 8004980:	b084      	sub	sp, #16
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498a:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2200      	movs	r2, #0
 8004990:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2200      	movs	r2, #0
 8004996:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004998:	68f8      	ldr	r0, [r7, #12]
 800499a:	f7ff ffe7 	bl	800496c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800499e:	bf00      	nop
 80049a0:	3710      	adds	r7, #16
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}

080049a6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049a6:	b580      	push	{r7, lr}
 80049a8:	b082      	sub	sp, #8
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d101      	bne.n	80049b8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e041      	b.n	8004a3c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d106      	bne.n	80049d2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f7fc fe33 	bl	8001638 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2202      	movs	r2, #2
 80049d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	3304      	adds	r3, #4
 80049e2:	4619      	mov	r1, r3
 80049e4:	4610      	mov	r0, r2
 80049e6:	f000 fb2d 	bl	8005044 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2201      	movs	r2, #1
 80049ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2201      	movs	r2, #1
 80049f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2201      	movs	r2, #1
 80049fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2201      	movs	r2, #1
 8004a06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2201      	movs	r2, #1
 8004a16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2201      	movs	r2, #1
 8004a26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2201      	movs	r2, #1
 8004a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a3a:	2300      	movs	r3, #0
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3708      	adds	r7, #8
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b085      	sub	sp, #20
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d001      	beq.n	8004a5c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e03c      	b.n	8004ad6 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2202      	movs	r2, #2
 8004a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a1d      	ldr	r2, [pc, #116]	; (8004ae0 <HAL_TIM_Base_Start+0x9c>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d018      	beq.n	8004aa0 <HAL_TIM_Base_Start+0x5c>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a1c      	ldr	r2, [pc, #112]	; (8004ae4 <HAL_TIM_Base_Start+0xa0>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d013      	beq.n	8004aa0 <HAL_TIM_Base_Start+0x5c>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a80:	d00e      	beq.n	8004aa0 <HAL_TIM_Base_Start+0x5c>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a18      	ldr	r2, [pc, #96]	; (8004ae8 <HAL_TIM_Base_Start+0xa4>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d009      	beq.n	8004aa0 <HAL_TIM_Base_Start+0x5c>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a16      	ldr	r2, [pc, #88]	; (8004aec <HAL_TIM_Base_Start+0xa8>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d004      	beq.n	8004aa0 <HAL_TIM_Base_Start+0x5c>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a15      	ldr	r2, [pc, #84]	; (8004af0 <HAL_TIM_Base_Start+0xac>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d111      	bne.n	8004ac4 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	f003 0307 	and.w	r3, r3, #7
 8004aaa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2b06      	cmp	r3, #6
 8004ab0:	d010      	beq.n	8004ad4 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f042 0201 	orr.w	r2, r2, #1
 8004ac0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ac2:	e007      	b.n	8004ad4 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f042 0201 	orr.w	r2, r2, #1
 8004ad2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3714      	adds	r7, #20
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bc80      	pop	{r7}
 8004ade:	4770      	bx	lr
 8004ae0:	40012c00 	.word	0x40012c00
 8004ae4:	40013400 	.word	0x40013400
 8004ae8:	40000400 	.word	0x40000400
 8004aec:	40000800 	.word	0x40000800
 8004af0:	40000c00 	.word	0x40000c00

08004af4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	6a1a      	ldr	r2, [r3, #32]
 8004b02:	f241 1311 	movw	r3, #4369	; 0x1111
 8004b06:	4013      	ands	r3, r2
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d10f      	bne.n	8004b2c <HAL_TIM_Base_Stop+0x38>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	6a1a      	ldr	r2, [r3, #32]
 8004b12:	f240 4344 	movw	r3, #1092	; 0x444
 8004b16:	4013      	ands	r3, r2
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d107      	bne.n	8004b2c <HAL_TIM_Base_Stop+0x38>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f022 0201 	bic.w	r2, r2, #1
 8004b2a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	370c      	adds	r7, #12
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bc80      	pop	{r7}
 8004b3e:	4770      	bx	lr

08004b40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d001      	beq.n	8004b58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e044      	b.n	8004be2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2202      	movs	r2, #2
 8004b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	68da      	ldr	r2, [r3, #12]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f042 0201 	orr.w	r2, r2, #1
 8004b6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a1d      	ldr	r2, [pc, #116]	; (8004bec <HAL_TIM_Base_Start_IT+0xac>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d018      	beq.n	8004bac <HAL_TIM_Base_Start_IT+0x6c>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a1c      	ldr	r2, [pc, #112]	; (8004bf0 <HAL_TIM_Base_Start_IT+0xb0>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d013      	beq.n	8004bac <HAL_TIM_Base_Start_IT+0x6c>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b8c:	d00e      	beq.n	8004bac <HAL_TIM_Base_Start_IT+0x6c>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a18      	ldr	r2, [pc, #96]	; (8004bf4 <HAL_TIM_Base_Start_IT+0xb4>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d009      	beq.n	8004bac <HAL_TIM_Base_Start_IT+0x6c>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a16      	ldr	r2, [pc, #88]	; (8004bf8 <HAL_TIM_Base_Start_IT+0xb8>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d004      	beq.n	8004bac <HAL_TIM_Base_Start_IT+0x6c>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a15      	ldr	r2, [pc, #84]	; (8004bfc <HAL_TIM_Base_Start_IT+0xbc>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d111      	bne.n	8004bd0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f003 0307 	and.w	r3, r3, #7
 8004bb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2b06      	cmp	r3, #6
 8004bbc:	d010      	beq.n	8004be0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f042 0201 	orr.w	r2, r2, #1
 8004bcc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bce:	e007      	b.n	8004be0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f042 0201 	orr.w	r2, r2, #1
 8004bde:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3714      	adds	r7, #20
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bc80      	pop	{r7}
 8004bea:	4770      	bx	lr
 8004bec:	40012c00 	.word	0x40012c00
 8004bf0:	40013400 	.word	0x40013400
 8004bf4:	40000400 	.word	0x40000400
 8004bf8:	40000800 	.word	0x40000800
 8004bfc:	40000c00 	.word	0x40000c00

08004c00 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68da      	ldr	r2, [r3, #12]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f022 0201 	bic.w	r2, r2, #1
 8004c16:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	6a1a      	ldr	r2, [r3, #32]
 8004c1e:	f241 1311 	movw	r3, #4369	; 0x1111
 8004c22:	4013      	ands	r3, r2
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d10f      	bne.n	8004c48 <HAL_TIM_Base_Stop_IT+0x48>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	6a1a      	ldr	r2, [r3, #32]
 8004c2e:	f240 4344 	movw	r3, #1092	; 0x444
 8004c32:	4013      	ands	r3, r2
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d107      	bne.n	8004c48 <HAL_TIM_Base_Stop_IT+0x48>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f022 0201 	bic.w	r2, r2, #1
 8004c46:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	370c      	adds	r7, #12
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bc80      	pop	{r7}
 8004c5a:	4770      	bx	lr

08004c5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b082      	sub	sp, #8
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	f003 0302 	and.w	r3, r3, #2
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d122      	bne.n	8004cb8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	f003 0302 	and.w	r3, r3, #2
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	d11b      	bne.n	8004cb8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f06f 0202 	mvn.w	r2, #2
 8004c88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	699b      	ldr	r3, [r3, #24]
 8004c96:	f003 0303 	and.w	r3, r3, #3
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d003      	beq.n	8004ca6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 f9b4 	bl	800500c <HAL_TIM_IC_CaptureCallback>
 8004ca4:	e005      	b.n	8004cb2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 f9a7 	bl	8004ffa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f000 f9b6 	bl	800501e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	f003 0304 	and.w	r3, r3, #4
 8004cc2:	2b04      	cmp	r3, #4
 8004cc4:	d122      	bne.n	8004d0c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	f003 0304 	and.w	r3, r3, #4
 8004cd0:	2b04      	cmp	r3, #4
 8004cd2:	d11b      	bne.n	8004d0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f06f 0204 	mvn.w	r2, #4
 8004cdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2202      	movs	r2, #2
 8004ce2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	699b      	ldr	r3, [r3, #24]
 8004cea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d003      	beq.n	8004cfa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 f98a 	bl	800500c <HAL_TIM_IC_CaptureCallback>
 8004cf8:	e005      	b.n	8004d06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 f97d 	bl	8004ffa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 f98c 	bl	800501e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	f003 0308 	and.w	r3, r3, #8
 8004d16:	2b08      	cmp	r3, #8
 8004d18:	d122      	bne.n	8004d60 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	f003 0308 	and.w	r3, r3, #8
 8004d24:	2b08      	cmp	r3, #8
 8004d26:	d11b      	bne.n	8004d60 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f06f 0208 	mvn.w	r2, #8
 8004d30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2204      	movs	r2, #4
 8004d36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	69db      	ldr	r3, [r3, #28]
 8004d3e:	f003 0303 	and.w	r3, r3, #3
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d003      	beq.n	8004d4e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 f960 	bl	800500c <HAL_TIM_IC_CaptureCallback>
 8004d4c:	e005      	b.n	8004d5a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 f953 	bl	8004ffa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f000 f962 	bl	800501e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	f003 0310 	and.w	r3, r3, #16
 8004d6a:	2b10      	cmp	r3, #16
 8004d6c:	d122      	bne.n	8004db4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	f003 0310 	and.w	r3, r3, #16
 8004d78:	2b10      	cmp	r3, #16
 8004d7a:	d11b      	bne.n	8004db4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f06f 0210 	mvn.w	r2, #16
 8004d84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2208      	movs	r2, #8
 8004d8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	69db      	ldr	r3, [r3, #28]
 8004d92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d003      	beq.n	8004da2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 f936 	bl	800500c <HAL_TIM_IC_CaptureCallback>
 8004da0:	e005      	b.n	8004dae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f000 f929 	bl	8004ffa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f000 f938 	bl	800501e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	f003 0301 	and.w	r3, r3, #1
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d10e      	bne.n	8004de0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	f003 0301 	and.w	r3, r3, #1
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d107      	bne.n	8004de0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f06f 0201 	mvn.w	r2, #1
 8004dd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f7fb fef8 	bl	8000bd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dea:	2b80      	cmp	r3, #128	; 0x80
 8004dec:	d10e      	bne.n	8004e0c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004df8:	2b80      	cmp	r3, #128	; 0x80
 8004dfa:	d107      	bne.n	8004e0c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 faa1 	bl	800534e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e16:	2b40      	cmp	r3, #64	; 0x40
 8004e18:	d10e      	bne.n	8004e38 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e24:	2b40      	cmp	r3, #64	; 0x40
 8004e26:	d107      	bne.n	8004e38 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f000 f8fc 	bl	8005030 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	f003 0320 	and.w	r3, r3, #32
 8004e42:	2b20      	cmp	r3, #32
 8004e44:	d10e      	bne.n	8004e64 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	f003 0320 	and.w	r3, r3, #32
 8004e50:	2b20      	cmp	r3, #32
 8004e52:	d107      	bne.n	8004e64 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f06f 0220 	mvn.w	r2, #32
 8004e5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 fa6c 	bl	800533c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e64:	bf00      	nop
 8004e66:	3708      	adds	r7, #8
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b084      	sub	sp, #16
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e76:	2300      	movs	r3, #0
 8004e78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d101      	bne.n	8004e88 <HAL_TIM_ConfigClockSource+0x1c>
 8004e84:	2302      	movs	r3, #2
 8004e86:	e0b4      	b.n	8004ff2 <HAL_TIM_ConfigClockSource+0x186>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2202      	movs	r2, #2
 8004e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004ea6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004eae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68ba      	ldr	r2, [r7, #8]
 8004eb6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ec0:	d03e      	beq.n	8004f40 <HAL_TIM_ConfigClockSource+0xd4>
 8004ec2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ec6:	f200 8087 	bhi.w	8004fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8004eca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ece:	f000 8086 	beq.w	8004fde <HAL_TIM_ConfigClockSource+0x172>
 8004ed2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ed6:	d87f      	bhi.n	8004fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ed8:	2b70      	cmp	r3, #112	; 0x70
 8004eda:	d01a      	beq.n	8004f12 <HAL_TIM_ConfigClockSource+0xa6>
 8004edc:	2b70      	cmp	r3, #112	; 0x70
 8004ede:	d87b      	bhi.n	8004fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ee0:	2b60      	cmp	r3, #96	; 0x60
 8004ee2:	d050      	beq.n	8004f86 <HAL_TIM_ConfigClockSource+0x11a>
 8004ee4:	2b60      	cmp	r3, #96	; 0x60
 8004ee6:	d877      	bhi.n	8004fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ee8:	2b50      	cmp	r3, #80	; 0x50
 8004eea:	d03c      	beq.n	8004f66 <HAL_TIM_ConfigClockSource+0xfa>
 8004eec:	2b50      	cmp	r3, #80	; 0x50
 8004eee:	d873      	bhi.n	8004fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ef0:	2b40      	cmp	r3, #64	; 0x40
 8004ef2:	d058      	beq.n	8004fa6 <HAL_TIM_ConfigClockSource+0x13a>
 8004ef4:	2b40      	cmp	r3, #64	; 0x40
 8004ef6:	d86f      	bhi.n	8004fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ef8:	2b30      	cmp	r3, #48	; 0x30
 8004efa:	d064      	beq.n	8004fc6 <HAL_TIM_ConfigClockSource+0x15a>
 8004efc:	2b30      	cmp	r3, #48	; 0x30
 8004efe:	d86b      	bhi.n	8004fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8004f00:	2b20      	cmp	r3, #32
 8004f02:	d060      	beq.n	8004fc6 <HAL_TIM_ConfigClockSource+0x15a>
 8004f04:	2b20      	cmp	r3, #32
 8004f06:	d867      	bhi.n	8004fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d05c      	beq.n	8004fc6 <HAL_TIM_ConfigClockSource+0x15a>
 8004f0c:	2b10      	cmp	r3, #16
 8004f0e:	d05a      	beq.n	8004fc6 <HAL_TIM_ConfigClockSource+0x15a>
 8004f10:	e062      	b.n	8004fd8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6818      	ldr	r0, [r3, #0]
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	6899      	ldr	r1, [r3, #8]
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	685a      	ldr	r2, [r3, #4]
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	f000 f980 	bl	8005226 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f34:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	68ba      	ldr	r2, [r7, #8]
 8004f3c:	609a      	str	r2, [r3, #8]
      break;
 8004f3e:	e04f      	b.n	8004fe0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6818      	ldr	r0, [r3, #0]
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	6899      	ldr	r1, [r3, #8]
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	685a      	ldr	r2, [r3, #4]
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	f000 f969 	bl	8005226 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	689a      	ldr	r2, [r3, #8]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f62:	609a      	str	r2, [r3, #8]
      break;
 8004f64:	e03c      	b.n	8004fe0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6818      	ldr	r0, [r3, #0]
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	6859      	ldr	r1, [r3, #4]
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	68db      	ldr	r3, [r3, #12]
 8004f72:	461a      	mov	r2, r3
 8004f74:	f000 f8e0 	bl	8005138 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	2150      	movs	r1, #80	; 0x50
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f000 f937 	bl	80051f2 <TIM_ITRx_SetConfig>
      break;
 8004f84:	e02c      	b.n	8004fe0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6818      	ldr	r0, [r3, #0]
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	6859      	ldr	r1, [r3, #4]
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	461a      	mov	r2, r3
 8004f94:	f000 f8fe 	bl	8005194 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2160      	movs	r1, #96	; 0x60
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f000 f927 	bl	80051f2 <TIM_ITRx_SetConfig>
      break;
 8004fa4:	e01c      	b.n	8004fe0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6818      	ldr	r0, [r3, #0]
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	6859      	ldr	r1, [r3, #4]
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	f000 f8c0 	bl	8005138 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2140      	movs	r1, #64	; 0x40
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f000 f917 	bl	80051f2 <TIM_ITRx_SetConfig>
      break;
 8004fc4:	e00c      	b.n	8004fe0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4619      	mov	r1, r3
 8004fd0:	4610      	mov	r0, r2
 8004fd2:	f000 f90e 	bl	80051f2 <TIM_ITRx_SetConfig>
      break;
 8004fd6:	e003      	b.n	8004fe0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	73fb      	strb	r3, [r7, #15]
      break;
 8004fdc:	e000      	b.n	8004fe0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004fde:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3710      	adds	r7, #16
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}

08004ffa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ffa:	b480      	push	{r7}
 8004ffc:	b083      	sub	sp, #12
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005002:	bf00      	nop
 8005004:	370c      	adds	r7, #12
 8005006:	46bd      	mov	sp, r7
 8005008:	bc80      	pop	{r7}
 800500a:	4770      	bx	lr

0800500c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005014:	bf00      	nop
 8005016:	370c      	adds	r7, #12
 8005018:	46bd      	mov	sp, r7
 800501a:	bc80      	pop	{r7}
 800501c:	4770      	bx	lr

0800501e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800501e:	b480      	push	{r7}
 8005020:	b083      	sub	sp, #12
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005026:	bf00      	nop
 8005028:	370c      	adds	r7, #12
 800502a:	46bd      	mov	sp, r7
 800502c:	bc80      	pop	{r7}
 800502e:	4770      	bx	lr

08005030 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005038:	bf00      	nop
 800503a:	370c      	adds	r7, #12
 800503c:	46bd      	mov	sp, r7
 800503e:	bc80      	pop	{r7}
 8005040:	4770      	bx	lr
	...

08005044 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005044:	b480      	push	{r7}
 8005046:	b085      	sub	sp, #20
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4a33      	ldr	r2, [pc, #204]	; (8005124 <TIM_Base_SetConfig+0xe0>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d013      	beq.n	8005084 <TIM_Base_SetConfig+0x40>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	4a32      	ldr	r2, [pc, #200]	; (8005128 <TIM_Base_SetConfig+0xe4>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d00f      	beq.n	8005084 <TIM_Base_SetConfig+0x40>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800506a:	d00b      	beq.n	8005084 <TIM_Base_SetConfig+0x40>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4a2f      	ldr	r2, [pc, #188]	; (800512c <TIM_Base_SetConfig+0xe8>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d007      	beq.n	8005084 <TIM_Base_SetConfig+0x40>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4a2e      	ldr	r2, [pc, #184]	; (8005130 <TIM_Base_SetConfig+0xec>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d003      	beq.n	8005084 <TIM_Base_SetConfig+0x40>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a2d      	ldr	r2, [pc, #180]	; (8005134 <TIM_Base_SetConfig+0xf0>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d108      	bne.n	8005096 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800508a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	68fa      	ldr	r2, [r7, #12]
 8005092:	4313      	orrs	r3, r2
 8005094:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a22      	ldr	r2, [pc, #136]	; (8005124 <TIM_Base_SetConfig+0xe0>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d013      	beq.n	80050c6 <TIM_Base_SetConfig+0x82>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4a21      	ldr	r2, [pc, #132]	; (8005128 <TIM_Base_SetConfig+0xe4>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d00f      	beq.n	80050c6 <TIM_Base_SetConfig+0x82>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050ac:	d00b      	beq.n	80050c6 <TIM_Base_SetConfig+0x82>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a1e      	ldr	r2, [pc, #120]	; (800512c <TIM_Base_SetConfig+0xe8>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d007      	beq.n	80050c6 <TIM_Base_SetConfig+0x82>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4a1d      	ldr	r2, [pc, #116]	; (8005130 <TIM_Base_SetConfig+0xec>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d003      	beq.n	80050c6 <TIM_Base_SetConfig+0x82>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4a1c      	ldr	r2, [pc, #112]	; (8005134 <TIM_Base_SetConfig+0xf0>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d108      	bne.n	80050d8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	68fa      	ldr	r2, [r7, #12]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	695b      	ldr	r3, [r3, #20]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	689a      	ldr	r2, [r3, #8]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4a09      	ldr	r2, [pc, #36]	; (8005124 <TIM_Base_SetConfig+0xe0>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d003      	beq.n	800510c <TIM_Base_SetConfig+0xc8>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a08      	ldr	r2, [pc, #32]	; (8005128 <TIM_Base_SetConfig+0xe4>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d103      	bne.n	8005114 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	691a      	ldr	r2, [r3, #16]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	615a      	str	r2, [r3, #20]
}
 800511a:	bf00      	nop
 800511c:	3714      	adds	r7, #20
 800511e:	46bd      	mov	sp, r7
 8005120:	bc80      	pop	{r7}
 8005122:	4770      	bx	lr
 8005124:	40012c00 	.word	0x40012c00
 8005128:	40013400 	.word	0x40013400
 800512c:	40000400 	.word	0x40000400
 8005130:	40000800 	.word	0x40000800
 8005134:	40000c00 	.word	0x40000c00

08005138 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005138:	b480      	push	{r7}
 800513a:	b087      	sub	sp, #28
 800513c:	af00      	add	r7, sp, #0
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	60b9      	str	r1, [r7, #8]
 8005142:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6a1b      	ldr	r3, [r3, #32]
 8005148:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6a1b      	ldr	r3, [r3, #32]
 800514e:	f023 0201 	bic.w	r2, r3, #1
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	699b      	ldr	r3, [r3, #24]
 800515a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005162:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	011b      	lsls	r3, r3, #4
 8005168:	693a      	ldr	r2, [r7, #16]
 800516a:	4313      	orrs	r3, r2
 800516c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	f023 030a 	bic.w	r3, r3, #10
 8005174:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005176:	697a      	ldr	r2, [r7, #20]
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	4313      	orrs	r3, r2
 800517c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	693a      	ldr	r2, [r7, #16]
 8005182:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	697a      	ldr	r2, [r7, #20]
 8005188:	621a      	str	r2, [r3, #32]
}
 800518a:	bf00      	nop
 800518c:	371c      	adds	r7, #28
 800518e:	46bd      	mov	sp, r7
 8005190:	bc80      	pop	{r7}
 8005192:	4770      	bx	lr

08005194 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005194:	b480      	push	{r7}
 8005196:	b087      	sub	sp, #28
 8005198:	af00      	add	r7, sp, #0
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6a1b      	ldr	r3, [r3, #32]
 80051a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6a1b      	ldr	r3, [r3, #32]
 80051aa:	f023 0210 	bic.w	r2, r3, #16
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	699b      	ldr	r3, [r3, #24]
 80051b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80051be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	031b      	lsls	r3, r3, #12
 80051c4:	693a      	ldr	r2, [r7, #16]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80051d0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	011b      	lsls	r3, r3, #4
 80051d6:	697a      	ldr	r2, [r7, #20]
 80051d8:	4313      	orrs	r3, r2
 80051da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	693a      	ldr	r2, [r7, #16]
 80051e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	697a      	ldr	r2, [r7, #20]
 80051e6:	621a      	str	r2, [r3, #32]
}
 80051e8:	bf00      	nop
 80051ea:	371c      	adds	r7, #28
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bc80      	pop	{r7}
 80051f0:	4770      	bx	lr

080051f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80051f2:	b480      	push	{r7}
 80051f4:	b085      	sub	sp, #20
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
 80051fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005208:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800520a:	683a      	ldr	r2, [r7, #0]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	4313      	orrs	r3, r2
 8005210:	f043 0307 	orr.w	r3, r3, #7
 8005214:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	68fa      	ldr	r2, [r7, #12]
 800521a:	609a      	str	r2, [r3, #8]
}
 800521c:	bf00      	nop
 800521e:	3714      	adds	r7, #20
 8005220:	46bd      	mov	sp, r7
 8005222:	bc80      	pop	{r7}
 8005224:	4770      	bx	lr

08005226 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005226:	b480      	push	{r7}
 8005228:	b087      	sub	sp, #28
 800522a:	af00      	add	r7, sp, #0
 800522c:	60f8      	str	r0, [r7, #12]
 800522e:	60b9      	str	r1, [r7, #8]
 8005230:	607a      	str	r2, [r7, #4]
 8005232:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005240:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	021a      	lsls	r2, r3, #8
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	431a      	orrs	r2, r3
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	4313      	orrs	r3, r2
 800524e:	697a      	ldr	r2, [r7, #20]
 8005250:	4313      	orrs	r3, r2
 8005252:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	697a      	ldr	r2, [r7, #20]
 8005258:	609a      	str	r2, [r3, #8]
}
 800525a:	bf00      	nop
 800525c:	371c      	adds	r7, #28
 800525e:	46bd      	mov	sp, r7
 8005260:	bc80      	pop	{r7}
 8005262:	4770      	bx	lr

08005264 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005264:	b480      	push	{r7}
 8005266:	b085      	sub	sp, #20
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005274:	2b01      	cmp	r3, #1
 8005276:	d101      	bne.n	800527c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005278:	2302      	movs	r3, #2
 800527a:	e050      	b.n	800531e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2202      	movs	r2, #2
 8005288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	68fa      	ldr	r2, [r7, #12]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	68fa      	ldr	r2, [r7, #12]
 80052b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a1b      	ldr	r2, [pc, #108]	; (8005328 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d018      	beq.n	80052f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a19      	ldr	r2, [pc, #100]	; (800532c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d013      	beq.n	80052f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052d2:	d00e      	beq.n	80052f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a15      	ldr	r2, [pc, #84]	; (8005330 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d009      	beq.n	80052f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a14      	ldr	r2, [pc, #80]	; (8005334 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d004      	beq.n	80052f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a12      	ldr	r2, [pc, #72]	; (8005338 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d10c      	bne.n	800530c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	68ba      	ldr	r2, [r7, #8]
 8005300:	4313      	orrs	r3, r2
 8005302:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	68ba      	ldr	r2, [r7, #8]
 800530a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800531c:	2300      	movs	r3, #0
}
 800531e:	4618      	mov	r0, r3
 8005320:	3714      	adds	r7, #20
 8005322:	46bd      	mov	sp, r7
 8005324:	bc80      	pop	{r7}
 8005326:	4770      	bx	lr
 8005328:	40012c00 	.word	0x40012c00
 800532c:	40013400 	.word	0x40013400
 8005330:	40000400 	.word	0x40000400
 8005334:	40000800 	.word	0x40000800
 8005338:	40000c00 	.word	0x40000c00

0800533c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005344:	bf00      	nop
 8005346:	370c      	adds	r7, #12
 8005348:	46bd      	mov	sp, r7
 800534a:	bc80      	pop	{r7}
 800534c:	4770      	bx	lr

0800534e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800534e:	b480      	push	{r7}
 8005350:	b083      	sub	sp, #12
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005356:	bf00      	nop
 8005358:	370c      	adds	r7, #12
 800535a:	46bd      	mov	sp, r7
 800535c:	bc80      	pop	{r7}
 800535e:	4770      	bx	lr

08005360 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b082      	sub	sp, #8
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d101      	bne.n	8005372 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e042      	b.n	80053f8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005378:	b2db      	uxtb	r3, r3
 800537a:	2b00      	cmp	r3, #0
 800537c:	d106      	bne.n	800538c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f7fc fa52 	bl	8001830 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2224      	movs	r2, #36	; 0x24
 8005390:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	68da      	ldr	r2, [r3, #12]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f000 f91d 	bl	80055e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	691a      	ldr	r2, [r3, #16]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80053b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	695a      	ldr	r2, [r3, #20]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80053c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	68da      	ldr	r2, [r3, #12]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2220      	movs	r2, #32
 80053e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2220      	movs	r2, #32
 80053ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80053f6:	2300      	movs	r3, #0
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3708      	adds	r7, #8
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}

08005400 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b08a      	sub	sp, #40	; 0x28
 8005404:	af02      	add	r7, sp, #8
 8005406:	60f8      	str	r0, [r7, #12]
 8005408:	60b9      	str	r1, [r7, #8]
 800540a:	603b      	str	r3, [r7, #0]
 800540c:	4613      	mov	r3, r2
 800540e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005410:	2300      	movs	r3, #0
 8005412:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800541a:	b2db      	uxtb	r3, r3
 800541c:	2b20      	cmp	r3, #32
 800541e:	d16d      	bne.n	80054fc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d002      	beq.n	800542c <HAL_UART_Transmit+0x2c>
 8005426:	88fb      	ldrh	r3, [r7, #6]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d101      	bne.n	8005430 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	e066      	b.n	80054fe <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2200      	movs	r2, #0
 8005434:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2221      	movs	r2, #33	; 0x21
 800543a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800543e:	f7fc fb7d 	bl	8001b3c <HAL_GetTick>
 8005442:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	88fa      	ldrh	r2, [r7, #6]
 8005448:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	88fa      	ldrh	r2, [r7, #6]
 800544e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005458:	d108      	bne.n	800546c <HAL_UART_Transmit+0x6c>
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d104      	bne.n	800546c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005462:	2300      	movs	r3, #0
 8005464:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	61bb      	str	r3, [r7, #24]
 800546a:	e003      	b.n	8005474 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005470:	2300      	movs	r3, #0
 8005472:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005474:	e02a      	b.n	80054cc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	9300      	str	r3, [sp, #0]
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	2200      	movs	r2, #0
 800547e:	2180      	movs	r1, #128	; 0x80
 8005480:	68f8      	ldr	r0, [r7, #12]
 8005482:	f000 f840 	bl	8005506 <UART_WaitOnFlagUntilTimeout>
 8005486:	4603      	mov	r3, r0
 8005488:	2b00      	cmp	r3, #0
 800548a:	d001      	beq.n	8005490 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800548c:	2303      	movs	r3, #3
 800548e:	e036      	b.n	80054fe <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d10b      	bne.n	80054ae <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005496:	69bb      	ldr	r3, [r7, #24]
 8005498:	881b      	ldrh	r3, [r3, #0]
 800549a:	461a      	mov	r2, r3
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80054a6:	69bb      	ldr	r3, [r7, #24]
 80054a8:	3302      	adds	r3, #2
 80054aa:	61bb      	str	r3, [r7, #24]
 80054ac:	e007      	b.n	80054be <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	781a      	ldrb	r2, [r3, #0]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	3301      	adds	r3, #1
 80054bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	3b01      	subs	r3, #1
 80054c6:	b29a      	uxth	r2, r3
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d1cf      	bne.n	8005476 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	9300      	str	r3, [sp, #0]
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	2200      	movs	r2, #0
 80054de:	2140      	movs	r1, #64	; 0x40
 80054e0:	68f8      	ldr	r0, [r7, #12]
 80054e2:	f000 f810 	bl	8005506 <UART_WaitOnFlagUntilTimeout>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d001      	beq.n	80054f0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80054ec:	2303      	movs	r3, #3
 80054ee:	e006      	b.n	80054fe <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2220      	movs	r2, #32
 80054f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80054f8:	2300      	movs	r3, #0
 80054fa:	e000      	b.n	80054fe <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80054fc:	2302      	movs	r3, #2
  }
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3720      	adds	r7, #32
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}

08005506 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005506:	b580      	push	{r7, lr}
 8005508:	b090      	sub	sp, #64	; 0x40
 800550a:	af00      	add	r7, sp, #0
 800550c:	60f8      	str	r0, [r7, #12]
 800550e:	60b9      	str	r1, [r7, #8]
 8005510:	603b      	str	r3, [r7, #0]
 8005512:	4613      	mov	r3, r2
 8005514:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005516:	e050      	b.n	80055ba <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005518:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800551a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800551e:	d04c      	beq.n	80055ba <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005520:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005522:	2b00      	cmp	r3, #0
 8005524:	d007      	beq.n	8005536 <UART_WaitOnFlagUntilTimeout+0x30>
 8005526:	f7fc fb09 	bl	8001b3c <HAL_GetTick>
 800552a:	4602      	mov	r2, r0
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005532:	429a      	cmp	r2, r3
 8005534:	d241      	bcs.n	80055ba <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	330c      	adds	r3, #12
 800553c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800553e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005540:	e853 3f00 	ldrex	r3, [r3]
 8005544:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005548:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800554c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	330c      	adds	r3, #12
 8005554:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005556:	637a      	str	r2, [r7, #52]	; 0x34
 8005558:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800555a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800555c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800555e:	e841 2300 	strex	r3, r2, [r1]
 8005562:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005566:	2b00      	cmp	r3, #0
 8005568:	d1e5      	bne.n	8005536 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	3314      	adds	r3, #20
 8005570:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	e853 3f00 	ldrex	r3, [r3]
 8005578:	613b      	str	r3, [r7, #16]
   return(result);
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	f023 0301 	bic.w	r3, r3, #1
 8005580:	63bb      	str	r3, [r7, #56]	; 0x38
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	3314      	adds	r3, #20
 8005588:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800558a:	623a      	str	r2, [r7, #32]
 800558c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800558e:	69f9      	ldr	r1, [r7, #28]
 8005590:	6a3a      	ldr	r2, [r7, #32]
 8005592:	e841 2300 	strex	r3, r2, [r1]
 8005596:	61bb      	str	r3, [r7, #24]
   return(result);
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d1e5      	bne.n	800556a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2220      	movs	r2, #32
 80055a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2220      	movs	r2, #32
 80055aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e00f      	b.n	80055da <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	4013      	ands	r3, r2
 80055c4:	68ba      	ldr	r2, [r7, #8]
 80055c6:	429a      	cmp	r2, r3
 80055c8:	bf0c      	ite	eq
 80055ca:	2301      	moveq	r3, #1
 80055cc:	2300      	movne	r3, #0
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	461a      	mov	r2, r3
 80055d2:	79fb      	ldrb	r3, [r7, #7]
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d09f      	beq.n	8005518 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80055d8:	2300      	movs	r3, #0
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3740      	adds	r7, #64	; 0x40
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
	...

080055e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	68da      	ldr	r2, [r3, #12]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	430a      	orrs	r2, r1
 8005600:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	689a      	ldr	r2, [r3, #8]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	691b      	ldr	r3, [r3, #16]
 800560a:	431a      	orrs	r2, r3
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	695b      	ldr	r3, [r3, #20]
 8005610:	4313      	orrs	r3, r2
 8005612:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800561e:	f023 030c 	bic.w	r3, r3, #12
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	6812      	ldr	r2, [r2, #0]
 8005626:	68b9      	ldr	r1, [r7, #8]
 8005628:	430b      	orrs	r3, r1
 800562a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	695b      	ldr	r3, [r3, #20]
 8005632:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	699a      	ldr	r2, [r3, #24]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	430a      	orrs	r2, r1
 8005640:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a2c      	ldr	r2, [pc, #176]	; (80056f8 <UART_SetConfig+0x114>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d103      	bne.n	8005654 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800564c:	f7fd ffca 	bl	80035e4 <HAL_RCC_GetPCLK2Freq>
 8005650:	60f8      	str	r0, [r7, #12]
 8005652:	e002      	b.n	800565a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005654:	f7fd ffb2 	bl	80035bc <HAL_RCC_GetPCLK1Freq>
 8005658:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800565a:	68fa      	ldr	r2, [r7, #12]
 800565c:	4613      	mov	r3, r2
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	4413      	add	r3, r2
 8005662:	009a      	lsls	r2, r3, #2
 8005664:	441a      	add	r2, r3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005670:	4a22      	ldr	r2, [pc, #136]	; (80056fc <UART_SetConfig+0x118>)
 8005672:	fba2 2303 	umull	r2, r3, r2, r3
 8005676:	095b      	lsrs	r3, r3, #5
 8005678:	0119      	lsls	r1, r3, #4
 800567a:	68fa      	ldr	r2, [r7, #12]
 800567c:	4613      	mov	r3, r2
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	4413      	add	r3, r2
 8005682:	009a      	lsls	r2, r3, #2
 8005684:	441a      	add	r2, r3
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	009b      	lsls	r3, r3, #2
 800568c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005690:	4b1a      	ldr	r3, [pc, #104]	; (80056fc <UART_SetConfig+0x118>)
 8005692:	fba3 0302 	umull	r0, r3, r3, r2
 8005696:	095b      	lsrs	r3, r3, #5
 8005698:	2064      	movs	r0, #100	; 0x64
 800569a:	fb00 f303 	mul.w	r3, r0, r3
 800569e:	1ad3      	subs	r3, r2, r3
 80056a0:	011b      	lsls	r3, r3, #4
 80056a2:	3332      	adds	r3, #50	; 0x32
 80056a4:	4a15      	ldr	r2, [pc, #84]	; (80056fc <UART_SetConfig+0x118>)
 80056a6:	fba2 2303 	umull	r2, r3, r2, r3
 80056aa:	095b      	lsrs	r3, r3, #5
 80056ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056b0:	4419      	add	r1, r3
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	4613      	mov	r3, r2
 80056b6:	009b      	lsls	r3, r3, #2
 80056b8:	4413      	add	r3, r2
 80056ba:	009a      	lsls	r2, r3, #2
 80056bc:	441a      	add	r2, r3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80056c8:	4b0c      	ldr	r3, [pc, #48]	; (80056fc <UART_SetConfig+0x118>)
 80056ca:	fba3 0302 	umull	r0, r3, r3, r2
 80056ce:	095b      	lsrs	r3, r3, #5
 80056d0:	2064      	movs	r0, #100	; 0x64
 80056d2:	fb00 f303 	mul.w	r3, r0, r3
 80056d6:	1ad3      	subs	r3, r2, r3
 80056d8:	011b      	lsls	r3, r3, #4
 80056da:	3332      	adds	r3, #50	; 0x32
 80056dc:	4a07      	ldr	r2, [pc, #28]	; (80056fc <UART_SetConfig+0x118>)
 80056de:	fba2 2303 	umull	r2, r3, r2, r3
 80056e2:	095b      	lsrs	r3, r3, #5
 80056e4:	f003 020f 	and.w	r2, r3, #15
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	440a      	add	r2, r1
 80056ee:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80056f0:	bf00      	nop
 80056f2:	3710      	adds	r7, #16
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}
 80056f8:	40013800 	.word	0x40013800
 80056fc:	51eb851f 	.word	0x51eb851f

08005700 <__libc_init_array>:
 8005700:	b570      	push	{r4, r5, r6, lr}
 8005702:	2600      	movs	r6, #0
 8005704:	4d0c      	ldr	r5, [pc, #48]	; (8005738 <__libc_init_array+0x38>)
 8005706:	4c0d      	ldr	r4, [pc, #52]	; (800573c <__libc_init_array+0x3c>)
 8005708:	1b64      	subs	r4, r4, r5
 800570a:	10a4      	asrs	r4, r4, #2
 800570c:	42a6      	cmp	r6, r4
 800570e:	d109      	bne.n	8005724 <__libc_init_array+0x24>
 8005710:	f000 f854 	bl	80057bc <_init>
 8005714:	2600      	movs	r6, #0
 8005716:	4d0a      	ldr	r5, [pc, #40]	; (8005740 <__libc_init_array+0x40>)
 8005718:	4c0a      	ldr	r4, [pc, #40]	; (8005744 <__libc_init_array+0x44>)
 800571a:	1b64      	subs	r4, r4, r5
 800571c:	10a4      	asrs	r4, r4, #2
 800571e:	42a6      	cmp	r6, r4
 8005720:	d105      	bne.n	800572e <__libc_init_array+0x2e>
 8005722:	bd70      	pop	{r4, r5, r6, pc}
 8005724:	f855 3b04 	ldr.w	r3, [r5], #4
 8005728:	4798      	blx	r3
 800572a:	3601      	adds	r6, #1
 800572c:	e7ee      	b.n	800570c <__libc_init_array+0xc>
 800572e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005732:	4798      	blx	r3
 8005734:	3601      	adds	r6, #1
 8005736:	e7f2      	b.n	800571e <__libc_init_array+0x1e>
 8005738:	08005874 	.word	0x08005874
 800573c:	08005874 	.word	0x08005874
 8005740:	08005874 	.word	0x08005874
 8005744:	08005878 	.word	0x08005878

08005748 <memcpy>:
 8005748:	440a      	add	r2, r1
 800574a:	4291      	cmp	r1, r2
 800574c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005750:	d100      	bne.n	8005754 <memcpy+0xc>
 8005752:	4770      	bx	lr
 8005754:	b510      	push	{r4, lr}
 8005756:	f811 4b01 	ldrb.w	r4, [r1], #1
 800575a:	4291      	cmp	r1, r2
 800575c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005760:	d1f9      	bne.n	8005756 <memcpy+0xe>
 8005762:	bd10      	pop	{r4, pc}

08005764 <memset>:
 8005764:	4603      	mov	r3, r0
 8005766:	4402      	add	r2, r0
 8005768:	4293      	cmp	r3, r2
 800576a:	d100      	bne.n	800576e <memset+0xa>
 800576c:	4770      	bx	lr
 800576e:	f803 1b01 	strb.w	r1, [r3], #1
 8005772:	e7f9      	b.n	8005768 <memset+0x4>

08005774 <strchr>:
 8005774:	4603      	mov	r3, r0
 8005776:	b2c9      	uxtb	r1, r1
 8005778:	4618      	mov	r0, r3
 800577a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800577e:	b112      	cbz	r2, 8005786 <strchr+0x12>
 8005780:	428a      	cmp	r2, r1
 8005782:	d1f9      	bne.n	8005778 <strchr+0x4>
 8005784:	4770      	bx	lr
 8005786:	2900      	cmp	r1, #0
 8005788:	bf18      	it	ne
 800578a:	2000      	movne	r0, #0
 800578c:	4770      	bx	lr

0800578e <strstr>:
 800578e:	780a      	ldrb	r2, [r1, #0]
 8005790:	b570      	push	{r4, r5, r6, lr}
 8005792:	b96a      	cbnz	r2, 80057b0 <strstr+0x22>
 8005794:	bd70      	pop	{r4, r5, r6, pc}
 8005796:	429a      	cmp	r2, r3
 8005798:	d109      	bne.n	80057ae <strstr+0x20>
 800579a:	460c      	mov	r4, r1
 800579c:	4605      	mov	r5, r0
 800579e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d0f6      	beq.n	8005794 <strstr+0x6>
 80057a6:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80057aa:	429e      	cmp	r6, r3
 80057ac:	d0f7      	beq.n	800579e <strstr+0x10>
 80057ae:	3001      	adds	r0, #1
 80057b0:	7803      	ldrb	r3, [r0, #0]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d1ef      	bne.n	8005796 <strstr+0x8>
 80057b6:	4618      	mov	r0, r3
 80057b8:	e7ec      	b.n	8005794 <strstr+0x6>
	...

080057bc <_init>:
 80057bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057be:	bf00      	nop
 80057c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057c2:	bc08      	pop	{r3}
 80057c4:	469e      	mov	lr, r3
 80057c6:	4770      	bx	lr

080057c8 <_fini>:
 80057c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ca:	bf00      	nop
 80057cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057ce:	bc08      	pop	{r3}
 80057d0:	469e      	mov	lr, r3
 80057d2:	4770      	bx	lr
